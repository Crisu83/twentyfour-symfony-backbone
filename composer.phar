
<!-- saved from url=(0036)http://getcomposer.org/composer.phar -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">#!/usr/bin/env php
&lt;?php
/*
 * This file is part of Composer.
 *
 * (c) Nils Adermann &lt;naderman@naderman.de&gt;
 *     Jordi Boggiano &lt;j.boggiano@seld.be&gt;
 *
 * For the full copyright and license information, please view
 * the license that is located at the bottom of this file.
 */

Phar::mapPhar('composer.phar');
define('COMPOSER_DEV_WARNING_TIME', 1347748569);
require 'phar://composer.phar/bin/composer';

__HALT_COMPILER(); ?&gt;
√≠D&#65533;&#65533;√õ&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;
&#65533;&#65533;&#65533;composer.phar&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;src/bootstrap.php¬π&#65533;&#65533;√ôu-P¬π&#65533;&#65533;(≈ΩI≈∏¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;src/Composer/IO/ConsoleIO.php&#65533;&#65533;√ôu-P&#65533;&#65533;{√î√∞¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;src/Composer/IO/NullIO.php&#65533;&#65533;√ôu-P&#65533;&#65533;√º¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;src/Composer/IO/IOInterface.phpY&#65533;&#65533;√ôu-PY&#65533;&#65533;¬∫ =¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533; &#65533;&#65533;&#65533;src/Composer/Command/Command.php‚Ç¨&#65533;&#65533;√ôu-P‚Ç¨&#65533;&#65533;¬¢√æ‚ÄîI¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;-&#65533;&#65533;&#65533;src/Composer/Command/CreateProjectCommand.php&#65533;&#65533;√ôu-P&#65533;&#65533;√¨¬∞|¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;%&#65533;&#65533;&#65533;src/Composer/Command/AboutCommand.php¬¥&#65533;&#65533;√ôu-P¬¥&#65533;&#65533;‚Ä°√ë√è¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;$&#65533;&#65533;&#65533;src/Composer/Command/ShowCommand.phpK&#65533;&#65533;√ôu-PK&#65533;&#65533;T}√∑¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&amp;&#65533;&#65533;&#65533;src/Composer/Command/UpdateCommand.php	&#65533;&#65533;√ôu-P	&#65533;&#65533;Z√±√£¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;'&#65533;&#65533;&#65533;src/Composer/Command/InstallCommand.php`&#65533;&#65533;√ôu-P`&#65533;&#65533;√•=√≥¬ß¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;(&#65533;&#65533;&#65533;src/Composer/Command/ValidateCommand.php¬¥&#65533;&#65533;√ôu-P¬¥&#65533;&#65533;√á√ë(?¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;'&#65533;&#65533;&#65533;src/Composer/Command/DependsCommand.phpy
&#65533;&#65533;√ôu-Py
&#65533;&#65533;*‚Äô¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&amp;&#65533;&#65533;&#65533;src/Composer/Command/SearchCommand.php]
&#65533;&#65533;√ôu-P]
&#65533;&#65533; ¬≤$¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;*&#65533;&#65533;&#65533;src/Composer/Command/SelfUpdateCommand.php¬∫&#65533;&#65533;√ôu-P¬∫&#65533;&#65533;%!√•W¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;'&#65533;&#65533;&#65533;src/Composer/Command/RequireCommand.php√î&#65533;&#65533;√ôu-P√î&#65533;&#65533;pPG\¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;,&#65533;&#65533;&#65533;src/Composer/Command/DumpAutoloadCommand.php√ó&#65533;&#65533;√ôu-P√ó&#65533;&#65533;¬°{K√´¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;,&#65533;&#65533;&#65533;src/Composer/Command/Helper/DialogHelper.php≈æ&#65533;&#65533;√ôu-P≈æ&#65533;&#65533;‚Ä¢‚Äö≈í&amp;¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;$&#65533;&#65533;&#65533;src/Composer/Command/InitCommand.php√≥+&#65533;&#65533;√ôu-P√≥+&#65533;&#65533;√•√É¬≥5¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;)&#65533;&#65533;&#65533;src/Composer/Downloader/VcsDownloader.php[&#65533;&#65533;√ôu-P[&#65533;&#65533;¬£1≈íL¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;*&#65533;&#65533;&#65533;src/Composer/Downloader/FileDownloader.php√é	&#65533;&#65533;√ôu-P√é	&#65533;&#65533;JB2√ä¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;)&#65533;&#65533;&#65533;src/Composer/Downloader/SvnDownloader.phpY&#65533;&#65533;√ôu-PY&#65533;&#65533;√í‚Äò¬ª¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;0&#65533;&#65533;&#65533;src/Composer/Downloader/PearPackageExtractor.php‚Ä†&#65533;&#65533;√ôu-P‚Ä†&#65533;&#65533;¬ê&lt;_8¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;+&#65533;&#65533;&#65533;src/Composer/Downloader/DownloadManager.php&#65533;&#65533;√ôu-P&#65533;&#65533;‚Ä°√à√õ¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;/&#65533;&#65533;&#65533;src/Composer/Downloader/DownloaderInterface.php¬è&#65533;&#65533;√ôu-P¬è&#65533;&#65533;t‚Ç¨it¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;.&#65533;&#65533;&#65533;src/Composer/Downloader/TransportException.phpd&#65533;&#65533;&#65533;√ôu-Pd&#65533;&#65533;&#65533;G√â‚Ä°‚Ä∞¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;*&#65533;&#65533;&#65533;src/Composer/Downloader/PharDownloader.php√•&#65533;&#65533;&#65533;√ôu-P√•&#65533;&#65533;&#65533;√û√â√ß¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;)&#65533;&#65533;&#65533;src/Composer/Downloader/TarDownloader.php√£&#65533;&#65533;&#65533;√ôu-P√£&#65533;&#65533;&#65533;√ç‚ÄôX?¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;(&#65533;&#65533;&#65533;src/Composer/Downloader/HgDownloader.php¬•&#65533;&#65533;√ôu-P¬•&#65533;&#65533;√≤j‚Ä¶&nbsp;¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;-&#65533;&#65533;&#65533;src/Composer/Downloader/ArchiveDownloader.php5&#65533;&#65533;√ôu-P5&#65533;&#65533;¬Å√ª√´√£¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;)&#65533;&#65533;&#65533;src/Composer/Downloader/ZipDownloader.php√†&#65533;&#65533;√ôu-P√†&#65533;&#65533;√∂vn√´¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;)&#65533;&#65533;&#65533;src/Composer/Downloader/GitDownloader.php√õ&#65533;&#65533;√ôu-P√õ&#65533;&#65533;/q√ø-¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;+&#65533;&#65533;&#65533;src/Composer/Repository/ArrayRepository.phpc	&#65533;&#65533;√ôu-Pc	&#65533;&#65533;Ud√π√¨¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;0&#65533;&#65533;&#65533;src/Composer/Repository/FilesystemRepository.php‚Ä∞&#65533;&#65533;√ôu-P‚Ä∞&#65533;&#65533;ÀÜ¬ùM¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;7&#65533;&#65533;&#65533;src/Composer/Repository/WritableRepositoryInterface.php[&#65533;&#65533;√ôu-P[&#65533;&#65533;tM√ï¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;*&#65533;&#65533;&#65533;src/Composer/Repository/PearRepository.php‚Ä†&#65533;&#65533;√ôu-P‚Ä†&#65533;&#65533;√§1k√∑¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;-&#65533;&#65533;&#65533;src/Composer/Repository/RepositoryManager.phpp&#65533;&#65533;√ôu-Pp&#65533;&#65533;√±¬•√ßy¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;,&#65533;&#65533;&#65533;src/Composer/Repository/Vcs/GitHubDriver.phpB&#65533;&#65533;√ôu-PB&#65533;&#65533;-q$‚Äî¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;2&#65533;&#65533;&#65533;src/Composer/Repository/Vcs/GitBitbucketDriver.php=
&#65533;&#65533;√ôu-P=
&#65533;&#65533;√è√á≈Ω¬∫¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;)&#65533;&#65533;&#65533;src/Composer/Repository/Vcs/GitDriver.php&#65533;&#65533;√ôu-P&#65533;&#65533;‚Ä°¬™¬æ,¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;)&#65533;&#65533;&#65533;src/Composer/Repository/Vcs/SvnDriver.php¬π&#65533;&#65533;√ôu-P¬π&#65533;&#65533;≈æ√®9¬ç¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;2&#65533;&#65533;&#65533;src/Composer/Repository/Vcs/VcsDriverInterface.phpC&#65533;&#65533;√ôu-PC&#65533;&#65533;√πF√Ñ√º¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;(&#65533;&#65533;&#65533;src/Composer/Repository/Vcs/HgDriver.phpj
&#65533;&#65533;√ôu-Pj
&#65533;&#65533;z√éX¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;)&#65533;&#65533;&#65533;src/Composer/Repository/Vcs/VcsDriver.php√æ&#65533;&#65533;√ôu-P√æ&#65533;&#65533;L2B¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;1&#65533;&#65533;&#65533;src/Composer/Repository/Vcs/HgBitbucketDriver.php√∏&#65533;&#65533;√ôu-P√∏&#65533;&#65533;√ç¬§m√©¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;4&#65533;&#65533;&#65533;src/Composer/Repository/InstalledArrayRepository.php√õ&#65533;&#65533;&#65533;√ôu-P√õ&#65533;&#65533;&#65533;~≈Ω$√ò¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;)&#65533;&#65533;&#65533;src/Composer/Repository/VcsRepository.php‚Ç¨&#65533;&#65533;√ôu-P‚Ç¨&#65533;&#65533;¬¢√ã¬çl¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;.&#65533;&#65533;&#65533;src/Composer/Repository/PlatformRepository.php¬¨&#65533;&#65533;√ôu-P¬¨&#65533;&#65533;l,√Ç≈†¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;9&#65533;&#65533;&#65533;src/Composer/Repository/InstalledFilesystemRepository.php¬£&#65533;&#65533;&#65533;√ôu-P¬£&#65533;&#65533;&#65533;V
‚Ä¢_¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;/&#65533;&#65533;&#65533;src/Composer/Repository/CompositeRepository.phpD&#65533;&#65533;√ôu-PD&#65533;&#65533;¬ê¬º√Üc¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;8&#65533;&#65533;&#65533;src/Composer/Repository/InstalledRepositoryInterface.php‚Ä°&#65533;&#65533;&#65533;√ôu-P‚Ä°&#65533;&#65533;&#65533;¬£9p¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;.&#65533;&#65533;&#65533;src/Composer/Repository/ComposerRepository.php?&#65533;&#65533;√ôu-P?&#65533;&#65533;P|L√ï¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;/&#65533;&#65533;&#65533;src/Composer/Repository/Pear/DependencyInfo.phpq&#65533;&#65533;√ôu-Pq&#65533;&#65533;f¬∫T√≤¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;8&#65533;&#65533;&#65533;src/Composer/Repository/Pear/PackageDependencyParser.php!&#65533;&#65533;√ôu-P!&#65533;&#65533;=√å√≥F¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;,&#65533;&#65533;&#65533;src/Composer/Repository/Pear/ChannelInfo.php√Ñ&#65533;&#65533;√ôu-P√Ñ&#65533;&#65533;:T*√â¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;.&#65533;&#65533;&#65533;src/Composer/Repository/Pear/ChannelReader.phpm&#65533;&#65533;√ôu-Pm&#65533;&#65533;√Ø√•N'¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;,&#65533;&#65533;&#65533;src/Composer/Repository/Pear/PackageInfo.php¬∞&#65533;&#65533;√ôu-P¬∞&#65533;&#65533;≈∏
¬∏¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;5&#65533;&#65533;&#65533;src/Composer/Repository/Pear/DependencyConstraint.phpq&#65533;&#65533;√ôu-Pq&#65533;&#65533;9=¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;4&#65533;&#65533;&#65533;src/Composer/Repository/Pear/ChannelRest11Reader.php&amp;	&#65533;&#65533;√ôu-P&amp;	&#65533;&#65533;√≤Ub¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;,&#65533;&#65533;&#65533;src/Composer/Repository/Pear/ReleaseInfo.php‚Äô&#65533;&#65533;√ôu-P‚Äô&#65533;&#65533;o‚Äú≈†√É¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;2&#65533;&#65533;&#65533;src/Composer/Repository/Pear/BaseChannelReader.php4&#65533;&#65533;√ôu-P4&#65533;&#65533;D?‚Äπ‚Ä¶¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;4&#65533;&#65533;&#65533;src/Composer/Repository/Pear/ChannelRest10Reader.php√Ä	&#65533;&#65533;√ôu-P√Ä	&#65533;&#65533;]1√û¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;/&#65533;&#65533;&#65533;src/Composer/Repository/RepositoryInterface.phpm&#65533;&#65533;√ôu-Pm&#65533;&#65533;~`¬¶2¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;-&#65533;&#65533;&#65533;src/Composer/Repository/PackageRepository.php&#65533;&#65533;√ôu-P&#65533;&#65533;‚Äö√≥s&gt;¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;9&#65533;&#65533;&#65533;src/Composer/Repository/NotifiableRepositoryInterface.php√£&#65533;&#65533;&#65533;√ôu-P√£&#65533;&#65533;&#65533;√Ö√êS'¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;+&#65533;&#65533;&#65533;src/Composer/Package/Dumper/ArrayDumper.php&#65533;&#65533;√ôu-P&#65533;&#65533;√é&#65533;'Y¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;*&#65533;&#65533;&#65533;src/Composer/Package/Loader/JsonLoader.php√π&#65533;&#65533;√ôu-P√π&#65533;&#65533;!~ÀÜ{¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;/&#65533;&#65533;&#65533;src/Composer/Package/Loader/LoaderInterface.php‚Äû&#65533;&#65533;&#65533;√ôu-P‚Äû&#65533;&#65533;&#65533;x‚Ñ¢√ØS¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;+&#65533;&#65533;&#65533;src/Composer/Package/Loader/ArrayLoader.php√º&#65533;&#65533;√ôu-P√º&#65533;&#65533;√±¬æ-L¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;5&#65533;&#65533;&#65533;src/Composer/Package/Loader/ValidatingArrayLoader.php¬∂&#65533;&#65533;√ôu-P¬∂&#65533;&#65533;√©+¬πP¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;1&#65533;&#65533;&#65533;src/Composer/Package/Loader/RootPackageLoader.php&#65533;&#65533;√ôu-P&#65533;&#65533;≈†9¬≥√î¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&amp;&#65533;&#65533;&#65533;src/Composer/Package/MemoryPackage.php&#65533;&#65533;√ôu-P&#65533;&#65533;√é√Ü√Ø¬µ¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;src/Composer/Package/Locker.php&#65533;&#65533;√ôu-P&#65533;&#65533;√ó 'X¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;)&#65533;&#65533;&#65533;src/Composer/Package/PackageInterface.php&#65533;&#65533;√ôu-P&#65533;&#65533;0=	√¨¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;$&#65533;&#65533;&#65533;src/Composer/Package/BasePackage.php=
&#65533;&#65533;√ôu-P=
&#65533;&#65533;¬¢iJ√®¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;.&#65533;&#65533;&#65533;src/Composer/Package/Version/VersionParser.php√´&#65533;&#65533;√ôu-P√´&#65533;&#65533;t`‚Ñ¢¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;%&#65533;&#65533;&#65533;src/Composer/Package/AliasPackage.phpw&#65533;&#65533;√ôu-Pw&#65533;&#65533;¬Ø¬æ√ì ¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;src/Composer/Package/Link.php3&#65533;&#65533;√ôu-P3&#65533;&#65533;‚Äôf6¬π¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;7&#65533;&#65533;&#65533;src/Composer/Package/LinkConstraint/MultiConstraint.php\&#65533;&#65533;√ôu-P\&#65533;&#65533;[}c¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;9&#65533;&#65533;&#65533;src/Composer/Package/LinkConstraint/VersionConstraint.php√π&#65533;&#65533;√ôu-P√π&#65533;&#65533;)m√è√é¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;:&#65533;&#65533;&#65533;src/Composer/Package/LinkConstraint/SpecificConstraint.phpq&#65533;&#65533;√ôu-Pq&#65533;&#65533;‚ÄìS≈°√∏¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;?&#65533;&#65533;&#65533;src/Composer/Package/LinkConstraint/LinkConstraintInterface.php&#65533;&#65533;√ôu-P&#65533;&#65533;√•√æ‚Ä°¬¢¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;src/Composer/Cache.php¬æ&#65533;&#65533;√ôu-P¬æ&#65533;&#65533;√â√≤&nbsp;√π¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;3&#65533;&#65533;&#65533;src/Composer/DependencyResolver/PolicyInterface.php‚Äò&#65533;&#65533;√ôu-P‚Äò&#65533;&#65533;B≈∏¬∂¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;+&#65533;&#65533;&#65533;src/Composer/DependencyResolver/RuleSet.php‚Ä∫	&#65533;&#65533;√ôu-P‚Ä∫	&#65533;&#65533;Jy√Ä¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;6&#65533;&#65533;&#65533;src/Composer/DependencyResolver/SolverBugException.phpÀú&#65533;&#65533;√ôu-PÀú&#65533;&#65533;"qN¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;1&#65533;&#65533;&#65533;src/Composer/DependencyResolver/DefaultPolicy.phpW&#65533;&#65533;√ôu-PW&#65533;&#65533;≈æ√©]¬Å¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;-&#65533;&#65533;&#65533;src/Composer/DependencyResolver/Decisions.php≈Ω&#65533;&#65533;√ôu-P≈Ω&#65533;&#65533;¬ª√≠a√¥¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;1&#65533;&#65533;&#65533;src/Composer/DependencyResolver/RuleWatchNode.php√∞&#65533;&#65533;√ôu-P√∞&#65533;&#65533;]$√≥¬¥¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;;&#65533;&#65533;&#65533;src/Composer/DependencyResolver/SolverProblemsException.php√Ñ&#65533;&#65533;√ôu-P√Ñ&#65533;&#65533;¬¨√ñ[¬∞¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;/&#65533;&#65533;&#65533;src/Composer/DependencyResolver/Transaction.php&#65533;&#65533;√ôu-P&#65533;&#65533;‚Äú√æ√û‚Ä°¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;@&#65533;&#65533;&#65533;src/Composer/DependencyResolver/Operation/UninstallOperation.phpI&#65533;&#65533;√ôu-PI&#65533;&#65533;F√ª√Ç√â¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;=&#65533;&#65533;&#65533;src/Composer/DependencyResolver/Operation/UpdateOperation.phph&#65533;&#65533;√ôu-Ph&#65533;&#65533;√∂S√ï]¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;I&#65533;&#65533;&#65533;src/Composer/DependencyResolver/Operation/MarkAliasInstalledOperation.php√ê&#65533;&#65533;√ôu-P√ê&#65533;&#65533;xUZa¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&gt;&#65533;&#65533;&#65533;src/Composer/DependencyResolver/Operation/InstallOperation.phpC&#65533;&#65533;√ôu-PC&#65533;&#65533;¬¥\√µ*¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;=&#65533;&#65533;&#65533;src/Composer/DependencyResolver/Operation/SolverOperation.php√´&#65533;&#65533;√ôu-P√´&#65533;&#65533;√Ñ¬ß√ù‚Äù¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;K&#65533;&#65533;&#65533;src/Composer/DependencyResolver/Operation/MarkAliasUninstalledOperation.php√ñ&#65533;&#65533;√ôu-P√ñ&#65533;&#65533;_i√á¬´¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;@&#65533;&#65533;&#65533;src/Composer/DependencyResolver/Operation/OperationInterface.php√ì&#65533;&#65533;&#65533;√ôu-P√ì&#65533;&#65533;&#65533;√ô√¢&amp;√§¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;(&#65533;&#65533;&#65533;src/Composer/DependencyResolver/Pool.phpC&#65533;&#65533;√ôu-PC&#65533;&#65533;¬øWs:¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;(&#65533;&#65533;&#65533;src/Composer/DependencyResolver/Rule.php√î&#65533;&#65533;√ôu-P√î&#65533;&#65533;√ï√∫√Æ¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;4&#65533;&#65533;&#65533;src/Composer/DependencyResolver/RuleSetGenerator.phpP&#65533;&#65533;√ôu-PP&#65533;&#65533;√Ä√úd¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;/&#65533;&#65533;&#65533;src/Composer/DependencyResolver/DebugSolver.php‚Ä∞&#65533;&#65533;√ôu-P‚Ä∞&#65533;&#65533;¬£√í¬≠‚Ä¶¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;3&#65533;&#65533;&#65533;src/Composer/DependencyResolver/RuleSetIterator.php&#65533;&#65533;√ôu-P&#65533;&#65533;}√µ√á√π¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;2&#65533;&#65533;&#65533;src/Composer/DependencyResolver/RuleWatchChain.phpi&#65533;&#65533;√ôu-Pi&#65533;&#65533;h√Ø≈°,¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;*&#65533;&#65533;&#65533;src/Composer/DependencyResolver/Solver.phpC5&#65533;&#65533;√ôu-PC5&#65533;&#65533;√•"fP¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;+&#65533;&#65533;&#65533;src/Composer/DependencyResolver/Request.php‚Ä∞&#65533;&#65533;√ôu-P‚Ä∞&#65533;&#65533;1¬≤I¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;+&#65533;&#65533;&#65533;src/Composer/DependencyResolver/Problem.php√ê
&#65533;&#65533;√ôu-P√ê
&#65533;&#65533;iD√ÅN¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;2&#65533;&#65533;&#65533;src/Composer/DependencyResolver/RuleWatchGraph.php√°&#65533;&#65533;√ôu-P√°&#65533;&#65533;‚Ä∞r√¥v¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;src/Composer/Factory.php&#65533;&#65533;√ôu-P&#65533;&#65533;"√≥¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533; &#65533;&#65533;&#65533;src/Composer/Util/Filesystem.php¬∞&#65533;&#65533;√ôu-P¬∞&#65533;&#65533;√Ç√å√©¬®¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;%&#65533;&#65533;&#65533;src/Composer/Util/ProcessExecutor.phpq&#65533;&#65533;√ôu-Pq&#65533;&#65533;‚Ä∞≈†√á¬¨¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&amp;&#65533;&#65533;&#65533;src/Composer/Util/RemoteFilesystem.php√í&#65533;&#65533;√ôu-P√í&#65533;&#65533;¬ù¬£≈ì√ü¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;*&#65533;&#65533;&#65533;src/Composer/Util/StreamContextFactory.phpC&#65533;&#65533;√ôu-PC&#65533;&#65533;#Yt:¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;"&#65533;&#65533;&#65533;src/Composer/Util/ErrorHandler.php&#65533;&#65533;√ôu-P&#65533;&#65533;¬¥@‚Ä¶√¶¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;+&#65533;&#65533;&#65533;src/Composer/Util/SpdxLicenseIdentifier.php6
&#65533;&#65533;√ôu-P6
&#65533;&#65533;√Ñ6¬ªo¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;src/Composer/Util/Svn.php[&#65533;&#65533;√ôu-P[&#65533;&#65533;√∑‚Äöc‚Ä∫¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;src/Composer/Composer.php‚Äî&#65533;&#65533;√ôu-P‚Äî&#65533;&#65533;‚Äù√µC¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;%&#65533;&#65533;&#65533;src/Composer/Json/JsonManipulator.phpI
&#65533;&#65533;√ôu-PI
&#65533;&#65533;√©/√æ¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;src/Composer/Json/JsonFile.phpC&#65533;&#65533;√ôu-PC&#65533;&#65533;√ßp¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;-&#65533;&#65533;&#65533;src/Composer/Json/JsonValidationException.php2&#65533;&#65533;√ôu-P2&#65533;&#65533;9b‚Äû1¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;src/Composer/Config.php√º&#65533;&#65533;√ôu-P√º&#65533;&#65533;√≤√ê√∞¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;src/Composer/Script/Event.php√¥&#65533;&#65533;√ôu-P√¥&#65533;&#65533;¬¢‚Ñ¢¬Ω¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;$&#65533;&#65533;&#65533;src/Composer/Script/ScriptEvents.php¬Å&#65533;&#65533;√ôu-P¬Å&#65533;&#65533;√Å¬ß√ã√≠¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;$&#65533;&#65533;&#65533;src/Composer/Script/CommandEvent.phpo&#65533;&#65533;&#65533;√ôu-Po&#65533;&#65533;&#65533;
¬∑y¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;$&#65533;&#65533;&#65533;src/Composer/Script/PackageEvent.php√¢&#65533;&#65533;√ôu-P√¢&#65533;&#65533;[¬¥¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;'&#65533;&#65533;&#65533;src/Composer/Script/EventDispatcher.php‚Ä°&#65533;&#65533;√ôu-P‚Ä°&#65533;&#65533;?!√ï√§¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;(&#65533;&#65533;&#65533;src/Composer/Installer/NoopInstaller.php&#65533;&#65533;√ôu-P&#65533;&#65533;¬≤√Ω¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;/&#65533;&#65533;&#65533;src/Composer/Installer/MetapackageInstaller.php¬¶&#65533;&#65533;√ôu-P¬¶&#65533;&#65533;¬´¬£f√é¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;(&#65533;&#65533;&#65533;src/Composer/Installer/PearInstaller.php√ô&#65533;&#65533;√ôu-P√ô&#65533;&#65533;o√¨h¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;+&#65533;&#65533;&#65533;src/Composer/Installer/ProjectInstaller.php√°&#65533;&#65533;√ôu-P√°&#65533;&#65533;&gt;:1√Ñ¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;+&#65533;&#65533;&#65533;src/Composer/Installer/LibraryInstaller.php¬∑&#65533;&#65533;√ôu-P¬∑&#65533;&#65533;¬≥x¬∏√º¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;.&#65533;&#65533;&#65533;src/Composer/Installer/InstallationManager.php≈†&#65533;&#65533;√ôu-P≈†&#65533;&#65533;	‚ÄìF ¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;-&#65533;&#65533;&#65533;src/Composer/Installer/InstallerInterface.php√Ö&#65533;&#65533;√ôu-P√Ö&#65533;&#65533;HS‚Äú¬°¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;-&#65533;&#65533;&#65533;src/Composer/Installer/InstallerInstaller.php¬¥	&#65533;&#65533;√ôu-P¬¥	&#65533;&#65533;‚Ä†¬©≈æ¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;$&#65533;&#65533;&#65533;src/Composer/Console/Application.php!&#65533;&#65533;√ôu-P!&#65533;&#65533;√°√°W,¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;+&#65533;&#65533;&#65533;src/Composer/Autoload/AutoloadGenerator.php‚Ä°(&#65533;&#65533;√ôu-P‚Ä°(&#65533;&#65533;‚Äû6b√µ¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;+&#65533;&#65533;&#65533;src/Composer/Autoload/ClassMapGenerator.php√®&#65533;&#65533;√ôu-P√®&#65533;&#65533;i√∏)√ú¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;src/Composer/Installer.phpP=&#65533;&#65533;√ôu-PP=&#65533;&#65533;√ø¬Æ{¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;%&#65533;&#65533;&#65533;src/Composer/Autoload/ClassLoader.php√Ü&#65533;&#65533;√ôu-P√Ü&#65533;&#65533;¬Å‚Äì¬ø8¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;res/spdx-identifier.jsonX	&#65533;&#65533;√ôu-PX	&#65533;&#65533;≈íf√ß√å¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;res/composer-schema.json∆í+&#65533;&#65533;√ôu-P∆í+&#65533;&#65533;√É‚Ä¢a¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;src/Composer/IO/hiddeninput.exe&#65533;$&#65533;&#65533;√ôu-P&#65533;$&#65533;&#65533;‚Ä¢¬ç¬•v¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;?&#65533;&#65533;&#65533;vendor/symfony/process/Symfony/Component/Process/PhpProcess.php√ü&#65533;&#65533;√ôu-P√ü&#65533;&#65533;√≠Z√¢¬Æ¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;E&#65533;&#65533;&#65533;vendor/symfony/process/Symfony/Component/Process/ExecutableFinder.php(&#65533;&#65533;√ôu-P(&#65533;&#65533;‚Äπ√∏@¬≠¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&lt;&#65533;&#65533;&#65533;vendor/symfony/process/Symfony/Component/Process/Process.php¬∫-&#65533;&#65533;√ôu-P¬∫-&#65533;&#65533;‚Äù‚ÄòS	¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;C&#65533;&#65533;&#65533;vendor/symfony/process/Symfony/Component/Process/ProcessBuilder.php√∑&#65533;&#65533;√ôu-P√∑&#65533;&#65533;r√ì√çÀú¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;Q&#65533;&#65533;&#65533;vendor/symfony/process/Symfony/Component/Process/Exception/ExceptionInterface.phpf&#65533;&#65533;&#65533;√ôu-Pf&#65533;&#65533;&#65533;]√∂&gt;T¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;O&#65533;&#65533;&#65533;vendor/symfony/process/Symfony/Component/Process/Exception/RuntimeException.phpÀú&#65533;&#65533;&#65533;√ôu-PÀú&#65533;&#65533;&#65533;¬¢√ò:¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;U&#65533;&#65533;&#65533;vendor/symfony/process/Symfony/Component/Process/Exception/ProcessFailedException.php¬¢&#65533;&#65533;√ôu-P¬¢&#65533;&#65533;√í:/√º¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;H&#65533;&#65533;&#65533;vendor/symfony/process/Symfony/Component/Process/PhpExecutableFinder.php‚Ä∫&#65533;&#65533;√ôu-P‚Ä∫&#65533;&#65533;¬¥¬•DE¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;H&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Command/HelpCommand.php√¢&#65533;&#65533;√ôu-P√¢&#65533;&#65533;√ù√º√ø¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;D&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Command/Command.php%&#65533;&#65533;√ôu-P%&#65533;&#65533;0√ú‚Ä¢‚Ä°¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;H&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Command/ListCommand.php=&#65533;&#65533;√ôu-P=&#65533;&#65533;\√∑¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;M&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Tester/ApplicationTester.php√≤&#65533;&#65533;√ôu-P√≤&#65533;&#65533;*¬£¬¥¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;I&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Tester/CommandTester.phpz&#65533;&#65533;√ôu-Pz&#65533;&#65533;xU√ó√∞¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;X&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Formatter/OutputFormatterStyleStack.php&#65533;&#65533;√ôu-P&#65533;&#65533;yI'¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;S&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Formatter/OutputFormatterStyle.php)&#65533;&#65533;√ôu-P)&#65533;&#65533;¬•√íx¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;\&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Formatter/OutputFormatterStyleInterface.php≈Ω&#65533;&#65533;√ôu-P≈Ω&#65533;&#65533;√∂√´√Ñ=¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;N&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Formatter/OutputFormatter.php¬∏&#65533;&#65533;√ôu-P¬∏&#65533;&#65533;*jj¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;W&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Formatter/OutputFormatterInterface.phpÀú&#65533;&#65533;√ôu-PÀú&#65533;&#65533;3l~¬¥¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;@&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Application.php.H&#65533;&#65533;√ôu-P.H&#65533;&#65533;
√üS√ç¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;H&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Input/InputArgument.php≈°&#65533;&#65533;√ôu-P≈°&#65533;&#65533;√ΩwOm¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;@&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Input/Input.php∆í	&#65533;&#65533;√ôu-P∆í	&#65533;&#65533;|&gt;\¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;F&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Input/StringInput.php‚Äô&#65533;&#65533;√ôu-P‚Äô&#65533;&#65533;‚Äπc‚Ç¨‚Ä¢¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;F&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Input/InputOption.php&#65533;&#65533;√ôu-P&#65533;&#65533;X¬•¬™X¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;D&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Input/ArgvInput.php√Ñ&#65533;&#65533;√ôu-P√Ñ&#65533;&#65533;√∂4¬≥√å¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;I&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Input/InputInterface.php &#65533;&#65533;√ôu-P &#65533;&#65533;9‚Äù√∏√á¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;E&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Input/ArrayInput.php√ë&#65533;&#65533;√ôu-P√ë&#65533;&#65533;√ö_¬Ø√É¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;J&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Input/InputDefinition.php;%&#65533;&#65533;√ôu-P;%&#65533;&#65533;≈°¬ø√ü¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;:&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Shell.php√§
&#65533;&#65533;√ôu-P√§
&#65533;&#65533;√î¬¨√´√Å¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;B&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Output/Output.phpx&#65533;&#65533;√ôu-Px&#65533;&#65533;√Ü¬§¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;F&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Output/NullOutput.php¬£&#65533;&#65533;&#65533;√ôu-P¬£&#65533;&#65533;&#65533;‚Äô√á¬¢≈Ω¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;R&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Output/ConsoleOutputInterface.php&#65533;&#65533;√ôu-P&#65533;&#65533;¬ç√É¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;H&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Output/StreamOutput.php‚Ñ¢&#65533;&#65533;√ôu-P‚Ñ¢&#65533;&#65533;√Å‚Äì√ê¬•¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;K&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Output/OutputInterface.php√¶&#65533;&#65533;√ôu-P√¶&#65533;&#65533;.‚Äú&lt;¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;I&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Output/ConsoleOutput.phpt&#65533;&#65533;√ôu-Pt&#65533;&#65533;(√à&gt;T¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;K&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Helper/HelperInterface.php√Ø&#65533;&#65533;&#65533;√ôu-P√Ø&#65533;&#65533;&#65533;=e¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;K&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Helper/FormatterHelper.php&#65533;&#65533;√ôu-P&#65533;&#65533;8≈∏¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;E&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Helper/HelperSet.php√ì&#65533;&#65533;√ôu-P√ì&#65533;&#65533;Àú^9t¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;H&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php√¨&#65533;&#65533;√ôu-P√¨&#65533;&#65533;1¬æG≈†¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;B&#65533;&#65533;&#65533;vendor/symfony/console/Symfony/Component/Console/Helper/Helper.php9&#65533;&#65533;√ôu-P9&#65533;&#65533;‚Äπ√∫¬©≈†¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;9&#65533;&#65533;&#65533;vendor/symfony/finder/Symfony/Component/Finder/Finder.php&gt;&#65533;&#65533;√ôu-P&gt;&#65533;&#65533;¬§C√ñ¬°¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;7&#65533;&#65533;&#65533;vendor/symfony/finder/Symfony/Component/Finder/Glob.php
&#65533;&#65533;√ôu-P
&#65533;&#65533;z¬ù√∏
¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;T&#65533;&#65533;&#65533;vendor/symfony/finder/Symfony/Component/Finder/Iterator/DepthRangeFilterIterator.phpg&#65533;&#65533;√ôu-Pg&#65533;&#65533;√ßOT¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;L&#65533;&#65533;&#65533;vendor/symfony/finder/Symfony/Component/Finder/Iterator/SortableIterator.php√ú&#65533;&#65533;√ôu-P√ú&#65533;&#65533; H&nbsp;:¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;U&#65533;&#65533;&#65533;vendor/symfony/finder/Symfony/Component/Finder/Iterator/FilecontentFilterIterator.php#&#65533;&#65533;√ôu-P#&#65533;&#65533;√ö_V√á¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;S&#65533;&#65533;&#65533;vendor/symfony/finder/Symfony/Component/Finder/Iterator/SizeRangeFilterIterator.php,&#65533;&#65533;√ôu-P,&#65533;&#65533;Q√ê√ßm¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;Z&#65533;&#65533;&#65533;vendor/symfony/finder/Symfony/Component/Finder/Iterator/ExcludeDirectoryFilterIterator.php¬•&#65533;&#65533;√ôu-P¬•&#65533;&#65533;√ùz`.¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;J&#65533;&#65533;&#65533;vendor/symfony/finder/Symfony/Component/Finder/Iterator/FilterIterator.php¬π&#65533;&#65533;√ôu-P¬π&#65533;&#65533;√çÀÜ¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;V&#65533;&#65533;&#65533;vendor/symfony/finder/Symfony/Component/Finder/Iterator/MultiplePcreFilterIterator.php¬ß&#65533;&#65533;√ôu-P¬ß&#65533;&#65533;√•‚Ä¶√Öb¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;P&#65533;&#65533;&#65533;vendor/symfony/finder/Symfony/Component/Finder/Iterator/CustomFilterIterator.php[&#65533;&#65533;√ôu-P[&#65533;&#65533;¬≠√•W¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;R&#65533;&#65533;&#65533;vendor/symfony/finder/Symfony/Component/Finder/Iterator/FilenameFilterIterator.phpz&#65533;&#65533;√ôu-Pz&#65533;&#65533;WlH¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;S&#65533;&#65533;&#65533;vendor/symfony/finder/Symfony/Component/Finder/Iterator/DateRangeFilterIterator.php.&#65533;&#65533;√ôu-P.&#65533;&#65533;`‚Äòi:¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;R&#65533;&#65533;&#65533;vendor/symfony/finder/Symfony/Component/Finder/Iterator/FileTypeFilterIterator.php\&#65533;&#65533;√ôu-P\&#65533;&#65533;p‚Äò'Àú¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;V&#65533;&#65533;&#65533;vendor/symfony/finder/Symfony/Component/Finder/Iterator/RecursiveDirectoryIterator.php7&#65533;&#65533;√ôu-P7&#65533;&#65533;PÀÜ7¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;L&#65533;&#65533;&#65533;vendor/symfony/finder/Symfony/Component/Finder/Comparator/DateComparator.php&amp;&#65533;&#65533;√ôu-P&amp;&#65533;&#65533;√©hd¬±¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;N&#65533;&#65533;&#65533;vendor/symfony/finder/Symfony/Component/Finder/Comparator/NumberComparator.phpy&#65533;&#65533;√ôu-Py&#65533;&#65533;"`√õ¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;H&#65533;&#65533;&#65533;vendor/symfony/finder/Symfony/Component/Finder/Comparator/Comparator.phpÀÜ&#65533;&#65533;√ôu-PÀÜ&#65533;&#65533;&gt;≈°]X¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&gt;&#65533;&#65533;&#65533;vendor/symfony/finder/Symfony/Component/Finder/SplFileInfo.php‚Ä†&#65533;&#65533;√ôu-P‚Ä†&#65533;&#65533;‚Äö&amp;G√á¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;4&#65533;&#65533;&#65533;vendor/seld/jsonlint/src/Seld/JsonLint/Undefined.php&gt;&#65533;&#65533;&#65533;√ôu-P&gt;&#65533;&#65533;&#65533;√øq≈∏≈∏¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;5&#65533;&#65533;&#65533;vendor/seld/jsonlint/src/Seld/JsonLint/JsonParser.php∆í&amp;&#65533;&#65533;√ôu-P∆í&amp;&#65533;&#65533;¬ª√ê√°~¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;0&#65533;&#65533;&#65533;vendor/seld/jsonlint/src/Seld/JsonLint/Lexer.php‚Äò&#65533;&#65533;√ôu-P‚Äò&#65533;&#65533;8I	D¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;;&#65533;&#65533;&#65533;vendor/seld/jsonlint/src/Seld/JsonLint/ParsingException.php&#65533;&#65533;√ôu-P&#65533;&#65533;√Ω¬ª:√ã¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;I&#65533;&#65533;&#65533;vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/Undefined.phpx&#65533;&#65533;√ôu-Px&#65533;&#65533;h¬∑√ôq¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;D&#65533;&#65533;&#65533;vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/Type.php√î&#65533;&#65533;√ôu-P√î&#65533;&#65533;‚Ä¶√©+F¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;F&#65533;&#65533;&#65533;vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/Schema.php√î&#65533;&#65533;√ôu-P√î&#65533;&#65533;¬π:fM¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;F&#65533;&#65533;&#65533;vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/Number.phpW&#65533;&#65533;√ôu-PW&#65533;&#65533;.1√≤√ß¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;F&#65533;&#65533;&#65533;vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/Object.php‚Äù&#65533;&#65533;√ôu-P‚Äù&#65533;&#65533;c√®Z√ª¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;S&#65533;&#65533;&#65533;vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/ConstraintInterface.php$&#65533;&#65533;√ôu-P$&#65533;&#65533;g√ñ√¨¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;J&#65533;&#65533;&#65533;vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/Constraint.php
&#65533;&#65533;√ôu-P
&#65533;&#65533;&gt;√£¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;J&#65533;&#65533;&#65533;vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/Collection.phpV&#65533;&#65533;√ôu-PV&#65533;&#65533;√ú&lt;¬ß¬∂¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;D&#65533;&#65533;&#65533;vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/Enum.php‚Ä†&#65533;&#65533;√ôu-P‚Ä†&#65533;&#65533;$(m¬æ¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;F&#65533;&#65533;&#65533;vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/String.phpÀú&#65533;&#65533;√ôu-PÀú&#65533;&#65533;¬¥√µ‚Äîk¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;=&#65533;&#65533;&#65533;vendor/justinrainbow/json-schema/src/JsonSchema/Validator.php[&#65533;&#65533;√ôu-P[&#65533;&#65533;8‚Äî√∂¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;vendor/autoload.php&#65533;&#65533;√ôu-P&#65533;&#65533;≈ì¬∞a[¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;'&#65533;&#65533;&#65533;vendor/composer/autoload_namespaces.php¬ª&#65533;&#65533;√ôu-P¬ª&#65533;&#65533;(√É¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;%&#65533;&#65533;&#65533;vendor/composer/autoload_classmap.phpZ&#65533;&#65533;&#65533;√ôu-PZ&#65533;&#65533;&#65533;√´¬¶√°‚Äì¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;vendor/composer/ClassLoader.phpC	&#65533;&#65533;√ôu-PC	&#65533;&#65533;‚Ä¶&nbsp;√†¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;bin/composer&#65533;&#65533;√ôu-P&#65533;&#65533;√Øoh¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;LICENSE3&#65533;&#65533;√ôu-P3&#65533;&#65533;¬Å2¬∂&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&lt;?php











function includeIfExists($file)
{
if (file_exists($file)) {
return include $file;
}
}

if ((!$loader = includeIfExists(__DIR__.'/../vendor/autoload.php')) &amp;&amp; (!$loader = includeIfExists(__DIR__.'/../../../autoload.php'))) {
die('You must set up the project dependencies, run the following commands:'.PHP_EOL.
'curl -s http://getcomposer.org/installer | php'.PHP_EOL.
'php composer.phar install'.PHP_EOL);
}

return $loader;
&lt;?php











namespace Composer\IO;

use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Helper\HelperSet;







class ConsoleIO implements IOInterface
{
protected $input;
protected $output;
protected $helperSet;
protected $authorizations = array();
protected $lastMessage;








public function __construct(InputInterface $input, OutputInterface $output, HelperSet $helperSet)
{
$this-&gt;input = $input;
$this-&gt;output = $output;
$this-&gt;helperSet = $helperSet;
}




public function isInteractive()
{
return $this-&gt;input-&gt;isInteractive();
}




public function isDecorated()
{
return $this-&gt;output-&gt;isDecorated();
}




public function isVerbose()
{
return (bool) $this-&gt;input-&gt;getOption('verbose');
}




public function write($messages, $newline = true)
{
$this-&gt;output-&gt;write($messages, $newline);
$this-&gt;lastMessage = join($newline ? "\n" : '', (array) $messages);
}




public function overwrite($messages, $newline = true, $size = null)
{

 $messages = join($newline ? "\n" : '', (array) $messages);


 if (!isset($size)) {

 $size = strlen(strip_tags($this-&gt;lastMessage));
}

 $this-&gt;write(str_repeat("\x08", $size), false);


 $this-&gt;write($messages, false);

$fill = $size - strlen(strip_tags($messages));
if ($fill &gt; 0) {

 $this-&gt;write(str_repeat(' ', $fill), false);

 $this-&gt;write(str_repeat("\x08", $fill), false);
}

if ($newline) {
$this-&gt;write('');
}
$this-&gt;lastMessage = $messages;
}




public function ask($question, $default = null)
{
return $this-&gt;helperSet-&gt;get('dialog')-&gt;ask($this-&gt;output, $question, $default);
}




public function askConfirmation($question, $default = true)
{
return $this-&gt;helperSet-&gt;get('dialog')-&gt;askConfirmation($this-&gt;output, $question, $default);
}




public function askAndValidate($question, $validator, $attempts = false, $default = null)
{
return $this-&gt;helperSet-&gt;get('dialog')-&gt;askAndValidate($this-&gt;output, $question, $validator, $attempts, $default);
}




public function askAndHideAnswer($question)
{

 if (defined('PHP_WINDOWS_VERSION_BUILD')) {
$exe = __DIR__.'\\hiddeninput.exe';


 if ('phar:' === substr(__FILE__, 0, 5)) {
$tmpExe = sys_get_temp_dir().'/hiddeninput.exe';
copy($exe, $tmpExe);
$exe = $tmpExe;
}

$this-&gt;write($question, false);
$value = rtrim(shell_exec($exe));
$this-&gt;write('');


 if (isset($tmpExe)) {
unlink($tmpExe);
}

return $value;
}

if (file_exists('/usr/bin/env')) {

 $test = "/usr/bin/env %s -c 'echo OK' 2&gt; /dev/null";
foreach (array('bash', 'zsh', 'ksh', 'csh') as $sh) {
if ('OK' === rtrim(shell_exec(sprintf($test, $sh)))) {
$shell = $sh;
break;
}
}
if (isset($shell)) {
$this-&gt;write($question, false);
$readCmd = ($shell === 'csh') ? 'set mypassword = $&lt;' : 'read mypassword';
$command = sprintf("/usr/bin/env %s -c 'stty -echo; %s; stty echo; echo \$mypassword'", $shell, $readCmd);
$value = rtrim(shell_exec($command));
$this-&gt;write('');

return $value;
}
}


 return $this-&gt;ask($question);
}




public function getAuthorizations()
{
return $this-&gt;authorizations;
}




public function hasAuthorization($repositoryName)
{
$auths = $this-&gt;getAuthorizations();

return isset($auths[$repositoryName]);
}




public function getAuthorization($repositoryName)
{
$auths = $this-&gt;getAuthorizations();

return isset($auths[$repositoryName]) ? $auths[$repositoryName] : array('username' =&gt; null, 'password' =&gt; null);
}




public function setAuthorization($repositoryName, $username, $password = null)
{
$this-&gt;authorizations[$repositoryName] = array('username' =&gt; $username, 'password' =&gt; $password);
}
}
&lt;?php











namespace Composer\IO;






class NullIO implements IOInterface
{



public function isInteractive()
{
return false;
}




public function isVerbose()
{
return false;
}




public function isDecorated()
{
return false;
}




public function write($messages, $newline = true)
{
}




public function overwrite($messages, $newline = true, $size = 80)
{
}




public function ask($question, $default = null)
{
return $default;
}




public function askConfirmation($question, $default = true)
{
return $default;
}




public function askAndValidate($question, $validator, $attempts = false, $default = null)
{
return $default;
}




public function askAndHideAnswer($question)
{
return null;
}




public function getAuthorizations()
{
return array();
}




public function hasAuthorization($repositoryName)
{
return false;
}




public function getAuthorization($repositoryName)
{
return array('username' =&gt; null, 'password' =&gt; null);
}




public function setAuthorization($repositoryName, $username, $password = null)
{
}
}
&lt;?php











namespace Composer\IO;






interface IOInterface
{





public function isInteractive();






public function isVerbose();






public function isDecorated();







public function write($messages, $newline = true);








public function overwrite($messages, $newline = true, $size = 80);











public function ask($question, $default = null);











public function askConfirmation($question, $default = true);

















public function askAndValidate($question, $validator, $attempts = false, $default = null);








public function askAndHideAnswer($question);






public function getAuthorizations();








public function hasAuthorization($repositoryName);








public function getAuthorization($repositoryName);








public function setAuthorization($repositoryName, $username, $password = null);
}
&lt;?php











namespace Composer\Command;

use Composer\Composer;
use Composer\Console\Application;
use Composer\IO\IOInterface;
use Composer\IO\NullIO;
use Symfony\Component\Console\Command\Command as BaseCommand;







abstract class Command extends BaseCommand
{



private $composer;




private $io;





public function getComposer($required = true)
{
if (null === $this-&gt;composer) {
$application = $this-&gt;getApplication();
if ($application instanceof Application) {

$this-&gt;composer = $application-&gt;getComposer($required);
} elseif ($required) {
throw new \RuntimeException(
'Could not create a Composer\Composer instance, you must inject '.
'one if this command is not used with a Composer\Console\Application instance'
);
}
}

return $this-&gt;composer;
}




public function setComposer(Composer $composer)
{
$this-&gt;composer = $composer;
}




public function getIO()
{
if (null === $this-&gt;io) {
$application = $this-&gt;getApplication();
if ($application instanceof Application) {

$this-&gt;io = $application-&gt;getIO();
} else {
$this-&gt;io = new NullIO();
}
}

return $this-&gt;io;
}




public function setIO(IOInterface $io)
{
$this-&gt;io = $io;
}
}
&lt;?php











namespace Composer\Command;

use Composer\Factory;
use Composer\Installer;
use Composer\Installer\ProjectInstaller;
use Composer\IO\IOInterface;
use Composer\Repository\ComposerRepository;
use Composer\Repository\CompositeRepository;
use Composer\Repository\FilesystemRepository;
use Composer\Repository\NotifiableRepositoryInterface;
use Composer\Repository\InstalledFilesystemRepository;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Composer\Json\JsonFile;
use Composer\Util\RemoteFilesystem;
use Composer\Package\Version\VersionParser;






class CreateProjectCommand extends Command
{
protected function configure()
{
$this
-&gt;setName('create-project')
-&gt;setDescription('Create new project from a package into given directory.')
-&gt;setDefinition(array(
new InputArgument('package', InputArgument::REQUIRED, 'Package name to be installed'),
new InputArgument('directory', InputArgument::OPTIONAL, 'Directory where the files should be created'),
new InputArgument('version', InputArgument::OPTIONAL, 'Version, will defaults to latest'),
new InputOption('prefer-source', null, InputOption::VALUE_NONE, 'Forces installation from package sources when possible, including VCS information.'),
new InputOption('repository-url', null, InputOption::VALUE_REQUIRED, 'Pick a different repository url to look for the package.'),
new InputOption('dev', null, InputOption::VALUE_NONE, 'Whether to install dependencies for development.'),
new InputOption('no-custom-installers', null, InputOption::VALUE_NONE, 'Whether to disable custom installers.'),
new InputOption('no-scripts', null, InputOption::VALUE_NONE, 'Whether to prevent execution of all defined scripts in the root package.')
))
-&gt;setHelp(&lt;&lt;&lt;EOT
The &lt;info&gt;create-project&lt;/info&gt; command creates a new project from a given
package into a new directory. You can use this command to bootstrap new
projects or setup a clean version-controlled installation
for developers of your project.

&lt;info&gt;php composer.phar create-project vendor/project target-directory [version]&lt;/info&gt;

To setup a developer workable version you should create the project using the source
controlled code by appending the &lt;info&gt;'--prefer-source'&lt;/info&gt; flag. Also, it is
advisable to install all dependencies required for development by appending the
&lt;info&gt;'--dev'&lt;/info&gt; flag.

To install a package from another repository repository than the default one you
can pass the &lt;info&gt;'--repository-url=http://myrepository.org'&lt;/info&gt; flag.

EOT
)
;
}

protected function execute(InputInterface $input, OutputInterface $output)
{
return $this-&gt;installProject(
$this-&gt;getIO(),
$input-&gt;getArgument('package'),
$input-&gt;getArgument('directory'),
$input-&gt;getArgument('version'),
$input-&gt;getOption('prefer-source'),
$input-&gt;getOption('dev'),
$input-&gt;getOption('repository-url'),
$input-&gt;getOption('no-custom-installers'),
$input-&gt;getOption('no-scripts')
);
}

public function installProject(IOInterface $io, $packageName, $directory = null, $version = null, $preferSource = false, $installDevPackages = false, $repositoryUrl = null, $disableCustomInstallers = false, $noScripts = false)
{
$dm = $this-&gt;createDownloadManager($io);
if ($preferSource) {
$dm-&gt;setPreferSource(true);
}

$config = Factory::createConfig();
if (null === $repositoryUrl) {
$sourceRepo = new CompositeRepository(Factory::createDefaultRepositories($io, $config));
} elseif ("json" === pathinfo($repositoryUrl, PATHINFO_EXTENSION)) {
$sourceRepo = new FilesystemRepository(new JsonFile($repositoryUrl, new RemoteFilesystem($io)));
} elseif (0 === strpos($repositoryUrl, 'http')) {
$sourceRepo = new ComposerRepository(array('url' =&gt; $repositoryUrl), $io, $config);
} else {
throw new \InvalidArgumentException("Invalid repository url given. Has to be a .json file or an http url.");
}

$candidates = $sourceRepo-&gt;findPackages($packageName, $version);
if (!$candidates) {
throw new \InvalidArgumentException("Could not find package $packageName" . ($version ? " with version $version." : ''));
}

if (null === $directory) {
$parts = explode("/", $packageName, 2);
$directory = getcwd() . DIRECTORY_SEPARATOR . array_pop($parts);
}


 $package = $candidates[0];
foreach ($candidates as $candidate) {
if (version_compare($package-&gt;getVersion(), $candidate-&gt;getVersion(), '&lt;')) {
$package = $candidate;
}
}

$io-&gt;write('&lt;info&gt;Installing ' . $package-&gt;getName() . ' (' . VersionParser::formatVersion($package, false) . ')&lt;/info&gt;', true);

if ($disableCustomInstallers) {
$io-&gt;write('&lt;info&gt;Custom installers have been disabled.&lt;/info&gt;');
}

if (0 === strpos($package-&gt;getPrettyVersion(), 'dev-') &amp;&amp; in_array($package-&gt;getSourceType(), array('git', 'hg'))) {
$package-&gt;setSourceReference(substr($package-&gt;getPrettyVersion(), 4));
}

$projectInstaller = new ProjectInstaller($directory, $dm);
$projectInstaller-&gt;install(new InstalledFilesystemRepository(new JsonFile('php://memory')), $package);
if ($package-&gt;getRepository() instanceof NotifiableRepositoryInterface) {
$package-&gt;getRepository()-&gt;notifyInstall($package);
}

$io-&gt;write('&lt;info&gt;Created project in ' . $directory . '&lt;/info&gt;', true);
chdir($directory);

putenv('COMPOSER_ROOT_VERSION='.$package-&gt;getPrettyVersion());

$composer = Factory::create($io);
$installer = Installer::create($io, $composer);

$installer-&gt;setPreferSource($preferSource)
-&gt;setDevMode($installDevPackages)
-&gt;setRunScripts( ! $noScripts);

if ($disableCustomInstallers) {
$installer-&gt;disableCustomInstallers();
}

$installer-&gt;run();
}

protected function createDownloadManager(IOInterface $io)
{
$factory = new Factory();

return $factory-&gt;createDownloadManager($io);
}
}
&lt;?php











namespace Composer\Command;

use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;




class AboutCommand extends Command
{
protected function configure()
{
$this
-&gt;setName('about')
-&gt;setDescription('Short information about Composer')
-&gt;setHelp(&lt;&lt;&lt;EOT
&lt;info&gt;php composer.phar about&lt;/info&gt;
EOT
)
;
}

protected function execute(InputInterface $input, OutputInterface $output)
{
$output-&gt;writeln(&lt;&lt;&lt;EOT
&lt;info&gt;Composer - Package Management for PHP&lt;/info&gt;
&lt;comment&gt;Composer is a package manager tracking local dependencies of your projects and libraries.
See http://getcomposer.org/ for more information.&lt;/comment&gt;
EOT
);

}
}
&lt;?php











namespace Composer\Command;

use Composer\Composer;
use Composer\Factory;
use Composer\Package\PackageInterface;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Composer\Repository\ArrayRepository;
use Composer\Repository\CompositeRepository;
use Composer\Repository\PlatformRepository;
use Composer\Repository\RepositoryInterface;





class ShowCommand extends Command
{
protected function configure()
{
$this
-&gt;setName('show')
-&gt;setDescription('Show information about packages')
-&gt;setDefinition(array(
new InputArgument('package', InputArgument::OPTIONAL, 'Package to inspect'),
new InputArgument('version', InputArgument::OPTIONAL, 'Version to inspect'),
new InputOption('installed', null, InputOption::VALUE_NONE, 'List installed packages only'),
new InputOption('platform', null, InputOption::VALUE_NONE, 'List platform packages only'),
new InputOption('self', null, InputOption::VALUE_NONE, 'Show the root package information'),
))
-&gt;setHelp(&lt;&lt;&lt;EOT
The show command displays detailed information about a package, or
lists all packages available.

EOT
)
;
}

protected function execute(InputInterface $input, OutputInterface $output)
{

 $platformRepo = new PlatformRepository;
if ($input-&gt;getOption('self')) {
$package = $this-&gt;getComposer(false)-&gt;getPackage();
$repos = $installedRepo = new ArrayRepository(array($package));
} elseif ($input-&gt;getOption('platform')) {
$repos = $installedRepo = $platformRepo;
} elseif ($input-&gt;getOption('installed')) {
$composer = $this-&gt;getComposer();
$repos = $installedRepo = $composer-&gt;getRepositoryManager()-&gt;getLocalRepository();
} elseif ($composer = $this-&gt;getComposer(false)) {
$localRepo = $composer-&gt;getRepositoryManager()-&gt;getLocalRepository();
$installedRepo = new CompositeRepository(array($localRepo, $platformRepo));
$repos = new CompositeRepository(array_merge(array($installedRepo), $composer-&gt;getRepositoryManager()-&gt;getRepositories()));
} else {
$defaultRepos = Factory::createDefaultRepositories($this-&gt;getIO());
$output-&gt;writeln('No composer.json found in the current directory, showing packages from ' . implode(', ', array_keys($defaultRepos)));
$installedRepo = $platformRepo;
$repos = new CompositeRepository(array_merge(array($installedRepo), $defaultRepos));
}


 if ($input-&gt;getArgument('package') || !empty($package)) {
if (empty($package)) {
$package = $this-&gt;getPackage($input, $output, $installedRepo, $repos);
}
if (!$package) {
throw new \InvalidArgumentException('Package '.$input-&gt;getArgument('package').' not found');
}

$this-&gt;printMeta($input, $output, $package, $installedRepo, $repos);
$this-&gt;printLinks($input, $output, $package, 'requires');
$this-&gt;printLinks($input, $output, $package, 'devRequires', 'requires (dev)');
if ($package-&gt;getSuggests()) {
$output-&gt;writeln("\n&lt;info&gt;suggests&lt;/info&gt;");
foreach ($package-&gt;getSuggests() as $suggested =&gt; $reason) {
$output-&gt;writeln($suggested . ' &lt;comment&gt;' . $reason . '&lt;/comment&gt;');
}
}
$this-&gt;printLinks($input, $output, $package, 'provides');
$this-&gt;printLinks($input, $output, $package, 'conflicts');
$this-&gt;printLinks($input, $output, $package, 'replaces');

return;
}


 $packages = array();
foreach ($repos-&gt;getPackages() as $package) {
if ($platformRepo-&gt;hasPackage($package)) {
$type = '&lt;info&gt;platform&lt;/info&gt;:';
} elseif ($installedRepo-&gt;hasPackage($package)) {
$type = '&lt;info&gt;installed&lt;/info&gt;:';
} else {
$type = '&lt;comment&gt;available&lt;/comment&gt;:';
}
if (isset($packages[$type][$package-&gt;getName()])
&amp;&amp; version_compare($packages[$type][$package-&gt;getName()]-&gt;getVersion(), $package-&gt;getVersion(), '&gt;=')
) {
continue;
}
$packages[$type][$package-&gt;getName()] = $package;
}

foreach (array('&lt;info&gt;platform&lt;/info&gt;:' =&gt; true, '&lt;comment&gt;available&lt;/comment&gt;:' =&gt; false, '&lt;info&gt;installed&lt;/info&gt;:' =&gt; true) as $type =&gt; $showVersion) {
if (isset($packages[$type])) {
$output-&gt;writeln($type);
ksort($packages[$type]);
foreach ($packages[$type] as $package) {
$output-&gt;writeln('  '.$package-&gt;getPrettyName() .' '.($showVersion ? '['.$package-&gt;getPrettyVersion().']' : '').' &lt;comment&gt;:&lt;/comment&gt; '. strtok($package-&gt;getDescription(), "\r\n"));
}
$output-&gt;writeln('');
}
}
}








protected function getPackage(InputInterface $input, OutputInterface $output, RepositoryInterface $installedRepo, RepositoryInterface $repos)
{

 if ($input-&gt;getArgument('version')) {
return $repos-&gt;findPackage($input-&gt;getArgument('package'), $input-&gt;getArgument('version'));
}


 foreach ($installedRepo-&gt;getPackages() as $package) {
if ($package-&gt;getName() === $input-&gt;getArgument('package')) {
return $package;
}
}


 $highestVersion = null;
foreach ($repos-&gt;findPackages($input-&gt;getArgument('package')) as $package) {
if (null === $highestVersion || version_compare($package-&gt;getVersion(), $highestVersion-&gt;getVersion(), '&gt;=')) {
$highestVersion = $package;
}
}

return $highestVersion;
}




protected function printMeta(InputInterface $input, OutputInterface $output, PackageInterface $package, RepositoryInterface $installedRepo, RepositoryInterface $repos)
{
$output-&gt;writeln('&lt;info&gt;name&lt;/info&gt;     : ' . $package-&gt;getPrettyName());
$output-&gt;writeln('&lt;info&gt;descrip.&lt;/info&gt; : ' . $package-&gt;getDescription());
$output-&gt;writeln('&lt;info&gt;keywords&lt;/info&gt; : ' . join(', ', $package-&gt;getKeywords() ?: array()));
$this-&gt;printVersions($input, $output, $package, $installedRepo, $repos);
$output-&gt;writeln('&lt;info&gt;type&lt;/info&gt;     : ' . $package-&gt;getType());
$output-&gt;writeln('&lt;info&gt;license&lt;/info&gt;  : ' . implode(', ', $package-&gt;getLicense()));
$output-&gt;writeln('&lt;info&gt;source&lt;/info&gt;   : ' . sprintf('[%s] &lt;comment&gt;%s&lt;/comment&gt; %s', $package-&gt;getSourceType(), $package-&gt;getSourceUrl(), $package-&gt;getSourceReference()));
$output-&gt;writeln('&lt;info&gt;dist&lt;/info&gt;     : ' . sprintf('[%s] &lt;comment&gt;%s&lt;/comment&gt; %s', $package-&gt;getDistType(), $package-&gt;getDistUrl(), $package-&gt;getDistReference()));
$output-&gt;writeln('&lt;info&gt;names&lt;/info&gt;    : ' . implode(', ', $package-&gt;getNames()));

if ($package-&gt;getSupport()) {
$output-&gt;writeln("\n&lt;info&gt;support&lt;/info&gt;");
foreach ($package-&gt;getSupport() as $type =&gt; $value) {
$output-&gt;writeln('&lt;comment&gt;' . $type . '&lt;/comment&gt; : '.$value);
}
}

if ($package-&gt;getAutoload()) {
$output-&gt;writeln("\n&lt;info&gt;autoload&lt;/info&gt;");
foreach ($package-&gt;getAutoload() as $type =&gt; $autoloads) {
$output-&gt;writeln('&lt;comment&gt;' . $type . '&lt;/comment&gt;');

if ($type === 'psr-0') {
foreach ($autoloads as $name =&gt; $path) {
$output-&gt;writeln(($name ?: '*') . ' =&gt; ' . ($path ?: '.'));
}
} elseif ($type === 'classmap') {
$output-&gt;writeln(implode(', ', $autoloads));
}
}
if ($package-&gt;getIncludePaths()) {
$output-&gt;writeln('&lt;comment&gt;include-path&lt;/comment&gt;');
$output-&gt;writeln(implode(', ', $package-&gt;getIncludePaths()));
}
}
}




protected function printVersions(InputInterface $input, OutputInterface $output, PackageInterface $package, RepositoryInterface $installedRepo, RepositoryInterface $repos)
{
if ($input-&gt;getArgument('version')) {
$output-&gt;writeln('&lt;info&gt;version&lt;/info&gt;  : ' . $package-&gt;getPrettyVersion());

return;
}

$versions = array();

foreach ($repos-&gt;findPackages($package-&gt;getName()) as $version) {
$versions[$version-&gt;getPrettyVersion()] = $version-&gt;getVersion();
}

uasort($versions, 'version_compare');

$versions = implode(', ', array_keys(array_reverse($versions)));


 if ($installedRepo-&gt;hasPackage($package)) {
$versions = str_replace($package-&gt;getPrettyVersion(), '&lt;info&gt;* ' . $package-&gt;getPrettyVersion() . '&lt;/info&gt;', $versions);
}

$output-&gt;writeln('&lt;info&gt;versions&lt;/info&gt; : ' . $versions);
}






protected function printLinks(InputInterface $input, OutputInterface $output, PackageInterface $package, $linkType, $title = null)
{
$title = $title ?: $linkType;
if ($links = $package-&gt;{'get'.ucfirst($linkType)}()) {
$output-&gt;writeln("\n&lt;info&gt;" . $title . "&lt;/info&gt;");

foreach ($links as $link) {
$output-&gt;writeln($link-&gt;getTarget() . ' &lt;comment&gt;' . $link-&gt;getPrettyConstraint() . '&lt;/comment&gt;');
}
}
}
}
&lt;?php











namespace Composer\Command;

use Composer\Installer;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Output\OutputInterface;




class UpdateCommand extends Command
{
protected function configure()
{
$this
-&gt;setName('update')
-&gt;setDescription('Updates your dependencies to the latest version, and updates the composer.lock file.')
-&gt;setDefinition(array(
new InputArgument('packages', InputArgument::IS_ARRAY | InputArgument::OPTIONAL, 'Packages that should be updated, if not provided all packages are.'),
new InputOption('prefer-source', null, InputOption::VALUE_NONE, 'Forces installation from package sources when possible, including VCS information.'),
new InputOption('dry-run', null, InputOption::VALUE_NONE, 'Outputs the operations but will not execute anything (implicitly enables --verbose).'),
new InputOption('dev', null, InputOption::VALUE_NONE, 'Enables installation of dev-require packages.'),
new InputOption('no-custom-installers', null, InputOption::VALUE_NONE, 'Disables all custom installers.'),
new InputOption('no-scripts', null, InputOption::VALUE_NONE, 'Skips the execution of all scripts defined in composer.json file.'),
))
-&gt;setHelp(&lt;&lt;&lt;EOT
The &lt;info&gt;update&lt;/info&gt; command reads the composer.json file from the
current directory, processes it, and updates, removes or installs all the
dependencies.

&lt;info&gt;php composer.phar update&lt;/info&gt;

To limit the update operation to a few packages, you can list the package(s)
you want to update as such:

&lt;info&gt;php composer.phar update vendor/package1 foo/mypackage [...]&lt;/info&gt;
EOT
)
;
}

protected function execute(InputInterface $input, OutputInterface $output)
{
$composer = $this-&gt;getComposer();
$io = $this-&gt;getIO();
$install = Installer::create($io, $composer);

$install
-&gt;setDryRun($input-&gt;getOption('dry-run'))
-&gt;setVerbose($input-&gt;getOption('verbose'))
-&gt;setPreferSource($input-&gt;getOption('prefer-source'))
-&gt;setDevMode($input-&gt;getOption('dev'))
-&gt;setRunScripts(!$input-&gt;getOption('no-scripts'))
-&gt;setUpdate(true)
-&gt;setUpdateWhitelist($input-&gt;getArgument('packages'))
;

if ($input-&gt;getOption('no-custom-installers')) {
$install-&gt;disableCustomInstallers();
}

return $install-&gt;run() ? 0 : 1;
}
}
&lt;?php











namespace Composer\Command;

use Composer\Installer;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;






class InstallCommand extends Command
{
protected function configure()
{
$this
-&gt;setName('install')
-&gt;setDescription('Parses the composer.json file and downloads the needed dependencies.')
-&gt;setDefinition(array(
new InputOption('prefer-source', null, InputOption::VALUE_NONE, 'Forces installation from package sources when possible, including VCS information.'),
new InputOption('dry-run', null, InputOption::VALUE_NONE, 'Outputs the operations but will not execute anything (implicitly enables --verbose).'),
new InputOption('dev', null, InputOption::VALUE_NONE, 'Enables installation of dev-require packages.'),
new InputOption('no-custom-installers', null, InputOption::VALUE_NONE, 'Disables all custom installers.'),
new InputOption('no-scripts', null, InputOption::VALUE_NONE, 'Skips the execution of all scripts defined in composer.json file.'),
))
-&gt;setHelp(&lt;&lt;&lt;EOT
The &lt;info&gt;install&lt;/info&gt; command reads the composer.json file from the
current directory, processes it, and downloads and installs all the
libraries and dependencies outlined in that file.

&lt;info&gt;php composer.phar install&lt;/info&gt;

EOT
)
;
}

protected function execute(InputInterface $input, OutputInterface $output)
{
$composer = $this-&gt;getComposer();
$io = $this-&gt;getIO();
$install = Installer::create($io, $composer);

$install
-&gt;setDryRun($input-&gt;getOption('dry-run'))
-&gt;setVerbose($input-&gt;getOption('verbose'))
-&gt;setPreferSource($input-&gt;getOption('prefer-source'))
-&gt;setDevMode($input-&gt;getOption('dev'))
-&gt;setRunScripts(!$input-&gt;getOption('no-scripts'))
;

if ($input-&gt;getOption('no-custom-installers')) {
$install-&gt;disableCustomInstallers();
}

return $install-&gt;run() ? 0 : 1;
}
}
&lt;?php











namespace Composer\Command;

use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Output\OutputInterface;
use Composer\Json\JsonFile;
use Composer\Json\JsonValidationException;
use Composer\Package\Loader\ValidatingArrayLoader;
use Composer\Package\Loader\ArrayLoader;
use Composer\Util\RemoteFilesystem;
use Composer\Util\SpdxLicenseIdentifier;







class ValidateCommand extends Command
{



protected function configure()
{
$this
-&gt;setName('validate')
-&gt;setDescription('Validates a composer.json')
-&gt;setDefinition(array(
new InputArgument('file', InputArgument::OPTIONAL, 'path to composer.json file', './composer.json')
))
-&gt;setHelp(&lt;&lt;&lt;EOT
The validate command validates a given composer.json

EOT
);
}







protected function execute(InputInterface $input, OutputInterface $output)
{
$file = $input-&gt;getArgument('file');

if (!file_exists($file)) {
$output-&gt;writeln('&lt;error&gt;' . $file . ' not found.&lt;/error&gt;');

return 1;
}
if (!is_readable($file)) {
$output-&gt;writeln('&lt;error&gt;' . $file . ' is not readable.&lt;/error&gt;');

return 1;
}

$errors = array();
$publishErrors = array();
$warnings = array();


 $laxValid = false;
$valid = false;
try {
$json = new JsonFile($file, new RemoteFilesystem($this-&gt;getIO()));
$manifest = $json-&gt;read();

$json-&gt;validateSchema(JsonFile::LAX_SCHEMA);
$laxValid = true;
$json-&gt;validateSchema();
$valid = true;
} catch (JsonValidationException $e) {
foreach ($e-&gt;getErrors() as $message) {
if ($laxValid) {
$publishErrors[] = '&lt;error&gt;Publish Error: ' . $message . '&lt;/error&gt;';
} else {
$errors[] = '&lt;error&gt;' . $message . '&lt;/error&gt;';
}
}
} catch (\Exception $e) {
$output-&gt;writeln('&lt;error&gt;' . $e-&gt;getMessage() . '&lt;/error&gt;');

return 1;
}


 if (!empty($manifest['license'])) {
$licenseValidator = new SpdxLicenseIdentifier();
if (!$licenseValidator-&gt;validate($manifest['license'])) {
$warnings[] = sprintf(
'License %s is not a valid SPDX license identifier, see http://www.spdx.org/licenses/ if you use an open license',
json_encode($manifest['license'])
);
}
} else {
$warnings[] = 'No license specified, it is recommended to do so';
}

if (!empty($manifest['name']) &amp;&amp; preg_match('{[A-Z]}', $manifest['name'])) {
$suggestName = preg_replace('{(?:([a-z])([A-Z])|([A-Z])([A-Z][a-z]))}', '\\1\\3-\\2\\4', $manifest['name']);
$suggestName = strtolower($suggestName);

$warnings[] = sprintf(
'Name "%s" does not match the best practice (e.g. lower-cased/with-dashes). We suggest using "%s" instead. As such you will not be able to submit it to Packagist.',
$manifest['name'],
$suggestName
);
}


 try {
$loader = new ValidatingArrayLoader(new ArrayLoader(), false);
if (!isset($manifest['version'])) {
$manifest['version'] = '1.0.0';
}
if (!isset($manifest['name'])) {
$manifest['name'] = 'dummy/dummy';
}
$loader-&gt;load($manifest);
} catch (\Exception $e) {
$errors = array_merge($errors, explode("\n", $e-&gt;getMessage()));
}


 if (!$errors &amp;&amp; !$publishErrors &amp;&amp; !$warnings) {
$output-&gt;writeln('&lt;info&gt;' . $file . ' is valid&lt;/info&gt;');
} elseif (!$errors &amp;&amp; !$publishErrors) {
$output-&gt;writeln('&lt;info&gt;' . $file . ' is valid, but with a few warnings&lt;/info&gt;');
$output-&gt;writeln('&lt;warning&gt;See http://getcomposer.org/doc/04-schema.md for details on the schema&lt;/warning&gt;');
} elseif (!$errors) {
$output-&gt;writeln('&lt;info&gt;' . $file . ' is valid for simple usage with composer but has&lt;/info&gt;');
$output-&gt;writeln('&lt;info&gt;strict errors that make it unable to be published as a package:&lt;/info&gt;');
$output-&gt;writeln('&lt;warning&gt;See http://getcomposer.org/doc/04-schema.md for details on the schema&lt;/warning&gt;');
} else {
$output-&gt;writeln('&lt;error&gt;' . $file . ' is invalid, the following errors/warnings were found:&lt;/error&gt;');
}

$messages = array(
'error' =&gt; array_merge($errors, $publishErrors),
'warning' =&gt; $warnings,
);

foreach ($messages as $style =&gt; $msgs) {
foreach ($msgs as $msg) {
$output-&gt;writeln('&lt;' . $style . '&gt;' . $msg . '&lt;/' . $style . '&gt;');
}
}

return $errors || $publishErrors ? 1 : 0;
}
}
&lt;?php











namespace Composer\Command;

use Composer\Composer;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;





class DependsCommand extends Command
{
protected $linkTypes = array(
'require' =&gt; 'requires',
'require-dev' =&gt; 'devRequires',
);

protected function configure()
{
$this
-&gt;setName('depends')
-&gt;setDescription('Shows which packages depend on the given package')
-&gt;setDefinition(array(
new InputArgument('package', InputArgument::REQUIRED, 'Package to inspect'),
new InputOption('link-type', '', InputOption::VALUE_REQUIRED | InputOption::VALUE_IS_ARRAY, 'Link types to show (require, require-dev)', array_keys($this-&gt;linkTypes))
))
-&gt;setHelp(&lt;&lt;&lt;EOT
Displays detailed information about where a package is referenced.

&lt;info&gt;php composer.phar depends composer/composer&lt;/info&gt;

EOT
)
;
}

protected function execute(InputInterface $input, OutputInterface $output)
{
$composer = $this-&gt;getComposer();
$references = $this-&gt;getReferences($input, $output, $composer);

if ($input-&gt;getOption('verbose')) {
$this-&gt;printReferences($input, $output, $references);
} else {
$this-&gt;printPackages($input, $output, $references);
}
}










private function getReferences(InputInterface $input, OutputInterface $output, Composer $composer)
{
$needle = $input-&gt;getArgument('package');

$references = array();
$verbose = (bool) $input-&gt;getOption('verbose');

$repos = $composer-&gt;getRepositoryManager()-&gt;getRepositories();
$types = $input-&gt;getOption('link-type');

foreach ($repos as $repository) {
foreach ($repository-&gt;getPackages() as $package) {
foreach ($types as $type) {
$type = rtrim($type, 's');
if (!isset($this-&gt;linkTypes[$type])) {
throw new \InvalidArgumentException('Unexpected link type: '.$type.', valid types: '.implode(', ', array_keys($this-&gt;linkTypes)));
}
foreach ($package-&gt;{'get'.$this-&gt;linkTypes[$type]}() as $link) {
if ($link-&gt;getTarget() === $needle) {
if ($verbose) {
$references[] = array($type, $package, $link);
} else {
$references[$package-&gt;getName()] = $package-&gt;getPrettyName();
}
}
}
}
}
}

return $references;
}

private function printReferences(InputInterface $input, OutputInterface $output, array $references)
{
foreach ($references as $ref) {
$output-&gt;writeln($ref[1]-&gt;getPrettyName() . ' ' . $ref[1]-&gt;getPrettyVersion() . ' &lt;info&gt;' . $ref[0] . '&lt;/info&gt; ' . $ref[2]-&gt;getPrettyConstraint());
}
}

private function printPackages(InputInterface $input, OutputInterface $output, array $packages)
{
ksort($packages);
foreach ($packages as $package) {
$output-&gt;writeln($package);
}
}
}
&lt;?php











namespace Composer\Command;

use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Output\OutputInterface;
use Composer\Repository\CompositeRepository;
use Composer\Repository\PlatformRepository;
use Composer\Package\PackageInterface;
use Composer\Package\AliasPackage;
use Composer\Factory;




class SearchCommand extends Command
{
protected function configure()
{
$this
-&gt;setName('search')
-&gt;setDescription('Search for packages')
-&gt;setDefinition(array(
new InputArgument('tokens', InputArgument::IS_ARRAY | InputArgument::REQUIRED, 'tokens to search for'),
))
-&gt;setHelp(&lt;&lt;&lt;EOT
The search command searches for packages by its name
&lt;info&gt;php composer.phar search symfony composer&lt;/info&gt;

EOT
)
;
}

protected function execute(InputInterface $input, OutputInterface $output)
{

 $platformRepo = new PlatformRepository;
if ($composer = $this-&gt;getComposer(false)) {
$localRepo = $composer-&gt;getRepositoryManager()-&gt;getLocalRepository();
$installedRepo = new CompositeRepository(array($localRepo, $platformRepo));
$repos = new CompositeRepository(array_merge(array($installedRepo), $composer-&gt;getRepositoryManager()-&gt;getRepositories()));
} else {
$defaultRepos = Factory::createDefaultRepositories($this-&gt;getIO());
$output-&gt;writeln('No composer.json found in the current directory, showing packages from ' . implode(', ', array_keys($defaultRepos)));
$installedRepo = $platformRepo;
$repos = new CompositeRepository(array_merge(array($installedRepo), $defaultRepos));
}

$tokens = $input-&gt;getArgument('tokens');
$packages = array();

$maxPackageLength = 0;
foreach ($repos-&gt;getPackages() as $package) {
if ($package instanceof AliasPackage || isset($packages[$package-&gt;getName()])) {
continue;
}

foreach ($tokens as $token) {
if (!$score = $this-&gt;matchPackage($package, $token)) {
continue;
}

if (false !== ($pos = stripos($package-&gt;getName(), $token))) {
$name = substr($package-&gt;getPrettyName(), 0, $pos)
. '&lt;highlight&gt;' . substr($package-&gt;getPrettyName(), $pos, strlen($token)) . '&lt;/highlight&gt;'
. substr($package-&gt;getPrettyName(), $pos + strlen($token));
} else {
$name = $package-&gt;getPrettyName();
}

$description = strtok($package-&gt;getDescription(), "\r\n");
if (false !== ($pos = stripos($description, $token))) {
$description = substr($description, 0, $pos)
. '&lt;highlight&gt;' . substr($description, $pos, strlen($token)) . '&lt;/highlight&gt;'
. substr($description, $pos + strlen($token));
}

$packages[$package-&gt;getName()] = array(
'name' =&gt; $name,
'description' =&gt; $description,
'length' =&gt; $length = strlen($package-&gt;getPrettyName()),
'score' =&gt; $score,
);

$maxPackageLength = max($maxPackageLength, $length);

continue 2;
}
}

usort($packages, function ($a, $b) {
if ($a['score'] === $b['score']) {
return 0;
}

return $a['score'] &gt; $b['score'] ? -1 : 1;
});

foreach ($packages as $details) {
$extraSpaces = $maxPackageLength - $details['length'];
$output-&gt;writeln($details['name'] . str_repeat(' ', $extraSpaces) .' &lt;comment&gt;:&lt;/comment&gt; '. $details['description']);
}
}








private function matchPackage(PackageInterface $package, $token)
{
$score = 0;

if (false !== stripos($package-&gt;getName(), $token)) {
$score += 5;
}

if (false !== stripos(join(',', $package-&gt;getKeywords() ?: array()), $token)) {
$score += 3;
}

if (false !== stripos($package-&gt;getDescription(), $token)) {
$score += 1;
}

return $score;
}
}
&lt;?php











namespace Composer\Command;

use Composer\Composer;
use Composer\Util\RemoteFilesystem;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;




class SelfUpdateCommand extends Command
{
protected function configure()
{
$this
-&gt;setName('self-update')
-&gt;setAliases(array('selfupdate'))
-&gt;setDescription('Updates composer.phar to the latest version.')
-&gt;setHelp(&lt;&lt;&lt;EOT
The &lt;info&gt;self-update&lt;/info&gt; command checks getcomposer.org for newer
versions of composer and if found, installs the latest.

&lt;info&gt;php composer.phar self-update&lt;/info&gt;

EOT
)
;
}

protected function execute(InputInterface $input, OutputInterface $output)
{
$rfs = new RemoteFilesystem($this-&gt;getIO());
$latest = trim($rfs-&gt;getContents('getcomposer.org', 'http://getcomposer.org/version', false));

if (Composer::VERSION !== $latest) {
$output-&gt;writeln(sprintf("Updating to version &lt;info&gt;%s&lt;/info&gt;.", $latest));

$remoteFilename = 'http://getcomposer.org/composer.phar';
$localFilename = $_SERVER['argv'][0];
$tempFilename = basename($localFilename, '.phar').'-temp.phar';

$rfs-&gt;copy('getcomposer.org', $remoteFilename, $tempFilename);

try {
chmod($tempFilename, 0777 &amp; ~umask());

 $phar = new \Phar($tempFilename);

 unset($phar);
rename($tempFilename, $localFilename);
} catch (\Exception $e) {
if (!$e instanceof \UnexpectedValueException &amp;&amp; !$e instanceof \PharException) {
throw $e;
}
unlink($tempFilename);
$output-&gt;writeln('&lt;error&gt;The download is corrupted ('.$e-&gt;getMessage().').&lt;/error&gt;');
$output-&gt;writeln('&lt;error&gt;Please re-run the self-update command to try again.&lt;/error&gt;');
}
} else {
$output-&gt;writeln("&lt;info&gt;You are using the latest composer version.&lt;/info&gt;");
}
}
}
&lt;?php











namespace Composer\Command;

use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Composer\Factory;
use Composer\Installer;
use Composer\Json\JsonFile;
use Composer\Json\JsonManipulator;





class RequireCommand extends InitCommand
{
protected function configure()
{
$this
-&gt;setName('require')
-&gt;setDescription('Adds required packages to your composer.json and installs them')
-&gt;setDefinition(array(
new InputArgument('packages', InputArgument::IS_ARRAY | InputArgument::OPTIONAL, 'Required package with a version constraint, e.g. foo/bar:1.0.0 or foo/bar=1.0.0 or "foo/bar 1.0.0"'),
new InputOption('dev', null, InputOption::VALUE_NONE, 'Add requirement to require-dev.'),
new InputOption('prefer-source', null, InputOption::VALUE_NONE, 'Forces installation from package sources when possible, including VCS information.'),
new InputOption('no-update', null, InputOption::VALUE_NONE, 'Disables the automatic update of the dependencies.'),
))
-&gt;setHelp(&lt;&lt;&lt;EOT
The require command adds required packages to your composer.json and installs them

If you do not want to install the new dependencies immediately you can call it with --no-update

EOT
)
;
}

protected function execute(InputInterface $input, OutputInterface $output)
{
$factory = new Factory;
$file = $factory-&gt;getComposerFile();

if (!file_exists($file)) {
$output-&gt;writeln('&lt;error&gt;'.$file.' not found.&lt;/error&gt;');

return 1;
}
if (!is_readable($file)) {
$output-&gt;writeln('&lt;error&gt;'.$file.' is not readable.&lt;/error&gt;');

return 1;
}

$dialog = $this-&gt;getHelperSet()-&gt;get('dialog');

$json = new JsonFile($file);
$composer = $json-&gt;read();

$requirements = $this-&gt;determineRequirements($input, $output, $input-&gt;getArgument('packages'));

$requireKey = $input-&gt;getOption('dev') ? 'require-dev' : 'require';
$baseRequirements = array_key_exists($requireKey, $composer) ? $composer[$requireKey] : array();
$requirements = $this-&gt;formatRequirements($requirements);

if (!$this-&gt;updateFileCleanly($json, $baseRequirements, $requirements, $requireKey)) {
foreach ($requirements as $package =&gt; $version) {
$baseRequirements[$package] = $version;
}

$composer[$requireKey] = $baseRequirements;
$json-&gt;write($composer);
}

$output-&gt;writeln('&lt;info&gt;'.$file.' has been updated&lt;/info&gt;');

if ($input-&gt;getOption('no-update')) {
return 0;
}


 $composer = $this-&gt;getComposer();
$io = $this-&gt;getIO();
$install = Installer::create($io, $composer);

$install
-&gt;setVerbose($input-&gt;getOption('verbose'))
-&gt;setPreferSource($input-&gt;getOption('prefer-source'))
-&gt;setDevMode($input-&gt;getOption('dev'))
-&gt;setUpdate(true)
-&gt;setUpdateWhitelist($requirements);
;

return $install-&gt;run() ? 0 : 1;
}

private function updateFileCleanly($json, array $base, array $new, $requireKey)
{
$contents = file_get_contents($json-&gt;getPath());

$manipulator = new JsonManipulator($contents);

foreach ($new as $package =&gt; $constraint) {
if (!$manipulator-&gt;addLink($requireKey, $package, $constraint)) {
return false;
}
}

file_put_contents($json-&gt;getPath(), $manipulator-&gt;getContents());

return true;
}

protected function interact(InputInterface $input, OutputInterface $output)
{
return;
}
}
&lt;?php











namespace Composer\Command;

use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Composer\Repository\CompositeRepository;
use Symfony\Component\Console\Output\OutputInterface;
use Composer\Autoload\AutoloadGenerator;




class DumpAutoloadCommand extends Command
{
protected function configure()
{
$this
-&gt;setName('dump-autoload')
-&gt;setDescription('dumps the autoloader')
-&gt;setDefinition(array(
new InputOption('optimize', 'o', InputOption::VALUE_NONE, 'Optimizes PSR0 packages to be loaded with classmaps too, good for production.'),
))
-&gt;setHelp(&lt;&lt;&lt;EOT
&lt;info&gt;php composer.phar dump-autoload&lt;/info&gt;
EOT
)
;
}

protected function execute(InputInterface $input, OutputInterface $output)
{
$output-&gt;writeln('&lt;info&gt;Generating autoload files&lt;/info&gt;');

$composer = $this-&gt;getComposer();
$installationManager = $composer-&gt;getInstallationManager();
$localRepos = new CompositeRepository($composer-&gt;getRepositoryManager()-&gt;getLocalRepositories());
$package = $composer-&gt;getPackage();
$config = $composer-&gt;getConfig();

$generator = new AutoloadGenerator();
$generator-&gt;dump($config, $localRepos, $package, $installationManager, 'composer', $input-&gt;getOption('optimize'));
}
}
&lt;?php











namespace Composer\Command\Helper;

use Symfony\Component\Console\Helper\DialogHelper as BaseDialogHelper;

class DialogHelper extends BaseDialogHelper
{











public function getQuestion($question, $default = null, $sep = ':')
{
return $default !== null ?
sprintf('&lt;info&gt;%s&lt;/info&gt; [&lt;comment&gt;%s&lt;/comment&gt;]%s ', $question, $default, $sep) :
sprintf('&lt;info&gt;%s&lt;/info&gt;%s ', $question, $sep);
}
}
&lt;?php











namespace Composer\Command;

use Composer\Json\JsonFile;
use Composer\Factory;
use Composer\Package\BasePackage;
use Composer\Repository\CompositeRepository;
use Composer\Repository\PlatformRepository;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Process\Process;
use Symfony\Component\Process\ExecutableFinder;





class InitCommand extends Command
{
private $gitConfig;
private $repos;

public function parseAuthorString($author)
{
if (preg_match('/^(?P&lt;name&gt;[- \.,\w\'√¢‚Ç¨‚Ñ¢]+) &lt;(?P&lt;email&gt;.+?)&gt;$/u', $author, $match)) {
if (!function_exists('filter_var') || version_compare(PHP_VERSION, '5.3.3', '&lt;') || $match['email'] === filter_var($match['email'], FILTER_VALIDATE_EMAIL)) {
return array(
'name' =&gt; trim($match['name']),
'email' =&gt; $match['email']
);
}
}

throw new \InvalidArgumentException(
'Invalid author string.  Must be in the format: '.
'John Smith &lt;john@example.com&gt;'
);
}

protected function configure()
{
$this
-&gt;setName('init')
-&gt;setDescription('Creates a basic composer.json file in current directory.')
-&gt;setDefinition(array(
new InputOption('name', null, InputOption::VALUE_REQUIRED, 'Name of the package'),
new InputOption('description', null, InputOption::VALUE_REQUIRED, 'Description of package'),
new InputOption('author', null, InputOption::VALUE_REQUIRED, 'Author name of package'),

 new InputOption('homepage', null, InputOption::VALUE_REQUIRED, 'Homepage of package'),
new InputOption('require', null, InputOption::VALUE_IS_ARRAY | InputOption::VALUE_REQUIRED, 'Package to require with a version constraint, e.g. foo/bar:1.0.0 or foo/bar=1.0.0 or "foo/bar 1.0.0"'),
new InputOption('require-dev', null, InputOption::VALUE_IS_ARRAY | InputOption::VALUE_REQUIRED, 'Package to require for development with a version constraint, e.g. foo/bar:1.0.0 or foo/bar=1.0.0 or "foo/bar 1.0.0"'),
new InputOption('minimum-stability', null, InputOption::VALUE_REQUIRED, 'Minimum stability (empty or one of: '.implode(', ', array_keys(BasePackage::$stabilities)).')'),
))
-&gt;setHelp(&lt;&lt;&lt;EOT
The &lt;info&gt;init&lt;/info&gt; command creates a basic composer.json file
in the current directory.

&lt;info&gt;php composer.phar init&lt;/info&gt;

EOT
)
;
}

protected function execute(InputInterface $input, OutputInterface $output)
{
$dialog = $this-&gt;getHelperSet()-&gt;get('dialog');

$whitelist = array('name', 'description', 'author', 'homepage', 'require', 'require-dev', 'minimum-stability');

$options = array_filter(array_intersect_key($input-&gt;getOptions(), array_flip($whitelist)));

if (isset($options['author'])) {
$options['authors'] = $this-&gt;formatAuthors($options['author']);
unset($options['author']);
}

$options['require'] = isset($options['require']) ?
$this-&gt;formatRequirements($options['require']) :
new \stdClass;

if (isset($options['require-dev'])) {
$options['require-dev'] = $this-&gt;formatRequirements($options['require-dev']) ;
}

$file = new JsonFile('composer.json');

$json = $file-&gt;encode($options);

if ($input-&gt;isInteractive()) {
$output-&gt;writeln(array(
'',
$json,
''
));
if (!$dialog-&gt;askConfirmation($output, $dialog-&gt;getQuestion('Do you confirm generation', 'yes', '?'), true)) {
$output-&gt;writeln('&lt;error&gt;Command aborted&lt;/error&gt;');

return 1;
}
}

$file-&gt;write($options);

if ($input-&gt;isInteractive()) {
$ignoreFile = realpath('.gitignore');

if (false === $ignoreFile) {
$ignoreFile = realpath('.') . '/.gitignore';
}

if (!$this-&gt;hasVendorIgnore($ignoreFile)) {
$question = 'Would you like the &lt;info&gt;vendor&lt;/info&gt; directory added to your &lt;info&gt;.gitignore&lt;/info&gt; [&lt;comment&gt;yes&lt;/comment&gt;]?';

if ($dialog-&gt;askConfirmation($output, $question, true)) {
$this-&gt;addVendorIgnore($ignoreFile);
}
}
}
}

protected function interact(InputInterface $input, OutputInterface $output)
{
$git = $this-&gt;getGitConfig();

$dialog = $this-&gt;getHelperSet()-&gt;get('dialog');
$formatter = $this-&gt;getHelperSet()-&gt;get('formatter');
$output-&gt;writeln(array(
'',
$formatter-&gt;formatBlock('Welcome to the Composer config generator', 'bg=blue;fg=white', true),
''
));


 $output-&gt;writeln(array(
'',
'This command will guide you through creating your composer.json config.',
'',
));

$cwd = realpath(".");

if (!$name = $input-&gt;getOption('name')) {
$name = basename($cwd);
if (isset($git['github.user'])) {
$name = $git['github.user'] . '/' . $name;
} elseif (!empty($_SERVER['USERNAME'])) {
$name = $_SERVER['USERNAME'] . '/' . $name;
} elseif (get_current_user()) {
$name = get_current_user() . '/' . $name;
} else {

 $name = $name . '/' . $name;
}
}

$name = $dialog-&gt;askAndValidate(
$output,
$dialog-&gt;getQuestion('Package name (&lt;vendor&gt;/&lt;name&gt;)', $name),
function ($value) use ($name) {
if (null === $value) {
return $name;
}

if (!preg_match('{^[a-z0-9_.-]+/[a-z0-9_.-]+$}i', $value)) {
throw new \InvalidArgumentException(
'The package name '.$value.' is invalid, it should have a vendor name, a forward slash, and a package name, matching: [a-z0-9_.-]+/[a-z0-9_.-]+'
);
}

return $value;
}
);
$input-&gt;setOption('name', $name);

$description = $input-&gt;getOption('description') ?: false;
$description = $dialog-&gt;ask(
$output,
$dialog-&gt;getQuestion('Description', $description)
);
$input-&gt;setOption('description', $description);

if (null === $author = $input-&gt;getOption('author')) {
if (isset($git['user.name']) &amp;&amp; isset($git['user.email'])) {
$author = sprintf('%s &lt;%s&gt;', $git['user.name'], $git['user.email']);
}
}

$self = $this;
$author = $dialog-&gt;askAndValidate(
$output,
$dialog-&gt;getQuestion('Author', $author),
function ($value) use ($self, $author) {
if (null === $value) {
return $author;
}

$author = $self-&gt;parseAuthorString($value);

return sprintf('%s &lt;%s&gt;', $author['name'], $author['email']);
}
);
$input-&gt;setOption('author', $author);

$minimumStability = $input-&gt;getOption('minimum-stability') ?: '';
$minimumStability = $dialog-&gt;askAndValidate(
$output,
$dialog-&gt;getQuestion('Minimum Stability', $minimumStability),
function ($value) use ($self, $minimumStability) {
if (null === $value) {
return $minimumStability;
}

if (!isset(BasePackage::$stabilities[$value])) {
throw new \InvalidArgumentException(
'Invalid minimum stability "'.$value.'". Must be empty or one of: '.
implode(', ', array_keys(BasePackage::$stabilities))
);
}

return $value;
}
);
$input-&gt;setOption('minimum-stability', $minimumStability);

$output-&gt;writeln(array(
'',
'Define your dependencies.',
''
));

$requirements = array();
if ($dialog-&gt;askConfirmation($output, $dialog-&gt;getQuestion('Would you like to define your dependencies (require) interactively', 'yes', '?'), true)) {
$requirements = $this-&gt;determineRequirements($input, $output, $input-&gt;getOption('require'));
}
$input-&gt;setOption('require', $requirements);
$devRequirements = array();
if ($dialog-&gt;askConfirmation($output, $dialog-&gt;getQuestion('Would you like to define your dev dependencies (require-dev) interactively', 'yes', '?'), true)) {
$devRequirements = $this-&gt;determineRequirements($input, $output, $input-&gt;getOption('require-dev'));
}
$input-&gt;setOption('require-dev', $devRequirements);
}

protected function findPackages($name)
{
$packages = array();


 if (!$this-&gt;repos) {
$this-&gt;repos = new CompositeRepository(array_merge(
array(new PlatformRepository),
Factory::createDefaultRepositories($this-&gt;getIO())
));
}

$token = strtolower($name);
foreach ($this-&gt;repos-&gt;getPackages() as $package) {
if (false === ($pos = strpos($package-&gt;getName(), $token))) {
continue;
}

$packages[] = $package;
}

return $packages;
}

protected function determineRequirements(InputInterface $input, OutputInterface $output, $requires = array())
{
$dialog = $this-&gt;getHelperSet()-&gt;get('dialog');
$prompt = $dialog-&gt;getQuestion('Search for a package', false, ':');

if ($requires) {
foreach ($requires as $key =&gt; $requirement) {
$requires[$key] = $this-&gt;normalizeRequirement($requirement);
if (false === strpos($requires[$key], ' ') &amp;&amp; $input-&gt;isInteractive()) {
$question = $dialog-&gt;getQuestion('Please provide a version constraint for the '.$requirement.' requirement');
if ($constraint = $dialog-&gt;ask($output, $question)) {
$requires[$key] .= ' ' . $constraint;
}
}
if (false === strpos($requires[$key], ' ')) {
throw new \InvalidArgumentException('The requirement '.$requirement.' must contain a version constraint');
}
}

return $requires;
}

while (null !== $package = $dialog-&gt;ask($output, $prompt)) {
$matches = $this-&gt;findPackages($package);

if (count($matches)) {
$output-&gt;writeln(array(
'',
sprintf('Found &lt;info&gt;%s&lt;/info&gt; packages matching &lt;info&gt;%s&lt;/info&gt;', count($matches), $package),
''
));

foreach ($matches as $position =&gt; $package) {
$output-&gt;writeln(sprintf(' &lt;info&gt;%5s&lt;/info&gt; %s &lt;comment&gt;%s&lt;/comment&gt;', "[$position]", $package-&gt;getPrettyName(), $package-&gt;getPrettyVersion()));
}

$output-&gt;writeln('');

$validator = function ($selection) use ($matches) {
if ('' === $selection) {
return false;
}

if (!is_numeric($selection) &amp;&amp; preg_match('{^\s*(\S+) +(\S.*)\s*}', $selection, $matches)) {
return $matches[1].' '.$matches[2];
}

if (!isset($matches[(int) $selection])) {
throw new \Exception('Not a valid selection');
}

$package = $matches[(int) $selection];

return sprintf('%s %s', $package-&gt;getName(), $package-&gt;getPrettyVersion());
};

$package = $dialog-&gt;askAndValidate($output, $dialog-&gt;getQuestion('Enter package # to add, or a "[package] [version]" couple if it is not listed', false, ':'), $validator, 3);

if (false !== $package) {
$requires[] = $package;
}
}
}

return $requires;
}

protected function formatAuthors($author)
{
return array($this-&gt;parseAuthorString($author));
}

protected function formatRequirements(array $requirements)
{
$requires = array();
foreach ($requirements as $requirement) {
$requirement = $this-&gt;normalizeRequirement($requirement);
list($packageName, $packageVersion) = explode(" ", $requirement, 2);

$requires[$packageName] = $packageVersion;
}

return empty($requires) ? new \stdClass : $requires;
}

protected function normalizeRequirement($requirement)
{
return preg_replace('{^([^=: ]+)[=: ](.*)$}', '$1 $2', $requirement);
}

protected function getGitConfig()
{
if (null !== $this-&gt;gitConfig) {
return $this-&gt;gitConfig;
}

$finder = new ExecutableFinder();
$gitBin = $finder-&gt;find('git');

$cmd = new Process(sprintf('%s config -l', escapeshellarg($gitBin)));
$cmd-&gt;run();

if ($cmd-&gt;isSuccessful()) {
$this-&gt;gitConfig = array();
preg_match_all('{^([^=]+)=(.*)$}m', $cmd-&gt;getOutput(), $matches, PREG_SET_ORDER);
foreach ($matches as $match) {
$this-&gt;gitConfig[$match[1]] = $match[2];
}

return $this-&gt;gitConfig;
}

return $this-&gt;gitConfig = array();
}

















protected function hasVendorIgnore($ignoreFile, $vendor = 'vendor')
{
if (!file_exists($ignoreFile)) {
return false;
}

$pattern = sprintf(
'~^/?%s(/|/\*)?$~',
preg_quote($vendor, '~')
);

$lines = file($ignoreFile, FILE_IGNORE_NEW_LINES);
foreach ($lines as $line) {
if (preg_match($pattern, $line)) {
return true;
}
}

return false;
}

protected function addVendorIgnore($ignoreFile, $vendor = 'vendor')
{
$contents = "";
if (file_exists($ignoreFile)) {
$contents = file_get_contents($ignoreFile);

if ("\n" !== substr($contents, 0, -1)) {
$contents .= "\n";
}
}

file_put_contents($ignoreFile, $contents . $vendor. "\n");
}
}
&lt;?php











namespace Composer\Downloader;

use Composer\Package\PackageInterface;
use Composer\Util\ProcessExecutor;
use Composer\IO\IOInterface;
use Composer\Util\Filesystem;




abstract class VcsDownloader implements DownloaderInterface
{
protected $io;
protected $process;
protected $filesystem;

public function __construct(IOInterface $io, ProcessExecutor $process = null, Filesystem $fs = null)
{
$this-&gt;io = $io;
$this-&gt;process = $process ?: new ProcessExecutor;
$this-&gt;filesystem = $fs ?: new Filesystem;
}




public function getInstallationSource()
{
return 'source';
}




public function download(PackageInterface $package, $path)
{
if (!$package-&gt;getSourceReference()) {
throw new \InvalidArgumentException('Package '.$package-&gt;getPrettyName().' is missing reference information');
}

$this-&gt;io-&gt;write("  - Installing &lt;info&gt;" . $package-&gt;getName() . "&lt;/info&gt; (&lt;comment&gt;" . $package-&gt;getPrettyVersion() . "&lt;/comment&gt;)");
$this-&gt;filesystem-&gt;removeDirectory($path);
$this-&gt;doDownload($package, $path);
$this-&gt;io-&gt;write('');
}




public function update(PackageInterface $initial, PackageInterface $target, $path)
{
if (!$target-&gt;getSourceReference()) {
throw new \InvalidArgumentException('Package '.$target-&gt;getPrettyName().' is missing reference information');
}

$this-&gt;io-&gt;write("  - Updating &lt;info&gt;" . $target-&gt;getName() . "&lt;/info&gt; (&lt;comment&gt;" . $target-&gt;getPrettyVersion() . "&lt;/comment&gt;)");
$this-&gt;enforceCleanDirectory($path);
$this-&gt;doUpdate($initial, $target, $path);
$this-&gt;io-&gt;write('');
}




public function remove(PackageInterface $package, $path)
{
$this-&gt;enforceCleanDirectory($path);
$this-&gt;io-&gt;write("  - Removing &lt;info&gt;" . $package-&gt;getName() . "&lt;/info&gt; (&lt;comment&gt;" . $package-&gt;getPrettyVersion() . "&lt;/comment&gt;)");
if (!$this-&gt;filesystem-&gt;removeDirectory($path)) {
throw new \RuntimeException('Could not completely delete '.$path.', aborting.');
}
}







abstract protected function doDownload(PackageInterface $package, $path);








abstract protected function doUpdate(PackageInterface $initial, PackageInterface $target, $path);






abstract protected function enforceCleanDirectory($path);
}
&lt;?php











namespace Composer\Downloader;

use Composer\IO\IOInterface;
use Composer\Package\PackageInterface;
use Composer\Util\Filesystem;
use Composer\Util\RemoteFilesystem;








class FileDownloader implements DownloaderInterface
{
protected $io;
protected $rfs;
protected $filesystem;






public function __construct(IOInterface $io, RemoteFilesystem $rfs = null, Filesystem $filesystem = null)
{
$this-&gt;io = $io;
$this-&gt;rfs = $rfs ?: new RemoteFilesystem($io);
$this-&gt;filesystem = $filesystem ?: new Filesystem();
}




public function getInstallationSource()
{
return 'dist';
}




public function download(PackageInterface $package, $path)
{
$url = $package-&gt;getDistUrl();
if (!$url) {
throw new \InvalidArgumentException('The given package is missing url information');
}

$this-&gt;filesystem-&gt;ensureDirectoryExists($path);

$fileName = $this-&gt;getFileName($package, $path);

$this-&gt;io-&gt;write("  - Installing &lt;info&gt;" . $package-&gt;getName() . "&lt;/info&gt; (&lt;comment&gt;" . $package-&gt;getPrettyVersion() . "&lt;/comment&gt;)");

$processUrl = $this-&gt;processUrl($url);

try {
$this-&gt;rfs-&gt;copy($package-&gt;getSourceUrl(), $processUrl, $fileName);

if (!file_exists($fileName)) {
throw new \UnexpectedValueException($url.' could not be saved to '.$fileName.', make sure the'
.' directory is writable and you have internet connectivity');
}

$checksum = $package-&gt;getDistSha1Checksum();
if ($checksum &amp;&amp; hash_file('sha1', $fileName) !== $checksum) {
throw new \UnexpectedValueException('The checksum verification of the file failed (downloaded from '.$url.')');
}
} catch (\Exception $e) {

 $this-&gt;filesystem-&gt;removeDirectory($path);
throw $e;
}
}




public function update(PackageInterface $initial, PackageInterface $target, $path)
{
$this-&gt;remove($initial, $path);
$this-&gt;download($target, $path);
}




public function remove(PackageInterface $package, $path)
{
$this-&gt;io-&gt;write("  - Removing &lt;info&gt;" . $package-&gt;getName() . "&lt;/info&gt; (&lt;comment&gt;" . $package-&gt;getPrettyVersion() . "&lt;/comment&gt;)");
if (!$this-&gt;filesystem-&gt;removeDirectory($path)) {
throw new \RuntimeException('Could not completely delete '.$path.', aborting.');
}
}








protected function getFileName(PackageInterface $package, $path)
{
return $path.'/'.pathinfo($package-&gt;getDistUrl(), PATHINFO_BASENAME);
}









protected function processUrl($url)
{
if (!extension_loaded('openssl') &amp;&amp; 0 === strpos($url, 'https:')) {
throw new \RuntimeException('You must enable the openssl extension to download files via https');
}

return $url;
}
}
&lt;?php











namespace Composer\Downloader;

use Composer\Package\PackageInterface;
use Composer\Util\Svn as SvnUtil;





class SvnDownloader extends VcsDownloader
{



public function doDownload(PackageInterface $package, $path)
{
$url = $package-&gt;getSourceUrl();
$ref = $package-&gt;getSourceReference();

$this-&gt;io-&gt;write("    Checking out ".$package-&gt;getSourceReference());
$this-&gt;execute($url, "svn co", sprintf("%s/%s", $url, $ref), null, $path);
}




public function doUpdate(PackageInterface $initial, PackageInterface $target, $path)
{
$url = $target-&gt;getSourceUrl();
$ref = $target-&gt;getSourceReference();

$this-&gt;io-&gt;write("    Checking out " . $ref);
$this-&gt;execute($url, "svn switch", sprintf("%s/%s", $url, $ref), $path);
}




protected function enforceCleanDirectory($path)
{
$this-&gt;process-&gt;execute('svn status --ignore-externals', $output, $path);
if (preg_match('{^ *[^X ] +}m', $output)) {
throw new \RuntimeException('Source directory ' . $path . ' has uncommitted changes:'."\n\n".rtrim($output));
}
}













protected function execute($baseUrl, $command, $url, $cwd = null, $path = null)
{
$util = new SvnUtil($baseUrl, $this-&gt;io);
try {
return $util-&gt;execute($command, $url, $cwd, $path, $this-&gt;io-&gt;isVerbose());
} catch (\RuntimeException $e) {
throw new \RuntimeException(
'Package could not be downloaded, '.$e-&gt;getMessage()
);
}
}
}
&lt;?php











namespace Composer\Downloader;

use Composer\Util\Filesystem;










class PearPackageExtractor
{
private static $rolesWithoutPackageNamePrefix = array('php', 'script', 'www');

private $filesystem;
private $file;

public function __construct($file)
{
if (!is_file($file)) {
throw new \UnexpectedValueException('PEAR package file is not found at '.$file);
}

$this-&gt;filesystem = new Filesystem();
$this-&gt;file = $file;
}











public function extractTo($target, array $roles = array('php' =&gt; '/', 'script' =&gt; '/bin'), $vars = array())
{
$extractionPath = $target.'/tarball';

try {
$archive = new \PharData($this-&gt;file);
$archive-&gt;extractTo($extractionPath, null, true);

if (!is_file($this-&gt;combine($extractionPath, '/package.xml'))) {
throw new \RuntimeException('Invalid PEAR package. It must contain package.xml file.');
}

$fileCopyActions = $this-&gt;buildCopyActions($extractionPath, $roles, $vars);
$this-&gt;copyFiles($fileCopyActions, $extractionPath, $target, $roles, $vars);
$this-&gt;filesystem-&gt;removeDirectory($extractionPath);
} catch (\Exception $exception) {
throw new \UnexpectedValueException(sprintf('Failed to extract PEAR package %s to %s. Reason: %s', $this-&gt;file, $target, $exception-&gt;getMessage()), 0, $exception);
}
}










private function copyFiles($files, $source, $target, $roles, $vars)
{
foreach ($files as $file) {
$from = $this-&gt;combine($source, $file['from']);
$to = $this-&gt;combine($target, $roles[$file['role']]);
$to = $this-&gt;combine($to, $file['to']);
$tasks = $file['tasks'];
$this-&gt;copyFile($from, $to, $tasks, $vars);
}
}

private function copyFile($from, $to, $tasks, $vars)
{
if (!is_file($from)) {
throw new \RuntimeException('Invalid PEAR package. package.xml defines file that is not located inside tarball.');
}

$this-&gt;filesystem-&gt;ensureDirectoryExists(dirname($to));

if (0 == count($tasks)) {
$copied = copy($from, $to);
} else {
$content = file_get_contents($from);
$replacements = array();
foreach ($tasks as $task) {
$pattern = $task['from'];
$varName = $task['to'];
if (isset($vars[$varName])) {
if ($varName === 'php_bin' &amp;&amp; false === strpos($to, '.bat')) {
$replacements[$pattern] = preg_replace('{\.bat$}', '', $vars[$varName]);
} else {
$replacements[$pattern] = $vars[$varName];
}
}
}
$content = strtr($content, $replacements);

$copied = file_put_contents($to, $content);
}

if (false === $copied) {
throw new \RuntimeException(sprintf('Failed to copy %s to %s', $from, $to));
}
}










private function buildCopyActions($source, array $roles, $vars)
{

$package = simplexml_load_file($this-&gt;combine($source, 'package.xml'));
if(false === $package)
throw new \RuntimeException('Package definition file is not valid.');

$packageSchemaVersion = $package['version'];
if ('1.0' == $packageSchemaVersion) {
$children = $package-&gt;release-&gt;filelist-&gt;children();
$packageName = (string) $package-&gt;name;
$packageVersion = (string) $package-&gt;release-&gt;version;
$sourceDir = $packageName . '-' . $packageVersion;
$result = $this-&gt;buildSourceList10($children, $roles, $sourceDir, '', null, $packageName);
} elseif ('2.0' == $packageSchemaVersion || '2.1' == $packageSchemaVersion) {
$children = $package-&gt;contents-&gt;children();
$packageName = (string) $package-&gt;name;
$packageVersion = (string) $package-&gt;version-&gt;release;
$sourceDir = $packageName . '-' . $packageVersion;
$result = $this-&gt;buildSourceList20($children, $roles, $sourceDir, '', null, $packageName);

$namespaces = $package-&gt;getNamespaces();
$package-&gt;registerXPathNamespace('ns', $namespaces['']);
$releaseNodes = $package-&gt;xpath('ns:phprelease');
$this-&gt;applyRelease($result, $releaseNodes, $vars);
} else {
throw new \RuntimeException('Unsupported schema version of package definition file.');
}

return $result;
}

private function applyRelease(&amp;$actions, $releaseNodes, $vars)
{
foreach ($releaseNodes as $releaseNode) {
$requiredOs = $releaseNode-&gt;installconditions &amp;&amp; $releaseNode-&gt;installconditions-&gt;os &amp;&amp; $releaseNode-&gt;installconditions-&gt;os-&gt;name ? (string) $releaseNode-&gt;installconditions-&gt;os-&gt;name : '';
if ($requiredOs &amp;&amp; $vars['os'] != $requiredOs) {
continue;
}

if ($releaseNode-&gt;filelist) {
foreach ($releaseNode-&gt;filelist-&gt;children() as $action) {
if ('install' == $action-&gt;getName()) {
$name = (string) $action['name'];
$as = (string) $action['as'];
if (isset($actions[$name])) {
$actions[$name]['to'] = $as;
}
} elseif ('ignore' == $action-&gt;getName()) {
$name = (string) $action['name'];
unset($actions[$name]);
} else {

 }
}
}
break;
}
}

private function buildSourceList10($children, $targetRoles, $source = '', $target = '', $role = null, $packageName)
{
$result = array();


 foreach ($children as $child) {

if ($child-&gt;getName() == 'dir') {
$dirSource = $this-&gt;combine($source, (string) $child['name']);
$dirTarget = $child['baseinstalldir'] ? : $target;
$dirRole = $child['role'] ? : $role;
$dirFiles = $this-&gt;buildSourceList10($child-&gt;children(), $targetRoles, $dirSource, $dirTarget, $dirRole, $packageName);
$result = array_merge($result, $dirFiles);
} elseif ($child-&gt;getName() == 'file') {
$fileRole = (string) $child['role'] ? : $role;
if (isset($targetRoles[$fileRole])) {
$fileName = (string) ($child['name'] ? : $child[0]); 
 $fileSource = $this-&gt;combine($source, $fileName);
$fileTarget = $this-&gt;combine((string) $child['baseinstalldir'] ? : $target, $fileName);
if (!in_array($fileRole, self::$rolesWithoutPackageNamePrefix)) {
$fileTarget = $packageName . '/' . $fileTarget;
}
$result[(string) $child['name']] = array('from' =&gt; $fileSource, 'to' =&gt; $fileTarget, 'role' =&gt; $fileRole, 'tasks' =&gt; array());
}
}
}

return $result;
}

private function buildSourceList20($children, $targetRoles, $source = '', $target = '', $role = null, $packageName)
{
$result = array();


 foreach ($children as $child) {

if ('dir' == $child-&gt;getName()) {
$dirSource = $this-&gt;combine($source, $child['name']);
$dirTarget = $child['baseinstalldir'] ? : $target;
$dirRole = $child['role'] ? : $role;
$dirFiles = $this-&gt;buildSourceList20($child-&gt;children(), $targetRoles, $dirSource, $dirTarget, $dirRole, $packageName);
$result = array_merge($result, $dirFiles);
} elseif ('file' == $child-&gt;getName()) {
$fileRole = (string) $child['role'] ? : $role;
if (isset($targetRoles[$fileRole])) {
$fileSource = $this-&gt;combine($source, (string) $child['name']);
$fileTarget = $this-&gt;combine((string) ($child['baseinstalldir'] ? : $target), (string) $child['name']);
$fileTasks = array();
foreach ($child-&gt;children('http://pear.php.net/dtd/tasks-1.0') as $taskNode) {
if ('replace' == $taskNode-&gt;getName()) {
$fileTasks[] = array('from' =&gt; (string) $taskNode-&gt;attributes()-&gt;from, 'to' =&gt; (string) $taskNode-&gt;attributes()-&gt;to);
}
}
if (!in_array($fileRole, self::$rolesWithoutPackageNamePrefix)) {
$fileTarget = $packageName . '/' . $fileTarget;
}
$result[(string) $child['name']] = array('from' =&gt; $fileSource, 'to' =&gt; $fileTarget, 'role' =&gt; $fileRole, 'tasks' =&gt; $fileTasks);
}
}
}

return $result;
}

private function combine($left, $right)
{
return rtrim($left, '/') . '/' . ltrim($right, '/');
}
}
&lt;?php











namespace Composer\Downloader;

use Composer\Package\PackageInterface;
use Composer\Downloader\DownloaderInterface;
use Composer\Util\Filesystem;






class DownloadManager
{
private $preferSource = false;
private $filesystem;
private $downloaders = array();







public function __construct($preferSource = false, Filesystem $filesystem = null)
{
$this-&gt;preferSource = $preferSource;
$this-&gt;filesystem = $filesystem ?: new Filesystem();
}






public function setPreferSource($preferSource)
{
$this-&gt;preferSource = $preferSource;

return $this;
}







public function setDownloader($type, DownloaderInterface $downloader)
{
$type = strtolower($type);
$this-&gt;downloaders[$type] = $downloader;

return $this;
}










public function getDownloader($type)
{
$type = strtolower($type);
if (!isset($this-&gt;downloaders[$type])) {
throw new \InvalidArgumentException('Unknown downloader type: '.$type);
}

return $this-&gt;downloaders[$type];
}












public function getDownloaderForInstalledPackage(PackageInterface $package)
{
$installationSource = $package-&gt;getInstallationSource();

if ('dist' === $installationSource) {
$downloader = $this-&gt;getDownloader($package-&gt;getDistType());
} elseif ('source' === $installationSource) {
$downloader = $this-&gt;getDownloader($package-&gt;getSourceType());
} else {
throw new \InvalidArgumentException(
'Package '.$package.' seems not been installed properly'
);
}

if ($installationSource !== $downloader-&gt;getInstallationSource()) {
throw new \LogicException(sprintf(
'Downloader "%s" is a %s type downloader and can not be used to download %s',
get_class($downloader), $downloader-&gt;getInstallationSource(), $installationSource
));
}

return $downloader;
}










public function download(PackageInterface $package, $targetDir, $preferSource = null)
{
$preferSource = null !== $preferSource ? $preferSource : $this-&gt;preferSource;
$sourceType = $package-&gt;getSourceType();
$distType = $package-&gt;getDistType();

if (!$package-&gt;isDev() &amp;&amp; !($preferSource &amp;&amp; $sourceType) &amp;&amp; $distType) {
$package-&gt;setInstallationSource('dist');
} elseif ($sourceType) {
$package-&gt;setInstallationSource('source');
} elseif ($package-&gt;isDev()) {
throw new \InvalidArgumentException('Dev package '.$package.' must have a source specified');
} else {
throw new \InvalidArgumentException('Package '.$package.' must have a source or dist specified');
}

$this-&gt;filesystem-&gt;ensureDirectoryExists($targetDir);

$downloader = $this-&gt;getDownloaderForInstalledPackage($package);
$downloader-&gt;download($package, $targetDir);
}










public function update(PackageInterface $initial, PackageInterface $target, $targetDir)
{
$downloader = $this-&gt;getDownloaderForInstalledPackage($initial);
$installationSource = $initial-&gt;getInstallationSource();

if ('dist' === $installationSource) {
$initialType = $initial-&gt;getDistType();
$targetType = $target-&gt;getDistType();
} else {
$initialType = $initial-&gt;getSourceType();
$targetType = $target-&gt;getSourceType();
}


 if ($target-&gt;isDev() &amp;&amp; 'dist' === $installationSource) {
$downloader-&gt;remove($initial, $targetDir);
$this-&gt;download($target, $targetDir);

return;
}

if ($initialType === $targetType) {
$target-&gt;setInstallationSource($installationSource);
$downloader-&gt;update($initial, $target, $targetDir);
} else {
$downloader-&gt;remove($initial, $targetDir);
$this-&gt;download($target, $targetDir, 'source' === $installationSource);
}
}







public function remove(PackageInterface $package, $targetDir)
{
$downloader = $this-&gt;getDownloaderForInstalledPackage($package);
$downloader-&gt;remove($package, $targetDir);
}
}
&lt;?php











namespace Composer\Downloader;

use Composer\Package\PackageInterface;







interface DownloaderInterface
{





public function getInstallationSource();







public function download(PackageInterface $package, $path);








public function update(PackageInterface $initial, PackageInterface $target, $path);







public function remove(PackageInterface $package, $path);
}
&lt;?php











namespace Composer\Downloader;




class TransportException extends \Exception
{
}
&lt;?php











namespace Composer\Downloader;






class PharDownloader extends ArchiveDownloader
{



protected function extract($file, $path)
{

 $archive = new \Phar($file);
$archive-&gt;extractTo($path, null, true);





}
}
&lt;?php











namespace Composer\Downloader;






class TarDownloader extends ArchiveDownloader
{



protected function extract($file, $path)
{

 $archive = new \PharData($file);
$archive-&gt;extractTo($path, null, true);
}
}
&lt;?php











namespace Composer\Downloader;

use Composer\Package\PackageInterface;




class HgDownloader extends VcsDownloader
{



public function doDownload(PackageInterface $package, $path)
{
$url = escapeshellarg($package-&gt;getSourceUrl());
$ref = escapeshellarg($package-&gt;getSourceReference());
$path = escapeshellarg($path);
$this-&gt;io-&gt;write("    Cloning ".$package-&gt;getSourceReference());
$command = sprintf('hg clone %s %s &amp;&amp; cd %2$s &amp;&amp; hg up %s', $url, $path, $ref);
if (0 !== $this-&gt;process-&gt;execute($command, $ignoredOutput)) {
throw new \RuntimeException('Failed to execute ' . $command . "\n\n" . $this-&gt;process-&gt;getErrorOutput());
}
}




public function doUpdate(PackageInterface $initial, PackageInterface $target, $path)
{
$url = escapeshellarg($target-&gt;getSourceUrl());
$ref = escapeshellarg($target-&gt;getSourceReference());
$path = escapeshellarg($path);
$this-&gt;io-&gt;write("    Updating to ".$target-&gt;getSourceReference());
$command = sprintf('cd %s &amp;&amp; hg pull %s &amp;&amp; hg up %s', $path, $url, $ref);
if (0 !== $this-&gt;process-&gt;execute($command, $ignoredOutput)) {
throw new \RuntimeException('Failed to execute ' . $command . "\n\n" . $this-&gt;process-&gt;getErrorOutput());
}
}




protected function enforceCleanDirectory($path)
{
$this-&gt;process-&gt;execute(sprintf('cd %s &amp;&amp; hg st', escapeshellarg($path)), $output);
if (trim($output)) {
throw new \RuntimeException('Source directory ' . $path . ' has uncommitted changes');
}
}
}
&lt;?php











namespace Composer\Downloader;

use Composer\Package\PackageInterface;








abstract class ArchiveDownloader extends FileDownloader
{



public function download(PackageInterface $package, $path)
{
parent::download($package, $path);

$fileName = $this-&gt;getFileName($package, $path);
if ($this-&gt;io-&gt;isVerbose()) {
$this-&gt;io-&gt;write('    Unpacking archive');
}
try {
$this-&gt;extract($fileName, $path);

if ($this-&gt;io-&gt;isVerbose()) {
$this-&gt;io-&gt;write('    Cleaning up');
}
unlink($fileName);


 $contentDir = glob($path . '/*');
if (1 === count($contentDir)) {
$contentDir = $contentDir[0];

if (is_file($contentDir)) {
$this-&gt;filesystem-&gt;rename($contentDir, $path . '/' . basename($contentDir));
} else {

 
 $temporaryName = md5(time().rand());
$this-&gt;filesystem-&gt;rename($contentDir, $temporaryName);
$contentDir = $temporaryName;

foreach (array_merge(glob($contentDir . '/.*'), glob($contentDir . '/*')) as $file) {
if (trim(basename($file), '.')) {
$this-&gt;filesystem-&gt;rename($file, $path . '/' . basename($file));
}
}

rmdir($contentDir);
}
}
} catch (\Exception $e) {

 $this-&gt;filesystem-&gt;removeDirectory($path);
throw $e;
}

$this-&gt;io-&gt;write('');
}




protected function getFileName(PackageInterface $package, $path)
{
return rtrim($path.'/'.md5($path.spl_object_hash($package)).'.'.pathinfo($package-&gt;getDistUrl(), PATHINFO_EXTENSION), '.');
}




protected function processUrl($url)
{
if (!extension_loaded('openssl') &amp;&amp; (0 === strpos($url, 'https:') || 0 === strpos($url, 'http://github.com'))) {

 if (preg_match('{^https?://(github.com/[^/]+/[^/]+/(zip|tar)ball/[^/]+)$}i', $url, $match)) {
$url = 'http://nodeload.'.$match[1];
} else {
throw new \RuntimeException('You must enable the openssl extension to download files via https');
}
}

return $url;
}









abstract protected function extract($file, $path);
}
&lt;?php











namespace Composer\Downloader;

use Composer\Util\ProcessExecutor;
use Composer\IO\IOInterface;
use ZipArchive;




class ZipDownloader extends ArchiveDownloader
{
protected $process;

public function __construct(IOInterface $io, ProcessExecutor $process = null)
{
$this-&gt;process = $process ?: new ProcessExecutor;
parent::__construct($io);
}

protected function extract($file, $path)
{
if (!class_exists('ZipArchive')) {
$error = 'You need the zip extension enabled to use the ZipDownloader';


 if (!defined('PHP_WINDOWS_VERSION_BUILD')) {
$command = 'unzip '.escapeshellarg($file).' -d '.escapeshellarg($path);
if (0 === $this-&gt;process-&gt;execute($command, $ignoredOutput)) {
return;
}

$error = "Could not decompress the archive, enable the PHP zip extension or install unzip.\n".
'Failed to execute ' . $command . "\n\n" . $this-&gt;process-&gt;getErrorOutput();
}

throw new \RuntimeException($error);
}

$zipArchive = new ZipArchive();

if (true !== ($retval = $zipArchive-&gt;open($file))) {
throw new \UnexpectedValueException($this-&gt;getErrorMessage($retval, $file));
}

$zipArchive-&gt;extractTo($path);
$zipArchive-&gt;close();
}








protected function getErrorMessage($retval, $file)
{
switch ($retval) {
case ZipArchive::ER_EXISTS:
return sprintf("File '%s' already exists.", $file);
case ZipArchive::ER_INCONS:
return sprintf("Zip archive '%s' is inconsistent.", $file);
case ZipArchive::ER_INVAL:
return sprintf("Invalid argument (%s)", $file);
case ZipArchive::ER_MEMORY:
return sprintf("Malloc failure (%s)", $file);
case ZipArchive::ER_NOENT:
return sprintf("No such zip file: '%s'", $file);
case ZipArchive::ER_NOZIP:
return sprintf("'%s' is not a zip archive.", $file);
case ZipArchive::ER_OPEN:
return sprintf("Can't open zip file: %s", $file);
case ZipArchive::ER_READ:
return sprintf("Zip read error (%s)", $file);
case ZipArchive::ER_SEEK:
return sprintf("Zip seek error (%s)", $file);
default:
return sprintf("'%s' is not a valid zip archive, got error code: %s", $file, $retval);
}
}
}
&lt;?php











namespace Composer\Downloader;

use Composer\Package\PackageInterface;




class GitDownloader extends VcsDownloader
{



public function doDownload(PackageInterface $package, $path)
{
$ref = $package-&gt;getSourceReference();
$command = 'git clone %s %s &amp;&amp; cd %2$s &amp;&amp; git remote add composer %1$s &amp;&amp; git fetch composer';
$this-&gt;io-&gt;write("    Cloning ".$ref);


 putenv('GIT_ASKPASS=echo');
$commandCallable = function($url) use ($ref, $path, $command) {
return sprintf($command, escapeshellarg($url), escapeshellarg($path), escapeshellarg($ref));
};

$this-&gt;runCommand($commandCallable, $package-&gt;getSourceUrl(), $path);
$this-&gt;setPushUrl($package, $path);

$this-&gt;updateToCommit($path, $ref, $package-&gt;getPrettyVersion(), $package-&gt;getReleaseDate());
}




public function doUpdate(PackageInterface $initial, PackageInterface $target, $path)
{
$ref = $target-&gt;getSourceReference();
$this-&gt;io-&gt;write("    Checking out ".$ref);
$command = 'cd %s &amp;&amp; git remote set-url composer %s &amp;&amp; git fetch composer &amp;&amp; git fetch --tags composer';


 $this-&gt;process-&gt;execute(sprintf('cd %s &amp;&amp; git remote -v', escapeshellarg($path)), $output);
if (preg_match('{^composer\s+https://(.+):(.+)@github.com/}im', $output, $match)) {
$this-&gt;io-&gt;setAuthorization('github.com', $match[1], $match[2]);
}

$commandCallable = function($url) use ($ref, $path, $command) {
return sprintf($command, escapeshellarg($path), escapeshellarg($url), escapeshellarg($ref));
};

$this-&gt;runCommand($commandCallable, $target-&gt;getSourceUrl());
$this-&gt;updateToCommit($path, $ref, $target-&gt;getPrettyVersion(), $target-&gt;getReleaseDate());
}

protected function updateToCommit($path, $reference, $branch, $date)
{
$template = 'git checkout %s &amp;&amp; git reset --hard %1$s';


 $gitRef = $reference;
if (!preg_match('{^[a-f0-9]{40}$}', $reference)
&amp;&amp; 0 === $this-&gt;process-&gt;execute('git branch -r', $output, $path)
&amp;&amp; preg_match('{^\s+composer/'.preg_quote($reference).'$}m', $output)
) {
$gitRef = 'composer/'.$reference;
}

$command = sprintf($template, escapeshellarg($gitRef));
if (0 === $this-&gt;process-&gt;execute($command, $output, $path)) {
return;
}


 if ($date &amp;&amp; false !== strpos($this-&gt;process-&gt;getErrorOutput(), $reference)) {
$branch = preg_replace('{(?:^dev-|(?:\.x)?-dev$)}i', '', $branch);
$date = $date-&gt;format('U');


 $command = 'git branch -r';
if (0 !== $this-&gt;process-&gt;execute($command, $output, $path)) {
throw new \RuntimeException('Failed to execute ' . $command . "\n\n" . $this-&gt;process-&gt;getErrorOutput());
}

$guessTemplate = 'git log --until=%s --date=raw -n1 --pretty=%%H %s';
foreach ($this-&gt;process-&gt;splitLines($output) as $line) {
if (preg_match('{^composer/'.preg_quote($branch).'(?:\.x)?$}i', trim($line))) {

 if (0 === $this-&gt;process-&gt;execute(sprintf($guessTemplate, $date, escapeshellarg(trim($line))), $output, $path)) {
$newReference = trim($output);
}

break;
}
}

if (empty($newReference)) {

 if (0 !== $this-&gt;process-&gt;execute(sprintf($guessTemplate, $date, '--all'), $output, $path)) {
throw new \RuntimeException('Failed to execute ' . $command . "\n\n" . $this-&gt;process-&gt;getErrorOutput());
}
$newReference = trim($output);
}


 $command = sprintf($template, escapeshellarg($reference));
if (0 === $this-&gt;process-&gt;execute($command, $output, $path)) {
$this-&gt;io-&gt;write('    '.$reference.' is gone (history was rewritten?), recovered by checking out '.$newReference);

return;
}
}

throw new \RuntimeException('Failed to execute ' . $command . "\n\n" . $this-&gt;process-&gt;getErrorOutput());
}




protected function enforceCleanDirectory($path)
{
$command = sprintf('cd %s &amp;&amp; git status --porcelain --untracked-files=no', escapeshellarg($path));
if (0 !== $this-&gt;process-&gt;execute($command, $output)) {
throw new \RuntimeException('Failed to execute ' . $command . "\n\n" . $this-&gt;process-&gt;getErrorOutput());
}

if (trim($output)) {
throw new \RuntimeException('Source directory ' . $path . ' has uncommitted changes');
}
}









protected function runCommand($commandCallable, $url, $path = null)
{
$handler = array($this, 'outputHandler');


 if (preg_match('{^(?:https?|git)(://github.com/.*)}', $url, $match)) {
$protocols = array('git', 'https', 'http');
$messages = array();
foreach ($protocols as $protocol) {
$url = $protocol . $match[1];
if (0 === $this-&gt;process-&gt;execute(call_user_func($commandCallable, $url), $handler)) {
return;
}
$messages[] = '- ' . $url . "\n" . preg_replace('#^#m', '  ', $this-&gt;process-&gt;getErrorOutput());
if (null !== $path) {
$this-&gt;filesystem-&gt;removeDirectory($path);
}
}


 $this-&gt;throwException('Failed to clone ' . $url .' via git, https and http protocols, aborting.' . "\n\n" . implode("\n", $messages), $url);
}

$command = call_user_func($commandCallable, $url);
if (0 !== $this-&gt;process-&gt;execute($command, $handler)) {
if (preg_match('{^git@github.com:(.+?)\.git$}i', $url, $match) &amp;&amp; $this-&gt;io-&gt;isInteractive()) {

 $retries = 3;
$retrying = false;
do {
if ($retrying) {
$this-&gt;io-&gt;write('Invalid credentials');
}
if (!$this-&gt;io-&gt;hasAuthorization('github.com') || $retrying) {
$username = $this-&gt;io-&gt;ask('Username: ');
$password = $this-&gt;io-&gt;askAndHideAnswer('Password: ');
$this-&gt;io-&gt;setAuthorization('github.com', $username, $password);
}

$auth = $this-&gt;io-&gt;getAuthorization('github.com');
$url = 'https://'.$auth['username'] . ':' . $auth['password'] . '@github.com/'.$match[1].'.git';

$command = call_user_func($commandCallable, $url);
if (0 === $this-&gt;process-&gt;execute($command, $handler)) {
return;
}
if (null !== $path) {
$this-&gt;filesystem-&gt;removeDirectory($path);
}
$retrying = true;
} while (--$retries);
}

if (null !== $path) {
$this-&gt;filesystem-&gt;removeDirectory($path);
}
$this-&gt;throwException('Failed to execute ' . $command . "\n\n" . $this-&gt;process-&gt;getErrorOutput(), $url);
}
}

public function outputHandler($type, $buffer)
{
if ($type !== 'out') {
return;
}
if ($this-&gt;io-&gt;isVerbose()) {
$this-&gt;io-&gt;write($buffer, false);
}
}

protected function throwException($message, $url)
{
if (0 !== $this-&gt;process-&gt;execute('git --version', $ignoredOutput)) {
throw new \RuntimeException('Failed to clone '.$url.', git was not found, check that it is installed and in your PATH env.' . "\n\n" . $this-&gt;process-&gt;getErrorOutput());
}

throw new \RuntimeException($message);
}

protected function setPushUrl(PackageInterface $package, $path)
{

 if (preg_match('{^(?:https?|git)://github.com/([^/]+)/([^/]+?)(?:\.git)?$}', $package-&gt;getSourceUrl(), $match)) {
$pushUrl = 'git@github.com:'.$match[1].'/'.$match[2].'.git';
$cmd = sprintf('git remote set-url --push origin %s', escapeshellarg($pushUrl));
$this-&gt;process-&gt;execute($cmd, $ignoredOutput, $path);
}
}
}
&lt;?php











namespace Composer\Repository;

use Composer\Package\AliasPackage;
use Composer\Package\PackageInterface;
use Composer\Package\Version\VersionParser;






class ArrayRepository implements RepositoryInterface
{
protected $packages;

public function __construct(array $packages = array())
{
foreach ($packages as $package) {
$this-&gt;addPackage($package);
}
}




public function findPackage($name, $version)
{

 $versionParser = new VersionParser();
$version = $versionParser-&gt;normalize($version);
$name = strtolower($name);

foreach ($this-&gt;getPackages() as $package) {
if ($name === $package-&gt;getName() &amp;&amp; $version === $package-&gt;getVersion()) {
return $package;
}
}
}




public function findPackages($name, $version = null)
{

 $name = strtolower($name);


 if (null !== $version) {
$versionParser = new VersionParser();
$version = $versionParser-&gt;normalize($version);
}

$packages = array();

foreach ($this-&gt;getPackages() as $package) {
if ($package-&gt;getName() === $name &amp;&amp; (null === $version || $version === $package-&gt;getVersion())) {
$packages[] = $package;
}
}

return $packages;
}




public function hasPackage(PackageInterface $package)
{
$packageId = $package-&gt;getUniqueName();

foreach ($this-&gt;getPackages() as $repoPackage) {
if ($packageId === $repoPackage-&gt;getUniqueName()) {
return true;
}
}

return false;
}






public function addPackage(PackageInterface $package)
{
if (null === $this-&gt;packages) {
$this-&gt;initialize();
}
$package-&gt;setRepository($this);
$this-&gt;packages[] = $package;


 if ($package-&gt;getAlias()) {
$alias = $this-&gt;createAliasPackage($package);
if (!$this-&gt;hasPackage($alias)) {
$this-&gt;addPackage($alias);
}
}
}

protected function createAliasPackage(PackageInterface $package, $alias = null, $prettyAlias = null)
{
return new AliasPackage($package, $alias ?: $package-&gt;getAlias(), $prettyAlias ?: $package-&gt;getPrettyAlias());
}






public function removePackage(PackageInterface $package)
{
$packageId = $package-&gt;getUniqueName();

foreach ($this-&gt;getPackages() as $key =&gt; $repoPackage) {
if ($packageId === $repoPackage-&gt;getUniqueName()) {
array_splice($this-&gt;packages, $key, 1);

return;
}
}
}




public function getPackages()
{
if (null === $this-&gt;packages) {
$this-&gt;initialize();
}

return $this-&gt;packages;
}






public function count()
{
return count($this-&gt;packages);
}




protected function initialize()
{
$this-&gt;packages = array();
}
}
&lt;?php











namespace Composer\Repository;

use Composer\Json\JsonFile;
use Composer\Package\AliasPackage;
use Composer\Package\Loader\ArrayLoader;
use Composer\Package\Dumper\ArrayDumper;







class FilesystemRepository extends ArrayRepository implements WritableRepositoryInterface
{
private $file;






public function __construct(JsonFile $repositoryFile)
{
$this-&gt;file = $repositoryFile;
}




protected function initialize()
{
parent::initialize();

if (!$this-&gt;file-&gt;exists()) {
return;
}

$packages = $this-&gt;file-&gt;read();

if (!is_array($packages)) {
throw new \UnexpectedValueException('Could not parse package list from the '.$this-&gt;file-&gt;getPath().' repository');
}

$loader = new ArrayLoader();
foreach ($packages as $packageData) {
$package = $loader-&gt;load($packageData);
$this-&gt;addPackage($package);
}
}

public function reload()
{
$this-&gt;packages = null;
$this-&gt;initialize();
}




public function write()
{
$packages = array();
$dumper = new ArrayDumper();
foreach ($this-&gt;getPackages() as $package) {
if (!$package instanceof AliasPackage) {
$data = $dumper-&gt;dump($package);
$packages[] = $data;
}
}

$this-&gt;file-&gt;write($packages);
}
}
&lt;?php











namespace Composer\Repository;

use Composer\Package\PackageInterface;






interface WritableRepositoryInterface extends RepositoryInterface
{



public function write();






public function addPackage(PackageInterface $package);






public function removePackage(PackageInterface $package);




public function reload();
}
&lt;?php











namespace Composer\Repository;

use Composer\IO\IOInterface;
use Composer\Package\Version\VersionParser;
use Composer\Repository\Pear\ChannelReader;
use Composer\Package\MemoryPackage;
use Composer\Repository\Pear\ChannelInfo;
use Composer\Package\Link;
use Composer\Package\LinkConstraint\VersionConstraint;
use Composer\Util\RemoteFilesystem;
use Composer\Config;










class PearRepository extends ArrayRepository
{
private $url;
private $io;
private $rfs;
private $versionParser;




private $vendorAlias;

public function __construct(array $repoConfig, IOInterface $io, Config $config, RemoteFilesystem $rfs = null)
{
if (!preg_match('{^https?://}', $repoConfig['url'])) {
$repoConfig['url'] = 'http://'.$repoConfig['url'];
}

if (function_exists('filter_var') &amp;&amp; version_compare(PHP_VERSION, '5.3.3', '&gt;=') &amp;&amp; !filter_var($repoConfig['url'], FILTER_VALIDATE_URL)) {
throw new \UnexpectedValueException('Invalid url given for PEAR repository: '.$repoConfig['url']);
}

$this-&gt;url = rtrim($repoConfig['url'], '/');
$this-&gt;io = $io;
$this-&gt;rfs = $rfs ?: new RemoteFilesystem($this-&gt;io);
$this-&gt;vendorAlias = isset($repoConfig['vendor-alias']) ? $repoConfig['vendor-alias'] : null;
$this-&gt;versionParser = new VersionParser();
}

protected function initialize()
{
parent::initialize();

$this-&gt;io-&gt;write('Initializing PEAR repository '.$this-&gt;url);

$reader = new ChannelReader($this-&gt;rfs);
try {
$channelInfo = $reader-&gt;read($this-&gt;url);
} catch (\Exception $e) {
$this-&gt;io-&gt;write('&lt;warning&gt;PEAR repository from '.$this-&gt;url.' could not be loaded. '.$e-&gt;getMessage().'&lt;/warning&gt;');

return;
}
$packages = $this-&gt;buildComposerPackages($channelInfo, $this-&gt;versionParser);
foreach ($packages as $package) {
$this-&gt;addPackage($package);
}
}







private function buildComposerPackages(ChannelInfo $channelInfo, VersionParser $versionParser)
{
$result = array();
foreach ($channelInfo-&gt;getPackages() as $packageDefinition) {
foreach ($packageDefinition-&gt;getReleases() as $version =&gt; $releaseInfo) {
try {
$normalizedVersion = $versionParser-&gt;normalize($version);
} catch (\UnexpectedValueException $e) {
if ($this-&gt;io-&gt;isVerbose()) {
$this-&gt;io-&gt;write('Could not load '.$packageDefinition-&gt;getPackageName().' '.$version.': '.$e-&gt;getMessage());
}
continue;
}

$composerPackageName = $this-&gt;buildComposerPackageName($packageDefinition-&gt;getChannelName(), $packageDefinition-&gt;getPackageName());


 
 $distUrl = "http://{$packageDefinition-&gt;getChannelName()}/get/{$packageDefinition-&gt;getPackageName()}-{$version}.tgz";

$requires = array();
$suggests = array();
$conflicts = array();
$replaces = array();


 
 if ($channelInfo-&gt;getName() == $packageDefinition-&gt;getChannelName()) {
$composerPackageAlias = $this-&gt;buildComposerPackageName($channelInfo-&gt;getAlias(), $packageDefinition-&gt;getPackageName());
$aliasConstraint = new VersionConstraint('==', $normalizedVersion);
$replaces[] = new Link($composerPackageName, $composerPackageAlias, $aliasConstraint, 'replaces', (string) $aliasConstraint);
}


 if (!empty($this-&gt;vendorAlias)
&amp;&amp; ($this-&gt;vendorAlias != 'pear-'.$channelInfo-&gt;getAlias() || $channelInfo-&gt;getName() != $packageDefinition-&gt;getChannelName())
) {
$composerPackageAlias = "{$this-&gt;vendorAlias}/{$packageDefinition-&gt;getPackageName()}";
$aliasConstraint = new VersionConstraint('==', $normalizedVersion);
$replaces[] = new Link($composerPackageName, $composerPackageAlias, $aliasConstraint, 'replaces', (string) $aliasConstraint);
}

foreach ($releaseInfo-&gt;getDependencyInfo()-&gt;getRequires() as $dependencyConstraint) {
$dependencyPackageName = $this-&gt;buildComposerPackageName($dependencyConstraint-&gt;getChannelName(), $dependencyConstraint-&gt;getPackageName());
$constraint = $versionParser-&gt;parseConstraints($dependencyConstraint-&gt;getConstraint());
$link = new Link($composerPackageName, $dependencyPackageName, $constraint, $dependencyConstraint-&gt;getType(), $dependencyConstraint-&gt;getConstraint());
switch ($dependencyConstraint-&gt;getType()) {
case 'required':
$requires[] = $link;
break;
case 'conflicts':
$conflicts[] = $link;
break;
case 'replaces':
$replaces[] = $link;
break;
}
}

foreach ($releaseInfo-&gt;getDependencyInfo()-&gt;getOptionals() as $group =&gt; $dependencyConstraints) {
foreach ($dependencyConstraints as $dependencyConstraint) {
$dependencyPackageName = $this-&gt;buildComposerPackageName($dependencyConstraint-&gt;getChannelName(), $dependencyConstraint-&gt;getPackageName());
$suggests[$group.'-'.$dependencyPackageName] = $dependencyConstraint-&gt;getConstraint();
}
}

$package = new MemoryPackage($composerPackageName, $normalizedVersion, $version);
$package-&gt;setType('pear-library');
$package-&gt;setDescription($packageDefinition-&gt;getDescription());
$package-&gt;setDistType('file');
$package-&gt;setDistUrl($distUrl);
$package-&gt;setAutoload(array('classmap' =&gt; array('')));
$package-&gt;setIncludePaths(array('/'));
$package-&gt;setRequires($requires);
$package-&gt;setConflicts($conflicts);
$package-&gt;setSuggests($suggests);
$package-&gt;setReplaces($replaces);
$result[] = $package;
}
}

return $result;
}

private function buildComposerPackageName($channelName, $packageName)
{
if ('php' === $channelName) {
return "php";
}
if ('ext' === $channelName) {
return "ext-{$packageName}";
}

return "pear-{$channelName}/{$packageName}";
}
}
&lt;?php











namespace Composer\Repository;

use Composer\IO\IOInterface;
use Composer\Config;








class RepositoryManager
{
private $localRepository;
private $localDevRepository;
private $repositories = array();
private $repositoryClasses = array();
private $io;
private $config;

public function __construct(IOInterface $io, Config $config)
{
$this-&gt;io = $io;
$this-&gt;config = $config;
}









public function findPackage($name, $version)
{
foreach ($this-&gt;repositories as $repository) {
if ($package = $repository-&gt;findPackage($name, $version)) {
return $package;
}
}
}









public function findPackages($name, $version)
{
$packages = array();

foreach ($this-&gt;repositories as $repository) {
$packages = array_merge($packages, $repository-&gt;findPackages($name, $version));
}

return $packages;
}






public function addRepository(RepositoryInterface $repository)
{
$this-&gt;repositories[] = $repository;
}









public function createRepository($type, $config)
{
if (!isset($this-&gt;repositoryClasses[$type])) {
throw new \InvalidArgumentException('Repository type is not registered: '.$type);
}

$class = $this-&gt;repositoryClasses[$type];

return new $class($config, $this-&gt;io, $this-&gt;config);
}







public function setRepositoryClass($type, $class)
{
$this-&gt;repositoryClasses[$type] = $class;
}






public function getRepositories()
{
return $this-&gt;repositories;
}






public function setLocalRepository(RepositoryInterface $repository)
{
$this-&gt;localRepository = $repository;
}






public function getLocalRepository()
{
return $this-&gt;localRepository;
}






public function setLocalDevRepository(RepositoryInterface $repository)
{
$this-&gt;localDevRepository = $repository;
}






public function getLocalDevRepository()
{
return $this-&gt;localDevRepository;
}






public function getLocalRepositories()
{
return array($this-&gt;localRepository, $this-&gt;localDevRepository);
}
}
&lt;?php











namespace Composer\Repository\Vcs;

use Composer\Downloader\TransportException;
use Composer\Json\JsonFile;
use Composer\Cache;
use Composer\IO\IOInterface;
use Composer\Util\RemoteFilesystem;




class GitHubDriver extends VcsDriver
{
protected $cache;
protected $owner;
protected $repository;
protected $tags;
protected $branches;
protected $rootIdentifier;
protected $hasIssues;
protected $infoCache = array();
protected $isPrivate = false;






protected $gitDriver;




public function initialize()
{
preg_match('#^(?:(?:https?|git)://github\.com/|git@github\.com:)([^/]+)/(.+?)(?:\.git)?$#', $this-&gt;url, $match);
$this-&gt;owner = $match[1];
$this-&gt;repository = $match[2];
$this-&gt;originUrl = 'github.com';
$this-&gt;cache = new Cache($this-&gt;io, $this-&gt;config-&gt;get('home').'/cache.github/'.$this-&gt;owner.'/'.$this-&gt;repository);

$this-&gt;fetchRootIdentifier();
}




public function getRootIdentifier()
{
if ($this-&gt;gitDriver) {
return $this-&gt;gitDriver-&gt;getRootIdentifier();
}

return $this-&gt;rootIdentifier;
}




public function getUrl()
{
if ($this-&gt;gitDriver) {
return $this-&gt;gitDriver-&gt;getUrl();
}

return $this-&gt;url;
}




public function getSource($identifier)
{
if ($this-&gt;gitDriver) {
return $this-&gt;gitDriver-&gt;getSource($identifier);
}
$label = array_search($identifier, $this-&gt;getTags()) ?: $identifier;
if ($this-&gt;isPrivate) {

 
 $url = $this-&gt;generateSshUrl();
} else {
$url = $this-&gt;getUrl();
}

return array('type' =&gt; 'git', 'url' =&gt; $url, 'reference' =&gt; $label);
}




public function getDist($identifier)
{
if ($this-&gt;gitDriver) {
return $this-&gt;gitDriver-&gt;getDist($identifier);
}
$label = array_search($identifier, $this-&gt;getTags()) ?: $identifier;
$url = 'https://github.com/'.$this-&gt;owner.'/'.$this-&gt;repository.'/zipball/'.$label;

return array('type' =&gt; 'zip', 'url' =&gt; $url, 'reference' =&gt; $label, 'shasum' =&gt; '');
}




public function getComposerInformation($identifier)
{
if ($this-&gt;gitDriver) {
return $this-&gt;gitDriver-&gt;getComposerInformation($identifier);
}

if (preg_match('{[a-f0-9]{40}}i', $identifier) &amp;&amp; $res = $this-&gt;cache-&gt;read($identifier)) {
$this-&gt;infoCache[$identifier] = JsonFile::parseJson($res);
}

if (!isset($this-&gt;infoCache[$identifier])) {
try {
$resource = 'https://raw.github.com/'.$this-&gt;owner.'/'.$this-&gt;repository.'/'.$identifier.'/composer.json';
$composer = $this-&gt;getContents($resource);
} catch (TransportException $e) {
if (404 !== $e-&gt;getCode()) {
throw $e;
}

$composer = false;
}

if ($composer) {
$composer = JsonFile::parseJson($composer, $resource);

if (!isset($composer['time'])) {
$resource = 'https://api.github.com/repos/'.$this-&gt;owner.'/'.$this-&gt;repository.'/commits/'.urlencode($identifier);
$commit = JsonFile::parseJson($this-&gt;getContents($resource), $resource);
$composer['time'] = $commit['commit']['committer']['date'];
}
if (!isset($composer['support']['source'])) {
$label = array_search($identifier, $this-&gt;getTags()) ?: array_search($identifier, $this-&gt;getBranches()) ?: $identifier;
$composer['support']['source'] = sprintf('https://github.com/%s/%s/tree/%s', $this-&gt;owner, $this-&gt;repository, $label);
}
if (!isset($composer['support']['issues']) &amp;&amp; $this-&gt;hasIssues) {
$composer['support']['issues'] = sprintf('https://github.com/%s/%s/issues', $this-&gt;owner, $this-&gt;repository);
}
}

if (preg_match('{[a-f0-9]{40}}i', $identifier)) {
$this-&gt;cache-&gt;write($identifier, json_encode($composer));
}

$this-&gt;infoCache[$identifier] = $composer;
}

return $this-&gt;infoCache[$identifier];
}




public function getTags()
{
if ($this-&gt;gitDriver) {
return $this-&gt;gitDriver-&gt;getTags();
}
if (null === $this-&gt;tags) {
$resource = 'https://api.github.com/repos/'.$this-&gt;owner.'/'.$this-&gt;repository.'/tags';
$tagsData = JsonFile::parseJson($this-&gt;getContents($resource), $resource);
$this-&gt;tags = array();
foreach ($tagsData as $tag) {
$this-&gt;tags[$tag['name']] = $tag['commit']['sha'];
}
}

return $this-&gt;tags;
}




public function getBranches()
{
if ($this-&gt;gitDriver) {
return $this-&gt;gitDriver-&gt;getBranches();
}
if (null === $this-&gt;branches) {
$resource = 'https://api.github.com/repos/'.$this-&gt;owner.'/'.$this-&gt;repository.'/git/refs/heads';
$branchData = JsonFile::parseJson($this-&gt;getContents($resource), $resource);
$this-&gt;branches = array();
foreach ($branchData as $branch) {
$name = substr($branch['ref'], 11);
$this-&gt;branches[$name] = $branch['object']['sha'];
}
}

return $this-&gt;branches;
}




public static function supports(IOInterface $io, $url, $deep = false)
{
if (!preg_match('#^((?:https?|git)://github\.com/|git@github\.com:)([^/]+)/(.+?)(?:\.git)?$#', $url)) {
return false;
}

if (!extension_loaded('openssl')) {
if ($io-&gt;isVerbose()) {
$io-&gt;write('Skipping GitHub driver for '.$url.' because the OpenSSL PHP extension is missing.');
}

return false;
}

return true;
}






protected function generateSshUrl()
{
return 'git@github.com:'.$this-&gt;owner.'/'.$this-&gt;repository.'.git';
}






protected function fetchRootIdentifier()
{
$repoDataUrl = 'https://api.github.com/repos/'.$this-&gt;owner.'/'.$this-&gt;repository;
$attemptCounter = 0;
while (null === $this-&gt;rootIdentifier) {
if (5 == $attemptCounter++) {
throw new \RuntimeException("Either you have entered invalid credentials or this GitHub repository does not exists (404)");
}
try {
$repoData = JsonFile::parseJson($this-&gt;getContents($repoDataUrl), $repoDataUrl);
if (isset($repoData['default_branch'])) {
$this-&gt;rootIdentifier = $repoData['default_branch'];
} elseif (isset($repoData['master_branch'])) {
$this-&gt;rootIdentifier = $repoData['master_branch'];
} else {
$this-&gt;rootIdentifier = 'master';
}
$this-&gt;hasIssues = !empty($repoData['has_issues']);
} catch (TransportException $e) {
switch ($e-&gt;getCode()) {
case 401:
case 404:
$this-&gt;isPrivate = true;

try {

 
 
 
 $this-&gt;gitDriver = new GitDriver(
$this-&gt;generateSshUrl(),
$this-&gt;io,
$this-&gt;config,
$this-&gt;process,
$this-&gt;remoteFilesystem
);
$this-&gt;gitDriver-&gt;initialize();

return;
} catch (\RuntimeException $e) {
$this-&gt;gitDriver = null;
if (!$this-&gt;io-&gt;isInteractive()) {
$this-&gt;io-&gt;write('&lt;error&gt;Failed to clone the '.$this-&gt;generateSshUrl().' repository, try running in interactive mode so that you can enter your username and password&lt;/error&gt;');
throw $e;
}
}
$this-&gt;io-&gt;write('Authentication required (&lt;info&gt;'.$this-&gt;url.'&lt;/info&gt;):');
$username = $this-&gt;io-&gt;ask('Username: ');
$password = $this-&gt;io-&gt;askAndHideAnswer('Password: ');
$this-&gt;io-&gt;setAuthorization($this-&gt;originUrl, $username, $password);
break;

default:
throw $e;
break;
}
}
}
}
}
&lt;?php











namespace Composer\Repository\Vcs;

use Composer\Json\JsonFile;
use Composer\IO\IOInterface;




class GitBitbucketDriver extends VcsDriver implements VcsDriverInterface
{
protected $owner;
protected $repository;
protected $tags;
protected $branches;
protected $rootIdentifier;
protected $infoCache = array();




public function initialize()
{
preg_match('#^https://bitbucket\.org/([^/]+)/(.+?)\.git$#', $this-&gt;url, $match);
$this-&gt;owner = $match[1];
$this-&gt;repository = $match[2];
$this-&gt;originUrl = 'bitbucket.org';
}




public function getRootIdentifier()
{
if (null === $this-&gt;rootIdentifier) {
$resource = $this-&gt;getScheme() . '://api.bitbucket.org/1.0/repositories/'.$this-&gt;owner.'/'.$this-&gt;repository;
$repoData = JsonFile::parseJson($this-&gt;getContents($resource), $resource);
$this-&gt;rootIdentifier = !empty($repoData['main_branch']) ? $repoData['main_branch'] : 'master';
}

return $this-&gt;rootIdentifier;
}




public function getUrl()
{
return $this-&gt;url;
}




public function getSource($identifier)
{
$label = array_search($identifier, $this-&gt;getTags()) ?: $identifier;

return array('type' =&gt; 'git', 'url' =&gt; $this-&gt;getUrl(), 'reference' =&gt; $label);
}




public function getDist($identifier)
{
$label = array_search($identifier, $this-&gt;getTags()) ?: $identifier;
$url = $this-&gt;getScheme() . '://bitbucket.org/'.$this-&gt;owner.'/'.$this-&gt;repository.'/get/'.$label.'.zip';

return array('type' =&gt; 'zip', 'url' =&gt; $url, 'reference' =&gt; $label, 'shasum' =&gt; '');
}




public function getComposerInformation($identifier)
{
if (!isset($this-&gt;infoCache[$identifier])) {
$resource = $this-&gt;getScheme() . '://bitbucket.org/'.$this-&gt;owner.'/'.$this-&gt;repository.'/raw/'.$identifier.'/composer.json';
$composer = $this-&gt;getContents($resource);
if (!$composer) {
return;
}

$composer = JsonFile::parseJson($composer, $resource);

if (!isset($composer['time'])) {
$resource = $this-&gt;getScheme() . '://api.bitbucket.org/1.0/repositories/'.$this-&gt;owner.'/'.$this-&gt;repository.'/changesets/'.$identifier;
$changeset = JsonFile::parseJson($this-&gt;getContents($resource), $resource);
$composer['time'] = $changeset['timestamp'];
}
$this-&gt;infoCache[$identifier] = $composer;
}

return $this-&gt;infoCache[$identifier];
}




public function getTags()
{
if (null === $this-&gt;tags) {
$resource = $this-&gt;getScheme() . '://api.bitbucket.org/1.0/repositories/'.$this-&gt;owner.'/'.$this-&gt;repository.'/tags';
$tagsData = JsonFile::parseJson($this-&gt;getContents($resource), $resource);
$this-&gt;tags = array();
foreach ($tagsData as $tag =&gt; $data) {
$this-&gt;tags[$tag] = $data['raw_node'];
}
}

return $this-&gt;tags;
}




public function getBranches()
{
if (null === $this-&gt;branches) {
$resource = $this-&gt;getScheme() . '://api.bitbucket.org/1.0/repositories/'.$this-&gt;owner.'/'.$this-&gt;repository.'/branches';
$branchData = JsonFile::parseJson($this-&gt;getContents($resource), $resource);
$this-&gt;branches = array();
foreach ($branchData as $branch =&gt; $data) {
$this-&gt;branches[$branch] = $data['raw_node'];
}
}

return $this-&gt;branches;
}




public static function supports(IOInterface $io, $url, $deep = false)
{
if (!preg_match('#^https://bitbucket\.org/([^/]+)/(.+?)\.git$#', $url)) {
return false;
}

if (!extension_loaded('openssl')) {
if ($io-&gt;isVerbose()) {
$io-&gt;write('Skipping Bitbucket git driver for '.$url.' because the OpenSSL PHP extension is missing.');
}

return false;
}

return true;
}
}
&lt;?php











namespace Composer\Repository\Vcs;

use Composer\Json\JsonFile;
use Composer\Util\ProcessExecutor;
use Composer\Util\Filesystem;
use Composer\IO\IOInterface;




class GitDriver extends VcsDriver
{
protected $tags;
protected $branches;
protected $rootIdentifier;
protected $repoDir;
protected $infoCache = array();




public function initialize()
{
if (static::isLocalUrl($this-&gt;url)) {
$this-&gt;repoDir = str_replace('file://', '', $this-&gt;url);
} else {
$this-&gt;repoDir = $this-&gt;config-&gt;get('home') . '/cache.git/' . preg_replace('{[^a-z0-9.]}i', '-', $this-&gt;url) . '/';


 if (is_dir($this-&gt;repoDir) &amp;&amp; 0 === $this-&gt;process-&gt;execute('git remote', $output, $this-&gt;repoDir)) {
if (0 !== $this-&gt;process-&gt;execute('git remote update --prune origin', $output, $this-&gt;repoDir)) {
$this-&gt;io-&gt;write('&lt;error&gt;Failed to update '.$this-&gt;url.', package information from this repository may be outdated ('.$this-&gt;process-&gt;getErrorOutput().')&lt;/error&gt;');
}
} else {

 $fs = new Filesystem();
$fs-&gt;removeDirectory($this-&gt;repoDir);


 putenv('GIT_ASKPASS=echo');
$command = sprintf('git clone --mirror %s %s', escapeshellarg($this-&gt;url), escapeshellarg($this-&gt;repoDir));
if (0 !== $this-&gt;process-&gt;execute($command, $output)) {
$output = $this-&gt;process-&gt;getErrorOutput();

if (0 !== $this-&gt;process-&gt;execute('git --version', $ignoredOutput)) {
throw new \RuntimeException('Failed to clone '.$this-&gt;url.', git was not found, check that it is installed and in your PATH env.' . "\n\n" . $this-&gt;process-&gt;getErrorOutput());
}

throw new \RuntimeException('Failed to clone '.$this-&gt;url.', could not read packages from it' . "\n\n" .$output);
}
}
}

$this-&gt;getTags();
$this-&gt;getBranches();
}




public function getRootIdentifier()
{
if (null === $this-&gt;rootIdentifier) {
$this-&gt;rootIdentifier = 'master';


 $this-&gt;process-&gt;execute('git branch --no-color', $output, $this-&gt;repoDir);
$branches = $this-&gt;process-&gt;splitLines($output);
if (!in_array('* master', $branches)) {
foreach ($branches as $branch) {
if ($branch &amp;&amp; preg_match('{^\* +(\S+)}', $branch, $match)) {
$this-&gt;rootIdentifier = $match[1];
break;
}
}
}
}

return $this-&gt;rootIdentifier;
}




public function getUrl()
{
return $this-&gt;url;
}




public function getSource($identifier)
{
$label = array_search($identifier, (array) $this-&gt;tags) ?: $identifier;

return array('type' =&gt; 'git', 'url' =&gt; $this-&gt;getUrl(), 'reference' =&gt; $label);
}




public function getDist($identifier)
{
return null;
}




public function getComposerInformation($identifier)
{
if (!isset($this-&gt;infoCache[$identifier])) {
$resource = sprintf('%s:composer.json', escapeshellarg($identifier));
$this-&gt;process-&gt;execute(sprintf('git show %s', $resource), $composer, $this-&gt;repoDir);

if (!trim($composer)) {
return;
}

$composer = JsonFile::parseJson($composer, $resource);

if (!isset($composer['time'])) {
$this-&gt;process-&gt;execute(sprintf('git log -1 --format=%%at %s', escapeshellarg($identifier)), $output, $this-&gt;repoDir);
$date = new \DateTime('@'.trim($output));
$composer['time'] = $date-&gt;format('Y-m-d H:i:s');
}
$this-&gt;infoCache[$identifier] = $composer;
}

return $this-&gt;infoCache[$identifier];
}




public function getTags()
{
if (null === $this-&gt;tags) {
$this-&gt;process-&gt;execute('git tag', $output, $this-&gt;repoDir);
$output = $this-&gt;process-&gt;splitLines($output);
$this-&gt;tags = $output ? array_combine($output, $output) : array();
}

return $this-&gt;tags;
}




public function getBranches()
{
if (null === $this-&gt;branches) {
$branches = array();

$this-&gt;process-&gt;execute('git branch --no-color --no-abbrev -v', $output, $this-&gt;repoDir);
foreach ($this-&gt;process-&gt;splitLines($output) as $branch) {
if ($branch &amp;&amp; !preg_match('{^ *[^/]+/HEAD }', $branch)) {
if (preg_match('{^(?:\* )? *(?:[^/ ]+?/)?(\S+) *([a-f0-9]+) .*$}', $branch, $match)) {
$branches[$match[1]] = $match[2];
}
}
}

$this-&gt;branches = $branches;
}

return $this-&gt;branches;
}




public static function supports(IOInterface $io, $url, $deep = false)
{
if (preg_match('#(^git://|\.git$|git@|//git\.|//github.com/)#i', $url)) {
return true;
}


 if (static::isLocalUrl($url)) {
if (!is_dir($url)) {
throw new \RuntimeException('Directory does not exist: '.$url);
}

$process = new ProcessExecutor();
$url = str_replace('file://', '', $url);

 if ($process-&gt;execute('git tag', $output, $url) === 0) {
return true;
}
}

if (!$deep) {
return false;
}


 return false;
}
}
&lt;?php











namespace Composer\Repository\Vcs;

use Composer\Cache;
use Composer\Json\JsonFile;
use Composer\Util\ProcessExecutor;
use Composer\Util\Filesystem;
use Composer\Util\Svn as SvnUtil;
use Composer\IO\IOInterface;
use Composer\Downloader\TransportException;





class SvnDriver extends VcsDriver
{
protected $cache;
protected $baseUrl;
protected $tags;
protected $branches;
protected $infoCache = array();




private $util;




public function initialize()
{
$this-&gt;url = $this-&gt;baseUrl = rtrim(self::normalizeUrl($this-&gt;url), '/');

if (false !== ($pos = strrpos($this-&gt;url, '/trunk'))) {
$this-&gt;baseUrl = substr($this-&gt;url, 0, $pos);
}

$this-&gt;cache = new Cache($this-&gt;io, $this-&gt;config-&gt;get('home').'/cache.svn/'.preg_replace('{[^a-z0-9.]}i', '-', $this-&gt;baseUrl));

$this-&gt;getBranches();
$this-&gt;getTags();
}




public function getRootIdentifier()
{
return 'trunk';
}




public function getUrl()
{
return $this-&gt;url;
}




public function getSource($identifier)
{
return array('type' =&gt; 'svn', 'url' =&gt; $this-&gt;baseUrl, 'reference' =&gt; $identifier);
}




public function getDist($identifier)
{
return null;
}




public function getComposerInformation($identifier)
{
$identifier = '/' . trim($identifier, '/') . '/';

if ($res = $this-&gt;cache-&gt;read($identifier.'.json')) {
$this-&gt;infoCache[$identifier] = JsonFile::parseJson($res);
}

if (!isset($this-&gt;infoCache[$identifier])) {
preg_match('{^(.+?)(@\d+)?/$}', $identifier, $match);
if (!empty($match[2])) {
$path = $match[1];
$rev = $match[2];
} else {
$path = '';
$rev = '';
}

try {
$resource = $path.'composer.json';
$output = $this-&gt;execute('svn cat', $this-&gt;baseUrl . $resource . $rev);
if (!trim($output)) {
return;
}
} catch (\RuntimeException $e) {
throw new TransportException($e-&gt;getMessage());
}

$composer = JsonFile::parseJson($output, $this-&gt;baseUrl . $resource . $rev);

if (!isset($composer['time'])) {
$output = $this-&gt;execute('svn info', $this-&gt;baseUrl . $path . $rev);
foreach ($this-&gt;process-&gt;splitLines($output) as $line) {
if ($line &amp;&amp; preg_match('{^Last Changed Date: ([^(]+)}', $line, $match)) {
$date = new \DateTime($match[1]);
$composer['time'] = $date-&gt;format('Y-m-d H:i:s');
break;
}
}
}

$this-&gt;cache-&gt;write($identifier.'.json', json_encode($composer));
$this-&gt;infoCache[$identifier] = $composer;
}

return $this-&gt;infoCache[$identifier];
}




public function getTags()
{
if (null === $this-&gt;tags) {
$this-&gt;tags = array();

$output = $this-&gt;execute('svn ls --verbose', $this-&gt;baseUrl . '/tags');
if ($output) {
foreach ($this-&gt;process-&gt;splitLines($output) as $line) {
$line = trim($line);
if ($line &amp;&amp; preg_match('{^\s*(\S+).*?(\S+)\s*$}', $line, $match)) {
if (isset($match[1]) &amp;&amp; isset($match[2]) &amp;&amp; $match[2] !== './') {
$this-&gt;tags[rtrim($match[2], '/')] = '/tags/'.$match[2].'@'.$match[1];
}
}
}
}
}

return $this-&gt;tags;
}




public function getBranches()
{
if (null === $this-&gt;branches) {
$this-&gt;branches = array();

$output = $this-&gt;execute('svn ls --verbose', $this-&gt;baseUrl . '/');
if ($output) {
foreach ($this-&gt;process-&gt;splitLines($output) as $line) {
$line = trim($line);
if ($line &amp;&amp; preg_match('{^\s*(\S+).*?(\S+)\s*$}', $line, $match)) {
if (isset($match[1]) &amp;&amp; isset($match[2]) &amp;&amp; $match[2] === 'trunk/') {
$this-&gt;branches['trunk'] = '/trunk/@'.$match[1];
break;
}
}
}
}
unset($output);

$output = $this-&gt;execute('svn ls --verbose', $this-&gt;baseUrl . '/branches');
if ($output) {
foreach ($this-&gt;process-&gt;splitLines(trim($output)) as $line) {
$line = trim($line);
if ($line &amp;&amp; preg_match('{^\s*(\S+).*?(\S+)\s*$}', $line, $match)) {
if (isset($match[1]) &amp;&amp; isset($match[2]) &amp;&amp; $match[2] !== './') {
$this-&gt;branches[rtrim($match[2], '/')] = '/branches/'.$match[2].'@'.$match[1];
}
}
}
}
}

return $this-&gt;branches;
}




public static function supports(IOInterface $io, $url, $deep = false)
{
$url = self::normalizeUrl($url);
if (preg_match('#(^svn://|^svn\+ssh://|svn\.)#i', $url)) {
return true;
}


 if (!$deep &amp;&amp; !static::isLocalUrl($url)) {
return false;
}

$processExecutor = new ProcessExecutor();

$exit = $processExecutor-&gt;execute(
"svn info --non-interactive {$url}",
$ignoredOutput
);

if ($exit === 0) {

 return true;
}

if (false !== stripos($processExecutor-&gt;getErrorOutput(), 'authorization failed:')) {

 
 return true;
}

return false;
}








protected static function normalizeUrl($url)
{
$fs = new Filesystem();
if ($fs-&gt;isAbsolutePath($url)) {
return 'file://' . strtr($url, '\\', '/');
}

return $url;
}










protected function execute($command, $url)
{
if (null === $this-&gt;util) {
$this-&gt;util = new SvnUtil($this-&gt;baseUrl, $this-&gt;io, $this-&gt;process);
}

try {
return $this-&gt;util-&gt;execute($command, $url);
} catch (\RuntimeException $e) {
throw new \RuntimeException(
'Repository '.$this-&gt;url.' could not be processed, '.$e-&gt;getMessage()
);
}
}
}
&lt;?php











namespace Composer\Repository\Vcs;

use Composer\IO\IOInterface;




interface VcsDriverInterface
{



public function initialize();







public function getComposerInformation($identifier);






public function getRootIdentifier();






public function getBranches();






public function getTags();





public function getDist($identifier);





public function getSource($identifier);






public function getUrl();








public function hasComposerFile($identifier);









public static function supports(IOInterface $io, $url, $deep = false);
}
&lt;?php











namespace Composer\Repository\Vcs;

use Composer\Json\JsonFile;
use Composer\Util\ProcessExecutor;
use Composer\IO\IOInterface;




class HgDriver extends VcsDriver
{
protected $tags;
protected $branches;
protected $rootIdentifier;
protected $infoCache = array();




public function initialize()
{
$this-&gt;tmpDir = $this-&gt;config-&gt;get('home') . '/cache.hg/' . preg_replace('{[^a-z0-9]}i', '-', $this-&gt;url) . '/';

if (is_dir($this-&gt;tmpDir)) {
$this-&gt;process-&gt;execute(sprintf('cd %s &amp;&amp; hg pull -u', escapeshellarg($this-&gt;tmpDir)), $output);
} else {
$dir = dirname($this-&gt;tmpDir);
if (!is_dir($dir)) {
mkdir($dir, 0777, true);
}
$this-&gt;process-&gt;execute(sprintf('cd %s &amp;&amp; hg clone %s %s', escapeshellarg($dir), escapeshellarg($this-&gt;url), escapeshellarg($this-&gt;tmpDir)), $output);
}

$this-&gt;getTags();
$this-&gt;getBranches();
}




public function getRootIdentifier()
{
$tmpDir = escapeshellarg($this-&gt;tmpDir);
if (null === $this-&gt;rootIdentifier) {
$this-&gt;process-&gt;execute(sprintf('cd %s &amp;&amp; hg tip --template "{node}"', $tmpDir), $output);
$output = $this-&gt;process-&gt;splitLines($output);
$this-&gt;rootIdentifier = $output[0];
}

return $this-&gt;rootIdentifier;
}




public function getUrl()
{
return $this-&gt;url;
}




public function getSource($identifier)
{
$label = array_search($identifier, (array) $this-&gt;tags) ? : $identifier;

return array('type' =&gt; 'hg', 'url' =&gt; $this-&gt;getUrl(), 'reference' =&gt; $label);
}




public function getDist($identifier)
{
return null;
}




public function getComposerInformation($identifier)
{
if (!isset($this-&gt;infoCache[$identifier])) {
$this-&gt;process-&gt;execute(sprintf('cd %s &amp;&amp; hg cat -r %s composer.json', escapeshellarg($this-&gt;tmpDir), escapeshellarg($identifier)), $composer);

if (!trim($composer)) {
return;
}

$composer = JsonFile::parseJson($composer, $identifier);

if (!isset($composer['time'])) {
$this-&gt;process-&gt;execute(sprintf('cd %s &amp;&amp; hg log --template "{date|rfc822date}" -r %s', escapeshellarg($this-&gt;tmpDir), escapeshellarg($identifier)), $output);
$date = new \DateTime(trim($output));
$composer['time'] = $date-&gt;format('Y-m-d H:i:s');
}
$this-&gt;infoCache[$identifier] = $composer;
}

return $this-&gt;infoCache[$identifier];
}




public function getTags()
{
if (null === $this-&gt;tags) {
$tags = array();

$this-&gt;process-&gt;execute(sprintf('cd %s &amp;&amp; hg tags', escapeshellarg($this-&gt;tmpDir)), $output);
foreach ($this-&gt;process-&gt;splitLines($output) as $tag) {
if ($tag &amp;&amp; preg_match('(^([^\s]+)\s+\d+:(.*)$)', $tag, $match)) {
$tags[$match[1]] = $match[2];
}
}
unset($tags['tip']);

$this-&gt;tags = $tags;
}

return $this-&gt;tags;
}




public function getBranches()
{
if (null === $this-&gt;branches) {
$branches = array();

$this-&gt;process-&gt;execute(sprintf('cd %s &amp;&amp; hg branches', escapeshellarg($this-&gt;tmpDir)), $output);
foreach ($this-&gt;process-&gt;splitLines($output) as $branch) {
if ($branch &amp;&amp; preg_match('(^([^\s]+)\s+\d+:(.*)$)', $branch, $match)) {
$branches[$match[1]] = $match[2];
}
}

$this-&gt;branches = $branches;
}

return $this-&gt;branches;
}




public static function supports(IOInterface $io, $url, $deep = false)
{
if (preg_match('#(^(?:https?|ssh)://(?:[^@]@)?bitbucket.org|https://(?:.*?)\.kilnhg.com)#i', $url)) {
return true;
}

if (!$deep) {
return false;
}

$processExecutor = new ProcessExecutor();
$exit = $processExecutor-&gt;execute(sprintf('cd %s &amp;&amp; hg identify %s', escapeshellarg(sys_get_temp_dir()), escapeshellarg($url)), $ignored);

return $exit === 0;
}
}
&lt;?php











namespace Composer\Repository\Vcs;

use Composer\Downloader\TransportException;
use Composer\Config;
use Composer\IO\IOInterface;
use Composer\Util\ProcessExecutor;
use Composer\Util\RemoteFilesystem;






abstract class VcsDriver implements VcsDriverInterface
{
protected $url;
protected $originUrl;
protected $io;
protected $config;
protected $process;
protected $remoteFilesystem;










final public function __construct($url, IOInterface $io, Config $config, ProcessExecutor $process = null, $remoteFilesystem = null)
{
$this-&gt;url = $url;
$this-&gt;originUrl = $url;
$this-&gt;io = $io;
$this-&gt;config = $config;
$this-&gt;process = $process ?: new ProcessExecutor;
$this-&gt;remoteFilesystem = $remoteFilesystem ?: new RemoteFilesystem($io);
}




public function hasComposerFile($identifier)
{
try {
return (bool) $this-&gt;getComposerInformation($identifier);
} catch (TransportException $e) {
}

return false;
}








protected function getScheme()
{
if (extension_loaded('openssl')) {
return 'https';
}

return 'http';
}








protected function getContents($url)
{
return $this-&gt;remoteFilesystem-&gt;getContents($this-&gt;originUrl, $url, false);
}

protected static function isLocalUrl($url)
{
return (bool) preg_match('{^(file://|/|[a-z]:[\\\\/])}i', $url);
}
}
&lt;?php











namespace Composer\Repository\Vcs;

use Composer\Json\JsonFile;
use Composer\IO\IOInterface;




class HgBitbucketDriver extends VcsDriver
{
protected $owner;
protected $repository;
protected $tags;
protected $branches;
protected $rootIdentifier;
protected $infoCache = array();




public function initialize()
{
preg_match('#^https://bitbucket\.org/([^/]+)/([^/]+)/?$#', $this-&gt;url, $match);
$this-&gt;owner = $match[1];
$this-&gt;repository = $match[2];
$this-&gt;originUrl = 'bitbucket.org';
}




public function getRootIdentifier()
{
if (null === $this-&gt;rootIdentifier) {
$resource = $this-&gt;getScheme() . '://api.bitbucket.org/1.0/repositories/'.$this-&gt;owner.'/'.$this-&gt;repository.'/tags';
$repoData = JsonFile::parseJson($this-&gt;getContents($resource), $resource);
$this-&gt;rootIdentifier = $repoData['tip']['raw_node'];
}

return $this-&gt;rootIdentifier;
}




public function getUrl()
{
return $this-&gt;url;
}




public function getSource($identifier)
{
$label = array_search($identifier, $this-&gt;getTags()) ?: $identifier;

return array('type' =&gt; 'hg', 'url' =&gt; $this-&gt;getUrl(), 'reference' =&gt; $label);
}




public function getDist($identifier)
{
$label = array_search($identifier, $this-&gt;getTags()) ?: $identifier;
$url = $this-&gt;getScheme() . '://bitbucket.org/'.$this-&gt;owner.'/'.$this-&gt;repository.'/get/'.$label.'.zip';

return array('type' =&gt; 'zip', 'url' =&gt; $url, 'reference' =&gt; $label, 'shasum' =&gt; '');
}




public function getComposerInformation($identifier)
{
if (!isset($this-&gt;infoCache[$identifier])) {
$resource = $this-&gt;getScheme() . '://bitbucket.org/'.$this-&gt;owner.'/'.$this-&gt;repository.'/raw/'.$identifier.'/composer.json';
$composer = $this-&gt;getContents($resource);
if (!$composer) {
return;
}

$composer = JsonFile::parseJson($composer, $resource);

if (!isset($composer['time'])) {
$resource = $this-&gt;getScheme() . '://api.bitbucket.org/1.0/repositories/'.$this-&gt;owner.'/'.$this-&gt;repository.'/changesets/'.$identifier;
$changeset = JsonFile::parseJson($this-&gt;getContents($resource), $resource);
$composer['time'] = $changeset['timestamp'];
}
$this-&gt;infoCache[$identifier] = $composer;
}

return $this-&gt;infoCache[$identifier];
}




public function getTags()
{
if (null === $this-&gt;tags) {
$resource = $this-&gt;getScheme() . '://api.bitbucket.org/1.0/repositories/'.$this-&gt;owner.'/'.$this-&gt;repository.'/tags';
$tagsData = JsonFile::parseJson($this-&gt;getContents($resource), $resource);
$this-&gt;tags = array();
foreach ($tagsData as $tag =&gt; $data) {
$this-&gt;tags[$tag] = $data['raw_node'];
}
}

return $this-&gt;tags;
}




public function getBranches()
{
if (null === $this-&gt;branches) {
$resource = $this-&gt;getScheme() . '://api.bitbucket.org/1.0/repositories/'.$this-&gt;owner.'/'.$this-&gt;repository.'/branches';
$branchData = JsonFile::parseJson($this-&gt;getContents($resource), $resource);
$this-&gt;branches = array();
foreach ($branchData as $branch =&gt; $data) {
$this-&gt;branches[$branch] = $data['raw_node'];
}
}

return $this-&gt;branches;
}




public static function supports(IOInterface $io, $url, $deep = false)
{
if (!preg_match('#^https://bitbucket\.org/([^/]+)/([^/]+)/?$#', $url)) {
return false;
}

if (!extension_loaded('openssl')) {
if ($io-&gt;isVerbose()) {
$io-&gt;write('Skipping Bitbucket hg driver for '.$url.' because the OpenSSL PHP extension is missing.');
}

return false;
}

return true;
}
}
&lt;?php











namespace Composer\Repository;








class InstalledArrayRepository extends ArrayRepository implements InstalledRepositoryInterface
{



public function write()
{
}




public function reload()
{
}
}
&lt;?php











namespace Composer\Repository;

use Composer\Downloader\TransportException;
use Composer\Repository\Vcs\VcsDriverInterface;
use Composer\Package\Version\VersionParser;
use Composer\Package\Loader\ArrayLoader;
use Composer\Package\Loader\LoaderInterface;
use Composer\IO\IOInterface;
use Composer\Config;




class VcsRepository extends ArrayRepository
{
protected $url;
protected $packageName;
protected $verbose;
protected $io;
protected $config;
protected $versionParser;
protected $type;
protected $loader;

public function __construct(array $repoConfig, IOInterface $io, Config $config, array $drivers = null)
{
$this-&gt;drivers = $drivers ?: array(
'github' =&gt; 'Composer\Repository\Vcs\GitHubDriver',
'git-bitbucket' =&gt; 'Composer\Repository\Vcs\GitBitbucketDriver',
'git' =&gt; 'Composer\Repository\Vcs\GitDriver',
'svn' =&gt; 'Composer\Repository\Vcs\SvnDriver',
'hg-bitbucket' =&gt; 'Composer\Repository\Vcs\HgBitbucketDriver',
'hg' =&gt; 'Composer\Repository\Vcs\HgDriver',
);

$this-&gt;url = $repoConfig['url'];
$this-&gt;io = $io;
$this-&gt;type = isset($repoConfig['type']) ? $repoConfig['type'] : 'vcs';
$this-&gt;verbose = $io-&gt;isVerbose();
$this-&gt;config = $config;
}

public function setLoader(LoaderInterface $loader)
{
$this-&gt;loader = $loader;
}

public function getDriver()
{
if (isset($this-&gt;drivers[$this-&gt;type])) {
$class = $this-&gt;drivers[$this-&gt;type];
$driver = new $class($this-&gt;url, $this-&gt;io, $this-&gt;config);
$driver-&gt;initialize();

return $driver;
}

foreach ($this-&gt;drivers as $driver) {
if ($driver::supports($this-&gt;io, $this-&gt;url)) {
$driver = new $driver($this-&gt;url, $this-&gt;io, $this-&gt;config);
$driver-&gt;initialize();

return $driver;
}
}

foreach ($this-&gt;drivers as $driver) {
if ($driver::supports($this-&gt;io, $this-&gt;url, true)) {
$driver = new $driver($this-&gt;url, $this-&gt;io, $this-&gt;config);
$driver-&gt;initialize();

return $driver;
}
}
}

protected function initialize()
{
parent::initialize();

$verbose = $this-&gt;verbose;

$driver = $this-&gt;getDriver();
if (!$driver) {
throw new \InvalidArgumentException('No driver found to handle VCS repository '.$this-&gt;url);
}

$this-&gt;versionParser = new VersionParser;
if (!$this-&gt;loader) {
$this-&gt;loader = new ArrayLoader($this-&gt;versionParser);
}

try {
if ($driver-&gt;hasComposerFile($driver-&gt;getRootIdentifier())) {
$data = $driver-&gt;getComposerInformation($driver-&gt;getRootIdentifier());
$this-&gt;packageName = !empty($data['name']) ? $data['name'] : null;
}
} catch (\Exception $e) {
if ($verbose) {
$this-&gt;io-&gt;write('Skipped parsing '.$driver-&gt;getRootIdentifier().', '.$e-&gt;getMessage());
}
}

foreach ($driver-&gt;getTags() as $tag =&gt; $identifier) {
$msg = 'Reading composer.json of &lt;info&gt;' . ($this-&gt;packageName ?: $this-&gt;url) . '&lt;/info&gt; (&lt;comment&gt;' . $tag . '&lt;/comment&gt;)';
if ($verbose) {
$this-&gt;io-&gt;write($msg);
} else {
$this-&gt;io-&gt;overwrite($msg, false);
}


 $tag = str_replace('release-', '', $tag);

if (!$parsedTag = $this-&gt;validateTag($tag)) {
if ($verbose) {
$this-&gt;io-&gt;write('Skipped tag '.$tag.', invalid tag name');
}
continue;
}

try {
if (!$data = $driver-&gt;getComposerInformation($identifier)) {
if ($verbose) {
$this-&gt;io-&gt;write('Skipped tag '.$tag.', no composer file');
}
continue;
}


 if (isset($data['version'])) {
$data['version_normalized'] = $this-&gt;versionParser-&gt;normalize($data['version']);
} else {

 $data['version'] = $tag;
$data['version_normalized'] = $parsedTag;
}


 $data['version'] = preg_replace('{[.-]?dev$}i', '', $data['version']);
$data['version_normalized'] = preg_replace('{(^dev-|[.-]?dev$)}i', '', $data['version_normalized']);


 if ($data['version_normalized'] !== $parsedTag) {
if ($verbose) {
$this-&gt;io-&gt;write('Skipped tag '.$tag.', tag ('.$parsedTag.') does not match version ('.$data['version_normalized'].') in composer.json');
}
continue;
}

if ($verbose) {
$this-&gt;io-&gt;write('Importing tag '.$tag.' ('.$data['version_normalized'].')');
}

$this-&gt;addPackage($this-&gt;loader-&gt;load($this-&gt;preProcess($driver, $data, $identifier)));
} catch (\Exception $e) {
if ($verbose) {
$this-&gt;io-&gt;write('Skipped tag '.$tag.', '.($e instanceof TransportException ? 'no composer file was found' : $e-&gt;getMessage()));
}
continue;
}
}

$this-&gt;io-&gt;overwrite('', false);

foreach ($driver-&gt;getBranches() as $branch =&gt; $identifier) {
$msg = 'Reading composer.json of &lt;info&gt;' . ($this-&gt;packageName ?: $this-&gt;url) . '&lt;/info&gt; (&lt;comment&gt;' . $branch . '&lt;/comment&gt;)';
if ($verbose) {
$this-&gt;io-&gt;write($msg);
} else {
$this-&gt;io-&gt;overwrite($msg, false);
}

if (!$parsedBranch = $this-&gt;validateBranch($branch)) {
if ($verbose) {
$this-&gt;io-&gt;write('Skipped branch '.$branch.', invalid name');
}
continue;
}

try {
if (!$data = $driver-&gt;getComposerInformation($identifier)) {
if ($verbose) {
$this-&gt;io-&gt;write('Skipped branch '.$branch.', no composer file');
}
continue;
}


 $data['version'] = $branch;
$data['version_normalized'] = $parsedBranch;


 if ('dev-' === substr($parsedBranch, 0, 4) || '9999999-dev' === $parsedBranch) {
$data['version'] = 'dev-' . $data['version'];
} else {
$data['version'] = preg_replace('{(\.9{7})+}', '.x', $parsedBranch);
}

if ($verbose) {
$this-&gt;io-&gt;write('Importing branch '.$branch.' ('.$data['version'].')');
}

$this-&gt;addPackage($this-&gt;loader-&gt;load($this-&gt;preProcess($driver, $data, $identifier)));
} catch (TransportException $e) {
if ($verbose) {
$this-&gt;io-&gt;write('Skipped branch '.$branch.', no composer file was found');
}
continue;
} catch (\Exception $e) {
$this-&gt;io-&gt;write('Skipped branch '.$branch.', '.$e-&gt;getMessage());
continue;
}
}

$this-&gt;io-&gt;overwrite('', false);

if (!$this-&gt;getPackages()) {
throw new \RuntimeException('No composer.json was found in any branch or tag of '.$this-&gt;url.', could not load a package from it.');
}
}

private function preProcess(VcsDriverInterface $driver, array $data, $identifier)
{

 $data['name'] = $this-&gt;packageName ?: $data['name'];

if (!isset($data['dist'])) {
$data['dist'] = $driver-&gt;getDist($identifier);
}
if (!isset($data['source'])) {
$data['source'] = $driver-&gt;getSource($identifier);
}

return $data;
}

private function validateBranch($branch)
{
try {
return $this-&gt;versionParser-&gt;normalizeBranch($branch);
} catch (\Exception $e) {
}

return false;
}

private function validateTag($version)
{
try {
return $this-&gt;versionParser-&gt;normalize($version);
} catch (\Exception $e) {
}

return false;
}
}
&lt;?php











namespace Composer\Repository;

use Composer\Package\MemoryPackage;
use Composer\Package\Version\VersionParser;




class PlatformRepository extends ArrayRepository
{
protected function initialize()
{
parent::initialize();

$versionParser = new VersionParser();

try {
$prettyVersion = PHP_VERSION;
$version = $versionParser-&gt;normalize($prettyVersion);
} catch (\UnexpectedValueException $e) {
$prettyVersion = preg_replace('#^(.+?)(-.+)?$#', '$1', PHP_VERSION);
$version = $versionParser-&gt;normalize($prettyVersion);
}

$php = new MemoryPackage('php', $version, $prettyVersion);
$php-&gt;setDescription('The PHP interpreter');
parent::addPackage($php);

$loadedExtensions = get_loaded_extensions();


 foreach ($loadedExtensions as $name) {
if (in_array($name, array('standard', 'Core'))) {
continue;
}

$reflExt = new \ReflectionExtension($name);
try {
$prettyVersion = $reflExt-&gt;getVersion();
$version = $versionParser-&gt;normalize($prettyVersion);
} catch (\UnexpectedValueException $e) {
$prettyVersion = '0';
$version = $versionParser-&gt;normalize($prettyVersion);
}

$ext = new MemoryPackage('ext-'.$name, $version, $prettyVersion);
$ext-&gt;setDescription('The '.$name.' PHP extension');
parent::addPackage($ext);
}


 
 
 foreach ($loadedExtensions as $name) {
switch ($name) {
case 'curl':
$curlVersion = curl_version();
$prettyVersion = $curlVersion['version'];
break;

case 'iconv':
$prettyVersion = ICONV_VERSION;
break;

case 'libxml':
$prettyVersion = LIBXML_DOTTED_VERSION;
break;

case 'openssl':
$prettyVersion = preg_replace_callback('{^(?:OpenSSL\s*)?([0-9.]+)([a-z]?).*}', function ($match) {
return $match[1] . (empty($match[2]) ? '' : '.'.(ord($match[2]) - 96));
}, OPENSSL_VERSION_TEXT);
break;

case 'pcre':
$prettyVersion = preg_replace('{^(\S+).*}', '$1', PCRE_VERSION);
break;

case 'uuid':
$prettyVersion = phpversion('uuid');
break;

case 'xsl':
$prettyVersion = LIBXSLT_DOTTED_VERSION;
break;

default:

 continue 2;
}

try {
$version = $versionParser-&gt;normalize($prettyVersion);
} catch (\UnexpectedValueException $e) {
continue;
}

$lib = new MemoryPackage('lib-'.$name, $version, $prettyVersion);
$lib-&gt;setDescription('The '.$name.' PHP library');
parent::addPackage($lib);
}
}
}
&lt;?php











namespace Composer\Repository;






class InstalledFilesystemRepository extends FilesystemRepository implements InstalledRepositoryInterface
{
}
&lt;?php











namespace Composer\Repository;

use Composer\Package\PackageInterface;






class CompositeRepository implements RepositoryInterface
{




private $repositories;





public function __construct(array $repositories)
{
$this-&gt;repositories = $repositories;
}






public function getRepositories()
{
return $this-&gt;repositories;
}




public function hasPackage(PackageInterface $package)
{
foreach ($this-&gt;repositories as $repository) {

if ($repository-&gt;hasPackage($package)) {
return true;
}
}

return false;
}




public function findPackage($name, $version)
{
foreach ($this-&gt;repositories as $repository) {

$package = $repository-&gt;findPackage($name, $version);
if (null !== $package) {
return $package;
}
}

return null;
}




public function findPackages($name, $version = null)
{
$packages = array();
foreach ($this-&gt;repositories as $repository) {

$packages[] = $repository-&gt;findPackages($name, $version);
}

return call_user_func_array('array_merge', $packages);
}




public function getPackages()
{
$packages = array();
foreach ($this-&gt;repositories as $repository) {

$packages[] = $repository-&gt;getPackages();
}

return call_user_func_array('array_merge', $packages);
}




public function removePackage(PackageInterface $package)
{
foreach ($this-&gt;repositories as $repository) {

$repository-&gt;removePackage($package);
}
}




public function count()
{
$total = 0;
foreach ($this-&gt;repositories as $repository) {

$total += $repository-&gt;count();
}

return $total;
}





public function addRepository(RepositoryInterface $repository)
{
$this-&gt;repositories[] = $repository;
}
}
&lt;?php











namespace Composer\Repository;








interface InstalledRepositoryInterface extends WritableRepositoryInterface
{
}
&lt;?php











namespace Composer\Repository;

use Composer\Package\Loader\ArrayLoader;
use Composer\Package\PackageInterface;
use Composer\Json\JsonFile;
use Composer\Cache;
use Composer\Config;
use Composer\IO\IOInterface;
use Composer\Util\RemoteFilesystem;




class ComposerRepository extends ArrayRepository implements NotifiableRepositoryInterface
{
protected $config;
protected $url;
protected $io;
protected $packages;
protected $cache;
protected $notifyUrl;

public function __construct(array $repoConfig, IOInterface $io, Config $config)
{
if (!preg_match('{^\w+://}', $repoConfig['url'])) {

 $repoConfig['url'] = 'http://'.$repoConfig['url'];
}
$repoConfig['url'] = rtrim($repoConfig['url'], '/');
if (function_exists('filter_var') &amp;&amp; version_compare(PHP_VERSION, '5.3.3', '&gt;=') &amp;&amp; !filter_var($repoConfig['url'], FILTER_VALIDATE_URL)) {
throw new \UnexpectedValueException('Invalid url given for Composer repository: '.$repoConfig['url']);
}

$this-&gt;config = $config;
$this-&gt;url = $repoConfig['url'];
$this-&gt;io = $io;
$this-&gt;cache = new Cache($io, $config-&gt;get('home').'/cache/'.preg_replace('{[^a-z0-9.]}i', '-', $this-&gt;url));
}




public function notifyInstall(PackageInterface $package)
{
if (!$this-&gt;notifyUrl || !$this-&gt;config-&gt;get('notify-on-install')) {
return;
}


 $url = str_replace('%package%', $package-&gt;getPrettyName(), $this-&gt;notifyUrl);

$params = array(
'version' =&gt; $package-&gt;getPrettyVersion(),
'version_normalized' =&gt; $package-&gt;getVersion(),
);
$opts = array('http' =&gt;
array(
'method' =&gt; 'POST',
'header' =&gt; 'Content-type: application/x-www-form-urlencoded',
'content' =&gt; http_build_query($params, '', '&amp;'),
'timeout' =&gt; 3,
)
);

$context = stream_context_create($opts);
@file_get_contents($url, false, $context);
}

protected function initialize()
{
parent::initialize();

if (!extension_loaded('openssl') &amp;&amp; 'https' === substr($this-&gt;url, 0, 5)) {
throw new \RuntimeException('You must enable the openssl extension in your php.ini to load information from '.$this-&gt;url);
}

try {
$json = new JsonFile($this-&gt;url.'/packages.json', new RemoteFilesystem($this-&gt;io));
$data = $json-&gt;read();

if (!empty($data['notify'])) {
if ('/' === $data['notify'][0]) {
$this-&gt;notifyUrl = preg_replace('{(https?://[^/]+).*}i', '$1' . $data['notify'], $this-&gt;url);
} else {
$this-&gt;notifyUrl = $data['notify'];
}
}

$this-&gt;cache-&gt;write('packages.json', json_encode($data));
} catch (\Exception $e) {
if ($contents = $this-&gt;cache-&gt;read('packages.json')) {
$this-&gt;io-&gt;write('&lt;warning&gt;'.$this-&gt;url.' could not be loaded, package information was loaded from the local cache and may be out of date&lt;/warning&gt;');
$data = json_decode($contents, true);
} else {
throw $e;
}
}

$loader = new ArrayLoader();
$this-&gt;loadRepository($loader, $data);
}

protected function loadRepository(ArrayLoader $loader, $data)
{

 if (!isset($data['packages']) &amp;&amp; !isset($data['includes'])) {
foreach ($data as $pkg) {
foreach ($pkg['versions'] as $metadata) {
$this-&gt;addPackage($loader-&gt;load($metadata));
}
}

return;
}

if (isset($data['packages'])) {
foreach ($data['packages'] as $package =&gt; $versions) {
foreach ($versions as $version =&gt; $metadata) {
$this-&gt;addPackage($loader-&gt;load($metadata));
}
}
}

if (isset($data['includes'])) {
foreach ($data['includes'] as $include =&gt; $metadata) {
if ($this-&gt;cache-&gt;sha1($include) === $metadata['sha1']) {
$includedData = json_decode($this-&gt;cache-&gt;read($include), true);
} else {
$json = new JsonFile($this-&gt;url.'/'.$include, new RemoteFilesystem($this-&gt;io));
$includedData = $json-&gt;read();
$this-&gt;cache-&gt;write($include, json_encode($includedData));
}
$this-&gt;loadRepository($loader, $includedData);
}
}
}
}
&lt;?php











namespace Composer\Repository\Pear;






class DependencyInfo
{
private $requires;
private $optionals;





public function __construct($requires, $optionals)
{
$this-&gt;requires = $requires;
$this-&gt;optionals = $optionals;
}




public function getRequires()
{
return $this-&gt;requires;
}




public function getOptionals()
{
return $this-&gt;optionals;
}
}
&lt;?php











namespace Composer\Repository\Pear;






class PackageDependencyParser
{






public function buildDependencyInfo($depArray)
{
if (!is_array($depArray)) {
return new DependencyInfo(array(), array());
}
if (!$this-&gt;isHash($depArray)) {
return new DependencyInfo($this-&gt;buildDependency10Info($depArray), array());
}

return $this-&gt;buildDependency20Info($depArray);
}













private function buildDependency10Info($depArray)
{
static $dep10toOperatorMap = array('has'=&gt;'==', 'eq' =&gt; '==', 'ge' =&gt; '&gt;=', 'gt' =&gt; '&gt;', 'le' =&gt; '&lt;=', 'lt' =&gt; '&lt;', 'not' =&gt; '!=');

$result = array();

foreach ($depArray as $depItem) {
if (empty($depItem['rel']) || !array_key_exists($depItem['rel'], $dep10toOperatorMap)) {

 continue;
}

$depType = !empty($depItem['optional']) &amp;&amp; 'yes' == $depItem['optional']
? 'optional'
: 'required';
$depType = 'not' == $depItem['rel']
? 'conflicts'
: $depType;

$depVersion = !empty($depItem['version']) ? $this-&gt;parseVersion($depItem['version']) : '*';


 $depVersionConstraint = ('has' == $depItem['rel'] || 'not' == $depItem['rel']) &amp;&amp; '*' == $depVersion
? '*'
: $dep10toOperatorMap[$depItem['rel']] . $depVersion;

switch ($depItem['type']) {
case 'php':
$depChannelName = 'php';
$depPackageName = '';
break;
case 'pkg':
$depChannelName = !empty($depItem['channel']) ? $depItem['channel'] : 'pear.php.net';
$depPackageName = $depItem['name'];
break;
case 'ext':
$depChannelName = 'ext';
$depPackageName = $depItem['name'];
break;
case 'os':
case 'sapi':
$depChannelName = '';
$depPackageName = '';
break;
default:
$depChannelName = '';
$depPackageName = '';
break;
}

if ('' != $depChannelName) {
$result[] = new DependencyConstraint(
$depType,
$depVersionConstraint,
$depChannelName,
$depPackageName
);
}
}

return $result;
}







private function buildDependency20Info($depArray)
{
$result = array();
$optionals = array();
$defaultOptionals = array();
foreach ($depArray as $depType =&gt; $depTypeGroup) {
if (!is_array($depTypeGroup)) {
continue;
}
if ('required' == $depType || 'optional' == $depType) {
foreach ($depTypeGroup as $depItemType =&gt; $depItem) {
switch ($depItemType) {
case 'php':
$result[] = new DependencyConstraint(
$depType,
$this-&gt;parse20VersionConstraint($depItem),
'php',
''
);
break;
case 'package':
$deps = $this-&gt;buildDepPackageConstraints($depItem, $depType);
$result = array_merge($result, $deps);
break;
case 'extension':
$deps = $this-&gt;buildDepExtensionConstraints($depItem, $depType);
$result = array_merge($result, $deps);
break;
case 'subpackage':
$deps = $this-&gt;buildDepPackageConstraints($depItem, 'replaces');
$defaultOptionals += $deps;
break;
case 'os':
case 'pearinstaller':
break;
default:
break;
}
}
} elseif ('group' == $depType) {
if ($this-&gt;isHash($depTypeGroup)) {
$depTypeGroup = array($depTypeGroup);
}

foreach ($depTypeGroup as $depItem) {
$groupName = $depItem['attribs']['name'];
if (!isset($optionals[$groupName])) {
$optionals[$groupName] = array();
}

if (isset($depItem['subpackage'])) {
$optionals[$groupName] += $this-&gt;buildDepPackageConstraints($depItem['subpackage'], 'replaces');
} else {
$result += $this-&gt;buildDepPackageConstraints($depItem['package'], 'optional');
}
}
}
}

if (count($defaultOptionals) &gt; 0) {
$optionals['*'] = $defaultOptionals;
}

return new DependencyInfo($result, $optionals);
}








private function buildDepExtensionConstraints($depItem, $depType)
{
if ($this-&gt;isHash($depItem)) {
$depItem = array($depItem);
}

$result = array();
foreach ($depItem as $subDepItem) {
$depChannelName = 'ext';
$depPackageName = $subDepItem['name'];
$depVersionConstraint = $this-&gt;parse20VersionConstraint($subDepItem);

$result[] = new DependencyConstraint(
$depType,
$depVersionConstraint,
$depChannelName,
$depPackageName
);
}

return $result;
}








private function buildDepPackageConstraints($depItem, $depType)
{
if ($this-&gt;isHash($depItem)) {
$depItem = array($depItem);
}

$result = array();
foreach ($depItem as $subDepItem) {
$depChannelName = $subDepItem['channel'];
$depPackageName = $subDepItem['name'];
$depVersionConstraint = $this-&gt;parse20VersionConstraint($subDepItem);
if (isset($subDepItem['conflicts'])) {
$depType = 'conflicts';
}

$result[] = new DependencyConstraint(
$depType,
$depVersionConstraint,
$depChannelName,
$depPackageName
);
}

return $result;
}







private function parse20VersionConstraint(array $data)
{
static $dep20toOperatorMap = array('has'=&gt;'==', 'min' =&gt; '&gt;=', 'max' =&gt; '&lt;=', 'exclude' =&gt; '!=');

$versions = array();
$values = array_intersect_key($data, $dep20toOperatorMap);
if (0 == count($values)) {
return '*';
}
if (isset($values['min']) &amp;&amp; isset($values['exclude']) &amp;&amp; $data['min'] == $data['exclude']) {
$versions[] = '&gt;' . $this-&gt;parseVersion($values['min']);
} elseif (isset($values['max']) &amp;&amp; isset($values['exclude']) &amp;&amp; $data['max'] == $data['exclude']) {
$versions[] = '&lt;' . $this-&gt;parseVersion($values['max']);
} else {
foreach ($values as $op =&gt; $version) {
if ('exclude' == $op &amp;&amp; is_array($version)) {
foreach ($version as $versionPart) {
$versions[] = $dep20toOperatorMap[$op] . $this-&gt;parseVersion($versionPart);
}
} else {
$versions[] = $dep20toOperatorMap[$op] . $this-&gt;parseVersion($version);
}
}
}

return implode(',', $versions);
}







private function parseVersion($version)
{
if (preg_match('{^v?(\d{1,3})(\.\d+)?(\.\d+)?(\.\d+)?}i', $version, $matches)) {
$version = $matches[1]
.(!empty($matches[2]) ? $matches[2] : '.0')
.(!empty($matches[3]) ? $matches[3] : '.0')
.(!empty($matches[4]) ? $matches[4] : '.0');

return $version;
}

return null;
}







private function isHash(array $array)
{
return !array_key_exists(1, $array) &amp;&amp; !array_key_exists(0, $array);
}
}
&lt;?php











namespace Composer\Repository\Pear;






class ChannelInfo
{
private $name;
private $alias;
private $packages;






public function __construct($name, $alias, array $packages)
{
$this-&gt;name = $name;
$this-&gt;alias = $alias;
$this-&gt;packages = $packages;
}






public function getName()
{
return $this-&gt;name;
}






public function getAlias()
{
return $this-&gt;alias;
}






public function getPackages()
{
return $this-&gt;packages;
}
}
&lt;?php











namespace Composer\Repository\Pear;

use Composer\Util\RemoteFilesystem;








class ChannelReader extends BaseChannelReader
{

private $readerMap;

public function __construct(RemoteFilesystem $rfs)
{
parent::__construct($rfs);

$rest10reader = new ChannelRest10Reader($rfs);
$rest11reader = new ChannelRest11Reader($rfs);

$this-&gt;readerMap = array(
'REST1.3' =&gt; $rest11reader,
'REST1.2' =&gt; $rest11reader,
'REST1.1' =&gt; $rest11reader,
'REST1.0' =&gt; $rest10reader,
);
}







public function read($url)
{
$xml = $this-&gt;requestXml($url, "/channel.xml");

$channelName = (string) $xml-&gt;name;
$channelSummary = (string) $xml-&gt;summary;
$channelAlias = (string) $xml-&gt;suggestedalias;

$supportedVersions = array_keys($this-&gt;readerMap);
$selectedRestVersion = $this-&gt;selectRestVersion($xml, $supportedVersions);
if (!$selectedRestVersion) {
throw new \UnexpectedValueException(sprintf('PEAR repository %s does not supports any of %s protocols.', $url, implode(', ', $supportedVersions)));
}

$reader = $this-&gt;readerMap[$selectedRestVersion['version']];
$packageDefinitions = $reader-&gt;read($selectedRestVersion['baseUrl']);

return new ChannelInfo($channelName, $channelAlias, $packageDefinitions);
}








private function selectRestVersion($channelXml, $supportedVersions)
{
$channelXml-&gt;registerXPathNamespace('ns', self::CHANNEL_NS);

foreach ($supportedVersions as $version) {
$xpathTest = "ns:servers/ns:primary/ns:rest/ns:baseurl[@type='{$version}']";
$testResult = $channelXml-&gt;xpath($xpathTest);
if (count($testResult) &gt; 0) {
return array('version' =&gt; $version, 'baseUrl' =&gt; (string) $testResult[0]);
}
}

return null;
}
}
&lt;?php











namespace Composer\Repository\Pear;






class PackageInfo
{
private $channelName;
private $packageName;
private $license;
private $shortDescription;
private $description;
private $releases;









public function __construct($channelName, $packageName, $license, $shortDescription, $description, $releases)
{
$this-&gt;channelName = $channelName;
$this-&gt;packageName = $packageName;
$this-&gt;license = $license;
$this-&gt;shortDescription = $shortDescription;
$this-&gt;description = $description;
$this-&gt;releases = $releases;
}




public function getChannelName()
{
return $this-&gt;channelName;
}




public function getPackageName()
{
return $this-&gt;packageName;
}




public function getDescription()
{
return $this-&gt;description;
}




public function getShortDescription()
{
return $this-&gt;shortDescription;
}




public function getLicense()
{
return $this-&gt;license;
}




public function getReleases()
{
return $this-&gt;releases;
}
}
&lt;?php











namespace Composer\Repository\Pear;






class DependencyConstraint
{
private $type;
private $constraint;
private $channelName;
private $packageName;







public function __construct($type, $constraint, $channelName, $packageName)
{
$this-&gt;type = $type;
$this-&gt;constraint = $constraint;
$this-&gt;channelName = $channelName;
$this-&gt;packageName = $packageName;
}

public function getChannelName()
{
return $this-&gt;channelName;
}

public function getConstraint()
{
return $this-&gt;constraint;
}

public function getPackageName()
{
return $this-&gt;packageName;
}

public function getType()
{
return $this-&gt;type;
}
}
&lt;?php











namespace Composer\Repository\Pear;










class ChannelRest11Reader extends BaseChannelReader
{
private $dependencyReader;

public function __construct($rfs)
{
parent::__construct($rfs);

$this-&gt;dependencyReader = new PackageDependencyParser();
}








public function read($baseUrl)
{
return $this-&gt;readChannelPackages($baseUrl);
}








private function readChannelPackages($baseUrl)
{
$result = array();

$xml = $this-&gt;requestXml($baseUrl, "/c/categories.xml");
$xml-&gt;registerXPathNamespace('ns', self::ALL_CATEGORIES_NS);
foreach ($xml-&gt;xpath('ns:c') as $node) {
$categoryName = (string) $node;
$categoryPackages = $this-&gt;readCategoryPackages($baseUrl, $categoryName);
$result = array_merge($result, $categoryPackages);
}

return $result;
}









private function readCategoryPackages($baseUrl, $categoryName)
{
$result = array();

$categoryPath = '/c/'.urlencode($categoryName).'/packagesinfo.xml';
$xml = $this-&gt;requestXml($baseUrl, $categoryPath);
$xml-&gt;registerXPathNamespace('ns', self::CATEGORY_PACKAGES_INFO_NS);
foreach ($xml-&gt;xpath('ns:pi') as $node) {
$packageInfo = $this-&gt;parsePackage($node);
$result[] = $packageInfo;
}

return $result;
}







private function parsePackage($packageInfo)
{
$packageInfo-&gt;registerXPathNamespace('ns', self::CATEGORY_PACKAGES_INFO_NS);
$channelName = (string) $packageInfo-&gt;p-&gt;c;
$packageName = (string) $packageInfo-&gt;p-&gt;n;
$license = (string) $packageInfo-&gt;p-&gt;l;
$shortDescription = (string) $packageInfo-&gt;p-&gt;s;
$description = (string) $packageInfo-&gt;p-&gt;d;

$dependencies = array();
foreach ($packageInfo-&gt;xpath('ns:deps') as $node) {
$dependencyVersion = (string) $node-&gt;v;
$dependencyArray = unserialize((string) $node-&gt;d);

$dependencyInfo = $this-&gt;dependencyReader-&gt;buildDependencyInfo($dependencyArray);

$dependencies[$dependencyVersion] = $dependencyInfo;
}

$releases = array();
$releasesInfo = $packageInfo-&gt;xpath('ns:a/ns:r');
if ($releasesInfo) {
foreach ($releasesInfo as $node) {
$releaseVersion = (string) $node-&gt;v;
$releaseStability = (string) $node-&gt;s;
$releases[$releaseVersion] = new ReleaseInfo(
$releaseStability,
isset($dependencies[$releaseVersion]) ? $dependencies[$releaseVersion] : new DependencyInfo(array(), array())
);
}
}

return new PackageInfo(
$channelName,
$packageName,
$license,
$shortDescription,
$description,
$releases
);
}
}
&lt;?php











namespace Composer\Repository\Pear;






class ReleaseInfo
{
private $stability;
private $dependencyInfo;





public function __construct($stability, $dependencyInfo)
{
$this-&gt;stability = $stability;
$this-&gt;dependencyInfo = $dependencyInfo;
}




public function getDependencyInfo()
{
return $this-&gt;dependencyInfo;
}




public function getStability()
{
return $this-&gt;stability;
}
}
&lt;?php











namespace Composer\Repository\Pear;

use Composer\Util\RemoteFilesystem;








abstract class BaseChannelReader
{



const CHANNEL_NS = 'http://pear.php.net/channel-1.0';
const ALL_CATEGORIES_NS = 'http://pear.php.net/dtd/rest.allcategories';
const CATEGORY_PACKAGES_INFO_NS = 'http://pear.php.net/dtd/rest.categorypackageinfo';
const ALL_PACKAGES_NS = 'http://pear.php.net/dtd/rest.allpackages';
const ALL_RELEASES_NS = 'http://pear.php.net/dtd/rest.allreleases';
const PACKAGE_INFO_NS = 'http://pear.php.net/dtd/rest.package';


private $rfs;

protected function __construct(RemoteFilesystem $rfs)
{
$this-&gt;rfs = $rfs;
}








protected function requestContent($origin, $path)
{
$url = rtrim($origin, '/') . '/' . ltrim($path, '/');
$content = $this-&gt;rfs-&gt;getContents($origin, $url, false);
if (!$content) {
throw new \UnexpectedValueException('The PEAR channel at ' . $url . ' did not respond.');
}

return $content;
}








protected function requestXml($origin, $path)
{

 $xml = simplexml_load_string($this-&gt;requestContent($origin, $path), "SimpleXMLElement", LIBXML_NOERROR);

if (false == $xml) {
$url = rtrim($origin, '/') . '/' . ltrim($path, '/');
throw new \UnexpectedValueException(sprintf('The PEAR channel at ' . $origin . ' is broken. (Invalid XML at file `%s`)', $path));
}

return $xml;
}
}
&lt;?php











namespace Composer\Repository\Pear;

use Composer\Downloader\TransportException;












class ChannelRest10Reader extends BaseChannelReader
{
private $dependencyReader;

public function __construct($rfs)
{
parent::__construct($rfs);

$this-&gt;dependencyReader = new PackageDependencyParser();
}








public function read($baseUrl)
{
return $this-&gt;readPackages($baseUrl);
}








private function readPackages($baseUrl)
{
$result = array();

$xmlPath = '/p/packages.xml';
$xml = $this-&gt;requestXml($baseUrl, $xmlPath);
$xml-&gt;registerXPathNamespace('ns', self::ALL_PACKAGES_NS);
foreach ($xml-&gt;xpath('ns:p') as $node) {
$packageName = (string) $node;
$packageInfo = $this-&gt;readPackage($baseUrl, $packageName);
$result[] = $packageInfo;
}

return $result;
}









private function readPackage($baseUrl, $packageName)
{
$xmlPath = '/p/' . strtolower($packageName) . '/info.xml';
$xml = $this-&gt;requestXml($baseUrl, $xmlPath);
$xml-&gt;registerXPathNamespace('ns', self::PACKAGE_INFO_NS);

$channelName = (string) $xml-&gt;c;
$packageName = (string) $xml-&gt;n;
$license = (string) $xml-&gt;l;
$shortDescription = (string) $xml-&gt;s;
$description = (string) $xml-&gt;d;

return new PackageInfo(
$channelName,
$packageName,
$license,
$shortDescription,
$description,
$this-&gt;readPackageReleases($baseUrl, $packageName)
);
}









private function readPackageReleases($baseUrl, $packageName)
{
$result = array();

try {
$xmlPath = '/r/' . strtolower($packageName) . '/allreleases.xml';
$xml = $this-&gt;requestXml($baseUrl, $xmlPath);
$xml-&gt;registerXPathNamespace('ns', self::ALL_RELEASES_NS);
foreach ($xml-&gt;xpath('ns:r') as $node) {
$releaseVersion = (string) $node-&gt;v;
$releaseStability = (string) $node-&gt;s;

try {
$result[$releaseVersion] = new ReleaseInfo(
$releaseStability,
$this-&gt;readPackageReleaseDependencies($baseUrl, $packageName, $releaseVersion)
);
} catch (TransportException $exception) {
if ($exception-&gt;getCode() != 404) {
throw $exception;
}
}
}
} catch (TransportException $exception) {
if ($exception-&gt;getCode() != 404) {
throw $exception;
}
}

return $result;
}










private function readPackageReleaseDependencies($baseUrl, $packageName, $version)
{
$dependencyReader = new PackageDependencyParser();

$depthPath = '/r/' . strtolower($packageName) . '/deps.' . $version . '.txt';
$content = $this-&gt;requestContent($baseUrl, $depthPath);
$dependencyArray = unserialize($content);
$result = $dependencyReader-&gt;buildDependencyInfo($dependencyArray);

return $result;
}
}
&lt;?php











namespace Composer\Repository;

use Composer\Package\PackageInterface;







interface RepositoryInterface extends \Countable
{







public function hasPackage(PackageInterface $package);









public function findPackage($name, $version);









public function findPackages($name, $version = null);






public function getPackages();
}
&lt;?php











namespace Composer\Repository;

use Composer\Package\Loader\ArrayLoader;






class PackageRepository extends ArrayRepository
{
private $config;






public function __construct(array $config)
{
$this-&gt;config = $config['package'];


 if (!is_numeric(key($this-&gt;config))) {
$this-&gt;config = array($this-&gt;config);
}
}




protected function initialize()
{
parent::initialize();

$loader = new ArrayLoader();
foreach ($this-&gt;config as $package) {
$package = $loader-&gt;load($package);
$this-&gt;addPackage($package);
}
}
}
&lt;?php











namespace Composer\Repository;

use Composer\Package\PackageInterface;




interface NotifiableRepositoryInterface extends RepositoryInterface
{





public function notifyInstall(PackageInterface $package);
}
&lt;?php











namespace Composer\Package\Dumper;

use Composer\Package\BasePackage;
use Composer\Package\PackageInterface;





class ArrayDumper
{
public function dump(PackageInterface $package)
{
$keys = array(
'binaries' =&gt; 'bin',
'scripts',
'type',
'extra',
'installationSource' =&gt; 'installation-source',
'license',
'authors',
'description',
'homepage',
'keywords',
'autoload',
'repositories',
'includePaths' =&gt; 'include-path',
'support',
);

$data = array();
$data['name'] = $package-&gt;getPrettyName();
$data['version'] = $package-&gt;getPrettyVersion();
$data['version_normalized'] = $package-&gt;getVersion();

if ($package-&gt;getTargetDir()) {
$data['target-dir'] = $package-&gt;getTargetDir();
}

if ($package-&gt;getReleaseDate()) {
$data['time'] = $package-&gt;getReleaseDate()-&gt;format('Y-m-d H:i:s');
}

if ($package-&gt;getSourceType()) {
$data['source']['type'] = $package-&gt;getSourceType();
$data['source']['url'] = $package-&gt;getSourceUrl();
$data['source']['reference'] = $package-&gt;getSourceReference();
}

if ($package-&gt;getDistType()) {
$data['dist']['type'] = $package-&gt;getDistType();
$data['dist']['url'] = $package-&gt;getDistUrl();
$data['dist']['reference'] = $package-&gt;getDistReference();
$data['dist']['shasum'] = $package-&gt;getDistSha1Checksum();
}

foreach (BasePackage::$supportedLinkTypes as $type =&gt; $opts) {
if ($links = $package-&gt;{'get'.ucfirst($opts['method'])}()) {
foreach ($links as $link) {
$data[$type][$link-&gt;getTarget()] = $link-&gt;getPrettyConstraint();
}
}
}

if ($packages = $package-&gt;getSuggests()) {
$data['suggest'] = $packages;
}

foreach ($keys as $method =&gt; $key) {
if (is_numeric($method)) {
$method = $key;
}

$getter = 'get'.ucfirst($method);
$value = $package-&gt;$getter();

if (null !== $value &amp;&amp; !(is_array($value) &amp;&amp; 0 === count($value))) {
$data[$key] = $value;
}
}

return $data;
}
}
&lt;?php











namespace Composer\Package\Loader;

use Composer\Json\JsonFile;




class JsonLoader
{
private $loader;

public function __construct(LoaderInterface $loader)
{
$this-&gt;loader = $loader;
}





public function load($json)
{
if ($json instanceof JsonFile) {
$config = $json-&gt;read();
} elseif (file_exists($json)) {
$config = JsonFile::parseJson(file_get_contents($json), $json);
} elseif (is_string($json)) {
$config = JsonFile::parseJson($json);
}

return $this-&gt;loader-&gt;load($config);
}
}
&lt;?php











namespace Composer\Package\Loader;






interface LoaderInterface
{






public function load(array $package);
}
&lt;?php











namespace Composer\Package\Loader;

use Composer\Package;
use Composer\Package\Version\VersionParser;





class ArrayLoader implements LoaderInterface
{
protected $versionParser;

public function __construct(VersionParser $parser = null)
{
if (!$parser) {
$parser = new VersionParser;
}
$this-&gt;versionParser = $parser;
}

public function load(array $config)
{
if (!isset($config['name'])) {
throw new \UnexpectedValueException('Unknown package has no name defined ('.json_encode($config).').');
}
if (!isset($config['version'])) {
throw new \UnexpectedValueException('Package '.$config['name'].' has no version defined.');
}


 if (isset($config['version_normalized'])) {
$version = $config['version_normalized'];
} else {
$version = $this-&gt;versionParser-&gt;normalize($config['version']);
}
$package = new Package\MemoryPackage($config['name'], $version, $config['version']);
$package-&gt;setType(isset($config['type']) ? strtolower($config['type']) : 'library');

if (isset($config['target-dir'])) {
$package-&gt;setTargetDir($config['target-dir']);
}

if (isset($config['extra']) &amp;&amp; is_array($config['extra'])) {
$package-&gt;setExtra($config['extra']);
}

if (isset($config['bin'])) {
if (!is_array($config['bin'])) {
throw new \UnexpectedValueException('Package '.$config['name'].'\'s bin key should be an array, '.gettype($config['bin']).' given.');
}
foreach ($config['bin'] as $key =&gt; $bin) {
$config['bin'][$key]= ltrim($bin, '/');
}
$package-&gt;setBinaries($config['bin']);
}

if (isset($config['scripts']) &amp;&amp; is_array($config['scripts'])) {
foreach ($config['scripts'] as $event =&gt; $listeners) {
$config['scripts'][$event]= (array) $listeners;
}
$package-&gt;setScripts($config['scripts']);
}

if (!empty($config['description']) &amp;&amp; is_string($config['description'])) {
$package-&gt;setDescription($config['description']);
}

if (!empty($config['homepage']) &amp;&amp; is_string($config['homepage'])) {
$package-&gt;setHomepage($config['homepage']);
}

if (!empty($config['keywords']) &amp;&amp; is_array($config['keywords'])) {
$package-&gt;setKeywords($config['keywords']);
}

if (!empty($config['license'])) {
$package-&gt;setLicense(is_array($config['license']) ? $config['license'] : array($config['license']));
}

if (!empty($config['time'])) {
try {
$date = new \DateTime($config['time']);
$date-&gt;setTimezone(new \DateTimeZone('UTC'));
$package-&gt;setReleaseDate($date);
} catch (\Exception $e) {
}
}

if (!empty($config['authors']) &amp;&amp; is_array($config['authors'])) {
$package-&gt;setAuthors($config['authors']);
}

if (isset($config['installation-source'])) {
$package-&gt;setInstallationSource($config['installation-source']);
}

if (isset($config['source'])) {
if (!isset($config['source']['type']) || !isset($config['source']['url'])) {
throw new \UnexpectedValueException(sprintf(
"package source should be specified as {\"type\": ..., \"url\": ...},\n%s given",
json_encode($config['source'])
));
}
$package-&gt;setSourceType($config['source']['type']);
$package-&gt;setSourceUrl($config['source']['url']);
$package-&gt;setSourceReference($config['source']['reference']);
}

if (isset($config['dist'])) {
if (!isset($config['dist']['type'])
|| !isset($config['dist']['url'])) {
throw new \UnexpectedValueException(sprintf(
"package dist should be specified as ".
"{\"type\": ..., \"url\": ..., \"reference\": ..., \"shasum\": ...},\n%s given",
json_encode($config['dist'])
));
}
$package-&gt;setDistType($config['dist']['type']);
$package-&gt;setDistUrl($config['dist']['url']);
$package-&gt;setDistReference(isset($config['dist']['reference']) ? $config['dist']['reference'] : null);
$package-&gt;setDistSha1Checksum(isset($config['dist']['shasum']) ? $config['dist']['shasum'] : null);
}


 if ('dev-' === substr($package-&gt;getPrettyVersion(), 0, 4) &amp;&amp; isset($config['extra']['branch-alias']) &amp;&amp; is_array($config['extra']['branch-alias'])) {
foreach ($config['extra']['branch-alias'] as $sourceBranch =&gt; $targetBranch) {

 if ('-dev' !== substr($targetBranch, -4)) {
continue;
}

 $validatedTargetBranch = $this-&gt;versionParser-&gt;normalizeBranch(substr($targetBranch, 0, -4));
if ('-dev' !== substr($validatedTargetBranch, -4)) {
continue;
}


 if (strtolower($package-&gt;getPrettyVersion()) !== strtolower($sourceBranch)) {
continue;
}

$package-&gt;setAlias($validatedTargetBranch);
$package-&gt;setPrettyAlias(preg_replace('{(\.9{7})+}', '.x', $validatedTargetBranch));
break;
}
}

foreach (Package\BasePackage::$supportedLinkTypes as $type =&gt; $opts) {
if (isset($config[$type])) {
$method = 'set'.ucfirst($opts['method']);
$package-&gt;{$method}(
$this-&gt;loadLinksFromConfig($package, $opts['description'], $config[$type])
);
}
}

if (isset($config['suggest']) &amp;&amp; is_array($config['suggest'])) {
foreach ($config['suggest'] as $target =&gt; $reason) {
if ('self.version' === trim($reason)) {
$config['suggest'][$target] = $package-&gt;getPrettyVersion();
}
}
$package-&gt;setSuggests($config['suggest']);
}

if (isset($config['autoload'])) {
$package-&gt;setAutoload($config['autoload']);
}

if (isset($config['include-path'])) {
$package-&gt;setIncludePaths($config['include-path']);
}

if (isset($config['support'])) {
$package-&gt;setSupport($config['support']);
}

return $package;
}

private function loadLinksFromConfig($package, $description, array $linksSpecs)
{
$links = array();
foreach ($linksSpecs as $packageName =&gt; $constraint) {
if ('self.version' === $constraint) {
$parsedConstraint = $this-&gt;versionParser-&gt;parseConstraints($package-&gt;getPrettyVersion());
} else {
$parsedConstraint = $this-&gt;versionParser-&gt;parseConstraints($constraint);
}
$links[] = new Package\Link($package-&gt;getName(), $packageName, $parsedConstraint, $description, $constraint);
}

return $links;
}
}
&lt;?php











namespace Composer\Package\Loader;

use Composer\Package;
use Composer\Package\Version\VersionParser;




class ValidatingArrayLoader implements LoaderInterface
{
private $loader;
private $versionParser;
private $ignoreErrors;
private $errors = array();
private $config;

public function __construct(LoaderInterface $loader, $ignoreErrors = true, VersionParser $parser = null)
{
$this-&gt;loader = $loader;
$this-&gt;ignoreErrors = $ignoreErrors;
if (!$parser) {
$parser = new VersionParser();
}
$this-&gt;versionParser = $parser;
}

public function load(array $config)
{
$this-&gt;config = $config;

$this-&gt;validateRegex('name', '[A-Za-z0-9][A-Za-z0-9_.-]*/[A-Za-z0-9][A-Za-z0-9_.-]*', true);

if (!empty($config['version'])) {
try {
$this-&gt;versionParser-&gt;normalize($config['version']);
} catch (\Exception $e) {
unset($this-&gt;config['version']);
$this-&gt;errors[] = 'version : invalid value ('.$config['version'].'): '.$e-&gt;getMessage();
}
}

$this-&gt;validateRegex('type', '[a-z0-9-]+');
$this-&gt;validateString('target-dir');
$this-&gt;validateArray('extra');
$this-&gt;validateFlatArray('bin');
$this-&gt;validateArray('scripts'); 
 $this-&gt;validateString('description');
$this-&gt;validateUrl('homepage');
$this-&gt;validateFlatArray('keywords', '[A-Za-z0-9 -]+');

if (isset($config['license'])) {
if (is_string($config['license'])) {
$this-&gt;validateRegex('license', '[A-Za-z0-9+. ()-]+');
} else {
$this-&gt;validateFlatArray('license', '[A-Za-z0-9+. ()-]+');
}
}

$this-&gt;validateString('time');
if (!empty($this-&gt;config['time'])) {
try {
$date = new \DateTime($config['time']);
} catch (\Exception $e) {
$this-&gt;errors[] = 'time : invalid value ('.$this-&gt;config['time'].'): '.$e-&gt;getMessage();
unset($this-&gt;config['time']);
}
}

$this-&gt;validateArray('authors');
if (!empty($this-&gt;config['authors'])) {
foreach ($this-&gt;config['authors'] as $key =&gt; $author) {
if (isset($author['homepage']) &amp;&amp; !$this-&gt;filterUrl($author['homepage'])) {
$this-&gt;errors[] = 'authors.'.$key.'.homepage : invalid value, must be a valid http/https URL';
unset($this-&gt;config['authors'][$key]['homepage']);
}
if (isset($author['email']) &amp;&amp; !filter_var($author['email'], FILTER_VALIDATE_EMAIL)) {
$this-&gt;errors[] = 'authors.'.$key.'.email : invalid value, must be a valid email address';
unset($this-&gt;config['authors'][$key]['email']);
}
if (isset($author['name']) &amp;&amp; !is_string($author['name'])) {
$this-&gt;errors[] = 'authors.'.$key.'.name : invalid value, must be a string';
unset($this-&gt;config['authors'][$key]['name']);
}
if (isset($author['role']) &amp;&amp; !is_string($author['role'])) {
$this-&gt;errors[] = 'authors.'.$key.'.role : invalid value, must be a string';
unset($this-&gt;config['authors'][$key]['role']);
}
}
if (empty($this-&gt;config['authors'])) {
unset($this-&gt;config['authors']);
}
}

$this-&gt;validateArray('support');
if (!empty($this-&gt;config['support'])) {
if (isset($this-&gt;config['support']['email']) &amp;&amp; !filter_var($this-&gt;config['support']['email'], FILTER_VALIDATE_EMAIL)) {
$this-&gt;errors[] = 'support.email : invalid value, must be a valid email address';
unset($this-&gt;config['support']['email']);
}

if (isset($this-&gt;config['support']['irc'])
&amp;&amp; (!filter_var($this-&gt;config['support']['irc'], FILTER_VALIDATE_URL) || !preg_match('{^irc://}iu', $this-&gt;config['support']['irc']))
) {
$this-&gt;errors[] = 'support.irc : invalid value, must be ';
unset($this-&gt;config['support']['irc']);
}

foreach (array('issues', 'forum', 'wiki', 'source') as $key) {
if (isset($this-&gt;config['support'][$key]) &amp;&amp; !$this-&gt;filterUrl($this-&gt;config['support'][$key])) {
$this-&gt;errors[] = 'support.'.$key.' : invalid value, must be a valid http/https URL';
unset($this-&gt;config['support'][$key]);
}
}
if (empty($this-&gt;config['support'])) {
unset($this-&gt;config['support']);
}
}


 
 
 


 



$this-&gt;validateFlatArray('include-path');


 if (isset($this-&gt;config['extra']['branch-alias'])) {
if (!is_array($this-&gt;config['extra']['branch-alias'])) {
$this-&gt;errors[] = 'extra.branch-alias : must be an array of versions =&gt; aliases';
} else {
foreach ($this-&gt;config['extra']['branch-alias'] as $sourceBranch =&gt; $targetBranch) {

 if ('-dev' !== substr($targetBranch, -4)) {
$this-&gt;errors[] = 'extra.branch-alias.'.$sourceBranch.' : the target branch ('.$targetBranch.') must end in -dev';
unset($this-&gt;config['extra']['branch-alias'][$sourceBranch]);

continue;
}


 $validatedTargetBranch = $this-&gt;versionParser-&gt;normalizeBranch(substr($targetBranch, 0, -4));
if ('-dev' !== substr($validatedTargetBranch, -4)) {
$this-&gt;errors[] = 'extra.branch-alias.'.$sourceBranch.' : the target branch ('.$targetBranch.') must be a parseable number like 2.0-dev';
unset($this-&gt;config['extra']['branch-alias'][$sourceBranch]);
}
}
}
}

if ($this-&gt;errors &amp;&amp; !$this-&gt;ignoreErrors) {
throw new \Exception(implode("\n", $this-&gt;errors));
}

$package = $this-&gt;loader-&gt;load($this-&gt;config);
$this-&gt;errors = array();
$this-&gt;config = null;

return $package;
}

private function validateRegex($property, $regex, $mandatory = false)
{
if (!$this-&gt;validateString($property, $mandatory)) {
return false;
}

if (!preg_match('{^'.$regex.'$}u', $this-&gt;config[$property])) {
$this-&gt;errors[] = $property.' : invalid value, must match '.$regex;
unset($this-&gt;config[$property]);

return false;
}

return true;
}

private function validateString($property, $mandatory = false)
{
if (isset($this-&gt;config[$property]) &amp;&amp; !is_string($this-&gt;config[$property])) {
$this-&gt;errors[] = $property.' : should be a string, '.gettype($this-&gt;config[$property]).' given';
unset($this-&gt;config[$property]);

return false;
}

if (!isset($this-&gt;config[$property]) || trim($this-&gt;config[$property]) === '') {
if ($mandatory) {
$this-&gt;errors[] = $property.' : must be present';
}
unset($this-&gt;config[$property]);

return false;
}

return true;
}

private function validateArray($property, $mandatory = false)
{
if (isset($this-&gt;config[$property]) &amp;&amp; !is_array($this-&gt;config[$property])) {
$this-&gt;errors[] = $property.' : should be an array, '.gettype($this-&gt;config[$property]).' given';
unset($this-&gt;config[$property]);

return false;
}

if (!isset($this-&gt;config[$property]) || !count($this-&gt;config[$property])) {
if ($mandatory) {
$this-&gt;errors[] = $property.' : must be present and contain at least one element';
}
unset($this-&gt;config[$property]);

return false;
}

return true;
}

private function validateFlatArray($property, $regex = null, $mandatory = false)
{
if (!$this-&gt;validateArray($property, $mandatory)) {
return false;
}

$pass = true;
foreach ($this-&gt;config[$property] as $key =&gt; $value) {
if (!is_string($value) &amp;&amp; !is_numeric($value)) {
$this-&gt;errors[] = $property.'.'.$key.' : must be a string or int, '.gettype($value).' given';
unset($this-&gt;config[$property][$key]);
$pass = false;

continue;
}

if ($regex &amp;&amp; !preg_match('{^'.$regex.'$}u', $value)) {
$this-&gt;errors[] = $property.'.'.$key.' : invalid value, must match '.$regex;
unset($this-&gt;config[$property][$key]);
$pass = false;
}
}

return $pass;
}

private function validateUrl($property, $mandatory = false)
{
if (!$this-&gt;validateString($property, $mandatory)) {
return false;
}

if (!$this-&gt;filterUrl($this-&gt;config[$property])) {
$this-&gt;errors[] = $property.' : invalid value, must be a valid http/https URL';
unset($this-&gt;config[$property]);

return false;
}
}

private function filterUrl($value)
{
return filter_var($value, FILTER_VALIDATE_URL) &amp;&amp; preg_match('{^https?://}iu', $value);
}
}
&lt;?php











namespace Composer\Package\Loader;

use Composer\Package\BasePackage;
use Composer\Config;
use Composer\Factory;
use Composer\Package\Version\VersionParser;
use Composer\Repository\RepositoryManager;
use Composer\Util\ProcessExecutor;








class RootPackageLoader extends ArrayLoader
{
private $manager;
private $config;
private $process;

public function __construct(RepositoryManager $manager, Config $config, VersionParser $parser = null, ProcessExecutor $process = null)
{
$this-&gt;manager = $manager;
$this-&gt;config = $config;
$this-&gt;process = $process ?: new ProcessExecutor();
parent::__construct($parser);
}

public function load(array $config)
{
if (!isset($config['name'])) {
$config['name'] = '__root__';
}
if (!isset($config['version'])) {

 if (getenv('COMPOSER_ROOT_VERSION')) {
$version = getenv('COMPOSER_ROOT_VERSION');
} else {
$version = $this-&gt;guessVersion($config);
}

if (!$version) {
$version = '1.0.0';
}

$config['version'] = $version;
} else {
$version = $config['version'];
}

$package = parent::load($config);

$aliases = array();
$stabilityFlags = array();
$references = array();
foreach (array('require', 'require-dev') as $linkType) {
if (isset($config[$linkType])) {
$linkInfo = BasePackage::$supportedLinkTypes[$linkType];
$method = 'get'.ucfirst($linkInfo['method']);
$links = array();
foreach ($package-&gt;$method() as $link) {
$links[$link-&gt;getTarget()] = $link-&gt;getConstraint()-&gt;getPrettyString();
}
$aliases = $this-&gt;extractAliases($links, $aliases);
$stabilityFlags = $this-&gt;extractStabilityFlags($links, $stabilityFlags);
$references = $this-&gt;extractReferences($links, $references);
}
}

$package-&gt;setAliases($aliases);
$package-&gt;setStabilityFlags($stabilityFlags);
$package-&gt;setReferences($references);

if (isset($config['minimum-stability'])) {
$package-&gt;setMinimumStability(VersionParser::normalizeStability($config['minimum-stability']));
}

$repos = Factory::createDefaultRepositories(null, $this-&gt;config, $this-&gt;manager);
foreach ($repos as $repo) {
$this-&gt;manager-&gt;addRepository($repo);
}
$package-&gt;setRepositories($this-&gt;config-&gt;getRepositories());

return $package;
}

private function extractAliases(array $requires, array $aliases)
{
foreach ($requires as $reqName =&gt; $reqVersion) {
if (preg_match('{^([^,\s]+) +as +([^,\s]+)$}', $reqVersion, $match)) {
$aliases[] = array(
'package' =&gt; strtolower($reqName),
'version' =&gt; $this-&gt;versionParser-&gt;normalize($match[1]),
'alias' =&gt; $match[2],
'alias_normalized' =&gt; $this-&gt;versionParser-&gt;normalize($match[2]),
);
}
}

return $aliases;
}

private function extractStabilityFlags(array $requires, array $stabilityFlags)
{
$stabilities = BasePackage::$stabilities;
foreach ($requires as $reqName =&gt; $reqVersion) {

 if (preg_match('{^[^,\s]*?@('.implode('|', array_keys($stabilities)).')$}i', $reqVersion, $match)) {
$name = strtolower($reqName);
$stability = $stabilities[VersionParser::normalizeStability($match[1])];

if (isset($stabilityFlags[$name]) &amp;&amp; $stabilityFlags[$name] &gt; $stability) {
continue;
}
$stabilityFlags[$name] = $stability;

continue;
}


 if (preg_match('{^[^,\s@]+$}', $reqVersion) &amp;&amp; 'stable' !== ($stabilityName = VersionParser::parseStability($reqVersion))) {
$name = strtolower($reqName);
$stability = $stabilities[$stabilityName];
if (isset($stabilityFlags[$name]) &amp;&amp; $stabilityFlags[$name] &gt; $stability) {
continue;
}
$stabilityFlags[$name] = $stability;
}
}

return $stabilityFlags;
}

private function extractReferences(array $requires, array $references)
{
foreach ($requires as $reqName =&gt; $reqVersion) {
if (preg_match('{^[^,\s@]+?#([a-f0-9]+)$}', $reqVersion, $match) &amp;&amp; 'dev' === ($stabilityName = VersionParser::parseStability($reqVersion))) {
$name = strtolower($reqName);
$references[$name] = $match[1];
}
}

return $references;
}

private function guessVersion(array $config)
{

 if (function_exists('proc_open') &amp;&amp; 0 === $this-&gt;process-&gt;execute('git branch --no-color --no-abbrev -v', $output)) {
$branches = array();
$isFeatureBranch = false;
$version = null;

foreach ($this-&gt;process-&gt;splitLines($output) as $branch) {
if ($branch &amp;&amp; preg_match('{^(?:\* ) *(?:[^/ ]+?/)?(\S+|\(no branch\)) *([a-f0-9]+) .*$}', $branch, $match)) {
if ($match[1] === '(no branch)') {
$version = 'dev-'.$match[2];
$isFeatureBranch = true;
} else {
$version = $this-&gt;versionParser-&gt;normalizeBranch($match[1]);
$isFeatureBranch = 0 === strpos($version, 'dev-');
if ('9999999-dev' === $version) {
$version = 'dev-'.$match[1];
}
}
}

if ($branch &amp;&amp; !preg_match('{^ *[^/]+/HEAD }', $branch)) {
if (preg_match('{^(?:\* )? *(?:[^/ ]+?/)?(\S+) *([a-f0-9]+) .*$}', $branch, $match)) {
$branches[] = $match[1];
}
}
}

if (!$isFeatureBranch) {
return $version;
}


 
 if ((isset($config['extra']['branch-alias']) &amp;&amp; !isset($config['extra']['branch-alias'][$version]))
|| strpos(json_encode($config), '"self.version"')
) {
$branch = preg_replace('{^dev-}', '', $version);
$length = PHP_INT_MAX;
foreach ($branches as $candidate) {

 if ($candidate === $branch || !preg_match('{^(master|trunk|default|develop|\d+\..+)$}', $candidate)) {
continue;
}
if (0 !== $this-&gt;process-&gt;execute('git rev-list '.$candidate.'..'.$branch, $output)) {
continue;
}
if (strlen($output) &lt; $length) {
$length = strlen($output);
$version = $this-&gt;versionParser-&gt;normalizeBranch($candidate);
if ('9999999-dev' === $version) {
$version = 'dev-'.$match[1];
}
}
}
}

return $version;
}
}
}
&lt;?php











namespace Composer\Package;

use Composer\Package\Version\VersionParser;






class MemoryPackage extends BasePackage
{
protected $type;
protected $targetDir;
protected $installationSource;
protected $sourceType;
protected $sourceUrl;
protected $sourceReference;
protected $distType;
protected $distUrl;
protected $distReference;
protected $distSha1Checksum;
protected $version;
protected $prettyVersion;
protected $repositories;
protected $license = array();
protected $releaseDate;
protected $keywords;
protected $authors;
protected $description;
protected $homepage;
protected $extra = array();
protected $binaries = array();
protected $scripts = array();
protected $aliases = array();
protected $alias;
protected $prettyAlias;
protected $dev;

protected $minimumStability = 'stable';
protected $stabilityFlags = array();
protected $references = array();

protected $requires = array();
protected $conflicts = array();
protected $provides = array();
protected $replaces = array();
protected $devRequires = array();
protected $suggests = array();
protected $autoload = array();
protected $includePaths = array();
protected $support = array();








public function __construct($name, $version, $prettyVersion)
{
parent::__construct($name);

$this-&gt;version = $version;
$this-&gt;prettyVersion = $prettyVersion;

$this-&gt;stability = VersionParser::parseStability($version);
$this-&gt;dev = $this-&gt;stability === 'dev';
}




public function isDev()
{
return $this-&gt;dev;
}




public function setType($type)
{
$this-&gt;type = $type;
}




public function getType()
{
return $this-&gt;type ?: 'library';
}




public function getStability()
{
return $this-&gt;stability;
}




public function setTargetDir($targetDir)
{
$this-&gt;targetDir = $targetDir;
}




public function getTargetDir()
{
return $this-&gt;targetDir;
}




public function setExtra(array $extra)
{
$this-&gt;extra = $extra;
}




public function getExtra()
{
return $this-&gt;extra;
}




public function setBinaries(array $binaries)
{
$this-&gt;binaries = $binaries;
}




public function getBinaries()
{
return $this-&gt;binaries;
}




public function setScripts(array $scripts)
{
$this-&gt;scripts = $scripts;
}




public function getScripts()
{
return $this-&gt;scripts;
}




public function setAliases(array $aliases)
{
$this-&gt;aliases = $aliases;
}




public function getAliases()
{
return $this-&gt;aliases;
}




public function setAlias($alias)
{
$this-&gt;alias = $alias;
}




public function getAlias()
{
return $this-&gt;alias;
}




public function setPrettyAlias($prettyAlias)
{
$this-&gt;prettyAlias = $prettyAlias;
}




public function getPrettyAlias()
{
return $this-&gt;prettyAlias;
}




public function setInstallationSource($type)
{
$this-&gt;installationSource = $type;
}




public function getInstallationSource()
{
return $this-&gt;installationSource;
}




public function setSourceType($type)
{
$this-&gt;sourceType = $type;
}




public function getSourceType()
{
return $this-&gt;sourceType;
}




public function setSourceUrl($url)
{
$this-&gt;sourceUrl = $url;
}




public function getSourceUrl()
{
return $this-&gt;sourceUrl;
}




public function setSourceReference($reference)
{
$this-&gt;sourceReference = $reference;
}




public function getSourceReference()
{
return $this-&gt;sourceReference;
}




public function setDistType($type)
{
$this-&gt;distType = $type;
}




public function getDistType()
{
return $this-&gt;distType;
}




public function setDistUrl($url)
{
$this-&gt;distUrl = $url;
}




public function getDistUrl()
{
return $this-&gt;distUrl;
}




public function setDistReference($reference)
{
$this-&gt;distReference = $reference;
}




public function getDistReference()
{
return $this-&gt;distReference;
}




public function setDistSha1Checksum($sha1checksum)
{
$this-&gt;distSha1Checksum = $sha1checksum;
}




public function getDistSha1Checksum()
{
return $this-&gt;distSha1Checksum;
}






public function setRepositories($repositories)
{
$this-&gt;repositories = $repositories;
}




public function getRepositories()
{
return $this-&gt;repositories;
}




public function getVersion()
{
return $this-&gt;version;
}




public function getPrettyVersion()
{
return $this-&gt;prettyVersion;
}






public function setLicense(array $license)
{
$this-&gt;license = $license;
}




public function getLicense()
{
return $this-&gt;license;
}






public function setRequires(array $requires)
{
$this-&gt;requires = $requires;
}




public function getRequires()
{
return $this-&gt;requires;
}






public function setConflicts(array $conflicts)
{
$this-&gt;conflicts = $conflicts;
}




public function getConflicts()
{
return $this-&gt;conflicts;
}






public function setProvides(array $provides)
{
$this-&gt;provides = $provides;
}




public function getProvides()
{
return $this-&gt;provides;
}






public function setReplaces(array $replaces)
{
$this-&gt;replaces = $replaces;
}




public function getReplaces()
{
return $this-&gt;replaces;
}






public function setDevRequires(array $devRequires)
{
$this-&gt;devRequires = $devRequires;
}




public function getDevRequires()
{
return $this-&gt;devRequires;
}






public function setSuggests(array $suggests)
{
$this-&gt;suggests = $suggests;
}




public function getSuggests()
{
return $this-&gt;suggests;
}






public function setReleaseDate(\DateTime $releaseDate)
{
$this-&gt;releaseDate = $releaseDate;
}




public function getReleaseDate()
{
return $this-&gt;releaseDate;
}






public function setKeywords(array $keywords)
{
$this-&gt;keywords = $keywords;
}




public function getKeywords()
{
return $this-&gt;keywords;
}






public function setAuthors(array $authors)
{
$this-&gt;authors = $authors;
}




public function getAuthors()
{
return $this-&gt;authors;
}






public function setDescription($description)
{
$this-&gt;description = $description;
}




public function getDescription()
{
return $this-&gt;description;
}






public function setHomepage($homepage)
{
$this-&gt;homepage = $homepage;
}




public function getHomepage()
{
return $this-&gt;homepage;
}






public function setMinimumStability($minimumStability)
{
$this-&gt;minimumStability = $minimumStability;
}




public function getMinimumStability()
{
return $this-&gt;minimumStability;
}






public function setStabilityFlags(array $stabilityFlags)
{
$this-&gt;stabilityFlags = $stabilityFlags;
}




public function getStabilityFlags()
{
return $this-&gt;stabilityFlags;
}






public function setReferences(array $references)
{
$this-&gt;references = $references;
}




public function getReferences()
{
return $this-&gt;references;
}






public function setAutoload(array $autoload)
{
$this-&gt;autoload = $autoload;
}




public function getAutoload()
{
return $this-&gt;autoload;
}






public function setIncludePaths(array $includePaths)
{
$this-&gt;includePaths = $includePaths;
}




public function getIncludePaths()
{
return $this-&gt;includePaths;
}






public function setSupport(array $support)
{
$this-&gt;support = $support;
}




public function getSupport()
{
return $this-&gt;support;
}
}
&lt;?php











namespace Composer\Package;

use Composer\Json\JsonFile;
use Composer\Installer\InstallationManager;
use Composer\Repository\RepositoryManager;
use Composer\Util\ProcessExecutor;
use Composer\Package\AliasPackage;







class Locker
{
private $lockFile;
private $repositoryManager;
private $installationManager;
private $hash;
private $lockDataCache;









public function __construct(JsonFile $lockFile, RepositoryManager $repositoryManager, InstallationManager $installationManager, $hash)
{
$this-&gt;lockFile = $lockFile;
$this-&gt;repositoryManager = $repositoryManager;
$this-&gt;installationManager = $installationManager;
$this-&gt;hash = $hash;
}







public function isLocked($dev = false)
{
if (!$this-&gt;lockFile-&gt;exists()) {
return false;
}

$data = $this-&gt;getLockData();
if ($dev) {
return isset($data['packages-dev']);
}

return isset($data['packages']);
}






public function isFresh()
{
$lock = $this-&gt;lockFile-&gt;read();

return $this-&gt;hash === $lock['hash'];
}







public function getLockedPackages($dev = false)
{
$lockData = $this-&gt;getLockData();
$packages = array();

$lockedPackages = $dev ? $lockData['packages-dev'] : $lockData['packages'];
$repo = $dev ? $this-&gt;repositoryManager-&gt;getLocalDevRepository() : $this-&gt;repositoryManager-&gt;getLocalRepository();

foreach ($lockedPackages as $info) {
$resolvedVersion = !empty($info['alias-version']) ? $info['alias-version'] : $info['version'];


 $package = $repo-&gt;findPackage($info['package'], $resolvedVersion);


 if (!$package) {
$package = $this-&gt;repositoryManager-&gt;findPackage($info['package'], $resolvedVersion);
}


 if (!$package &amp;&amp; !empty($info['alias-version'])) {
$package = $this-&gt;repositoryManager-&gt;findPackage($info['package'], $info['version']);
if ($package) {
$alias = new AliasPackage($package, $info['alias-version'], $info['alias-pretty-version']);
$package-&gt;getRepository()-&gt;addPackage($alias);
$package = $alias;
}
}

if (!$package) {
throw new \LogicException(sprintf(
'Can not find "%s-%s" package in registered repositories',
$info['package'], $info['version']
));
}

$packages[] = $package;
}

return $packages;
}

public function getMinimumStability()
{
$lockData = $this-&gt;getLockData();

return isset($lockData['minimum-stability']) ? $lockData['minimum-stability'] : 'stable';
}

public function getStabilityFlags()
{
$lockData = $this-&gt;getLockData();

return isset($lockData['stability-flags']) ? $lockData['stability-flags'] : array();
}

public function getAliases()
{
$lockData = $this-&gt;getLockData();

return isset($lockData['aliases']) ? $lockData['aliases'] : array();
}

public function getLockData()
{
if (null !== $this-&gt;lockDataCache) {
return $this-&gt;lockDataCache;
}

if (!$this-&gt;lockFile-&gt;exists()) {
throw new \LogicException('No lockfile found. Unable to read locked packages');
}

return $this-&gt;lockDataCache = $this-&gt;lockFile-&gt;read();
}










public function setLockData(array $packages, $devPackages, array $aliases, $minimumStability, array $stabilityFlags)
{
$lock = array(
'hash' =&gt; $this-&gt;hash,
'packages' =&gt; null,
'packages-dev' =&gt; null,
'aliases' =&gt; $aliases,
'minimum-stability' =&gt; $minimumStability,
'stability-flags' =&gt; $stabilityFlags,
);

$lock['packages'] = $this-&gt;lockPackages($packages);
if (null !== $devPackages) {
$lock['packages-dev'] = $this-&gt;lockPackages($devPackages);
}

if (!$this-&gt;isLocked() || $lock !== $this-&gt;getLockData()) {
$this-&gt;lockFile-&gt;write($lock);
$this-&gt;lockDataCache = null;

return true;
}

return false;
}

private function lockPackages(array $packages)
{
$locked = array();

foreach ($packages as $package) {
$alias = null;

if ($package instanceof AliasPackage) {
$alias = $package;
$package = $package-&gt;getAliasOf();
}

$name = $package-&gt;getPrettyName();
$version = $package-&gt;getPrettyVersion();

if (!$name || !$version) {
throw new \LogicException(sprintf(
'Package "%s" has no version or name and can not be locked', $package
));
}

$spec = array('package' =&gt; $name, 'version' =&gt; $version);

if ($package-&gt;isDev() &amp;&amp; !$alias) {
$spec['source-reference'] = $package-&gt;getSourceReference();
if ('git' === $package-&gt;getSourceType() &amp;&amp; $path = $this-&gt;installationManager-&gt;getInstallPath($package)) {
$process = new ProcessExecutor();
if (0 === $process-&gt;execute('git log -n1 --pretty=%ct '.escapeshellarg($package-&gt;getSourceReference()), $output, $path)) {
$spec['commit-date'] = trim($output);
}
}
}

if ($alias) {
$spec['alias-pretty-version'] = $alias-&gt;getPrettyVersion();
$spec['alias-version'] = $alias-&gt;getVersion();
}

$locked[] = $spec;
}

usort($locked, function ($a, $b) {
$comparison = strcmp($a['package'], $b['package']);

if (0 !== $comparison) {
return $comparison;
}


 $aVersion = isset($a['alias-version']) ? $a['alias-version'] : $a['version'];
$bVersion = isset($b['alias-version']) ? $b['alias-version'] : $b['version'];

return strcmp($aVersion, $bVersion);
});

return $locked;
}
}
&lt;?php











namespace Composer\Package;

use Composer\Package\LinkConstraint\LinkConstraintInterface;
use Composer\Repository\RepositoryInterface;




interface PackageInterface
{





public function getName();






public function getPrettyName();









public function getNames();






public function setId($id);






public function getId();









public function matches($name, LinkConstraintInterface $constraint);






public function isDev();






public function getType();






public function getTargetDir();






public function getExtra();






public function setInstallationSource($type);






public function getInstallationSource();






public function getSourceType();






public function getSourceUrl();






public function getSourceReference();






public function getDistType();






public function getDistUrl();






public function getDistReference();






public function getDistSha1Checksum();






public function getScripts();






public function getVersion();






public function getPrettyVersion();






public function getStability();






public function getLicense();







public function getRequires();







public function getConflicts();







public function getProvides();







public function getReplaces();







public function getDevRequires();







public function getSuggests();











public function getAutoload();







public function getIncludePaths();








public function getRepositories();






public function setRepository(RepositoryInterface $repository);






public function getRepository();






public function getReleaseDate();






public function getKeywords();






public function getDescription();






public function getBinaries();






public function getHomepage();








public function getAuthors();






public function getAlias();






public function getPrettyAlias();






public function getUniqueName();






public function __toString();






public function getPrettyString();






public function getSupport();
}
&lt;?php











namespace Composer\Package;

use Composer\Package\LinkConstraint\LinkConstraintInterface;
use Composer\Package\LinkConstraint\VersionConstraint;
use Composer\Repository\RepositoryInterface;
use Composer\Repository\PlatformRepository;






abstract class BasePackage implements PackageInterface
{
public static $supportedLinkTypes = array(
'require' =&gt; array('description' =&gt; 'requires', 'method' =&gt; 'requires'),
'conflict' =&gt; array('description' =&gt; 'conflicts', 'method' =&gt; 'conflicts'),
'provide' =&gt; array('description' =&gt; 'provides', 'method' =&gt; 'provides'),
'replace' =&gt; array('description' =&gt; 'replaces', 'method' =&gt; 'replaces'),
'require-dev' =&gt; array('description' =&gt; 'requires (for development)', 'method' =&gt; 'devRequires'),
);

const STABILITY_STABLE = 0;
const STABILITY_RC = 5;
const STABILITY_BETA = 10;
const STABILITY_ALPHA = 15;
const STABILITY_DEV = 20;

const MATCH_NAME = -1;
const MATCH_NONE = 0;
const MATCH = 1;
const MATCH_PROVIDE = 2;
const MATCH_REPLACE = 3;

public static $stabilities = array(
'stable' =&gt; self::STABILITY_STABLE,
'RC' =&gt; self::STABILITY_RC,
'beta' =&gt; self::STABILITY_BETA,
'alpha' =&gt; self::STABILITY_ALPHA,
'dev' =&gt; self::STABILITY_DEV,
);

protected $name;
protected $prettyName;

protected $repository;
protected $id;






public function __construct($name)
{
$this-&gt;prettyName = $name;
$this-&gt;name = strtolower($name);
$this-&gt;id = -1;
}




public function getName()
{
return $this-&gt;name;
}




public function getPrettyName()
{
return $this-&gt;prettyName;
}




public function getNames()
{
$names = array(
$this-&gt;getName() =&gt; true,
);

foreach ($this-&gt;getProvides() as $link) {
$names[$link-&gt;getTarget()] = true;
}

foreach ($this-&gt;getReplaces() as $link) {
$names[$link-&gt;getTarget()] = true;
}

return array_keys($names);
}




public function setId($id)
{
$this-&gt;id = $id;
}




public function getId()
{
return $this-&gt;id;
}









public function matches($name, LinkConstraintInterface $constraint)
{
if ($this-&gt;name === $name) {
return $constraint-&gt;matches(new VersionConstraint('==', $this-&gt;getVersion())) ? self::MATCH : self::MATCH_NAME;
}

foreach ($this-&gt;getProvides() as $link) {
if ($link-&gt;getTarget() === $name &amp;&amp; $constraint-&gt;matches($link-&gt;getConstraint())) {
return self::MATCH_PROVIDE;
}
}

foreach ($this-&gt;getReplaces() as $link) {
if ($link-&gt;getTarget() === $name &amp;&amp; $constraint-&gt;matches($link-&gt;getConstraint())) {
return self::MATCH_REPLACE;
}
}

return self::MATCH_NONE;
}

public function getRepository()
{
return $this-&gt;repository;
}

public function setRepository(RepositoryInterface $repository)
{
if ($this-&gt;repository) {
throw new \LogicException('A package can only be added to one repository');
}
$this-&gt;repository = $repository;
}






public function isPlatform()
{
return $this-&gt;getRepository() instanceof PlatformRepository;
}






public function getUniqueName()
{
return $this-&gt;getName().'-'.$this-&gt;getVersion();
}

public function equals(PackageInterface $package)
{
$self = $this;
if ($this instanceof AliasPackage) {
$self = $this-&gt;getAliasOf();
}
if ($package instanceof AliasPackage) {
$package = $package-&gt;getAliasOf();
}

return $package === $self;
}






public function __toString()
{
return $this-&gt;getUniqueName();
}

public function getPrettyString()
{
return $this-&gt;getPrettyName().' '.$this-&gt;getPrettyVersion();
}

public function __clone()
{
$this-&gt;repository = null;
}
}
&lt;?php











namespace Composer\Package\Version;

use Composer\Package\BasePackage;
use Composer\Package\PackageInterface;
use Composer\Package\LinkConstraint\MultiConstraint;
use Composer\Package\LinkConstraint\VersionConstraint;






class VersionParser
{
private static $modifierRegex = '[._-]?(?:(beta|b|RC|alpha|a|patch|pl|p)(?:[.-]?(\d+))?)?([.-]?dev)?';







public static function parseStability($version)
{
$version = preg_replace('{#[a-f0-9]+$}i', '', $version);

if ('dev-' === substr($version, 0, 4) || '-dev' === substr($version, -4)) {
return 'dev';
}

preg_match('{'.self::$modifierRegex.'$}', $version, $match);
if (!empty($match[3])) {
return 'dev';
}

if (!empty($match[1])) {
if ('beta' === $match[1] || 'b' === $match[1]) {
return 'beta';
}
if ('alpha' === $match[1] || 'a' === $match[1]) {
return 'alpha';
}
if ('RC' === $match[1]) {
return 'RC';
}
}

return 'stable';
}

public static function normalizeStability($stability)
{
$stability = strtolower($stability);

return $stability === 'rc' ? 'RC' : $stability;
}

public static function formatVersion(PackageInterface $package, $truncate = true)
{
if (!$package-&gt;isDev() || !in_array($package-&gt;getSourceType(), array('hg', 'git'))) {
return $package-&gt;getPrettyVersion();
}

return $package-&gt;getPrettyVersion() . ' ' . ($truncate ? substr($package-&gt;getSourceReference(), 0, 6) : $package-&gt;getSourceReference());
}







public function normalize($version)
{
$version = trim($version);


 if (preg_match('{^([^,\s]+) +as +([^,\s]+)$}', $version, $match)) {
$version = $match[1];
}


 if (preg_match('{^(?:dev-)?(?:master|trunk|default)$}i', $version)) {
return '9999999-dev';
}

if ('dev-' === strtolower(substr($version, 0, 4))) {
return 'dev-'.substr($version, 4);
}


 if (preg_match('{^v?(\d{1,3})(\.\d+)?(\.\d+)?(\.\d+)?'.self::$modifierRegex.'$}i', $version, $matches)) {
$version = $matches[1]
.(!empty($matches[2]) ? $matches[2] : '.0')
.(!empty($matches[3]) ? $matches[3] : '.0')
.(!empty($matches[4]) ? $matches[4] : '.0');
$index = 5;
} elseif (preg_match('{^v?(\d{4}(?:[.:-]?\d{2}){1,6}(?:[.:-]?\d{1,3})?)'.self::$modifierRegex.'$}i', $version, $matches)) { 
 $version = preg_replace('{\D}', '-', $matches[1]);
$index = 2;
}


 if (isset($index)) {
if (!empty($matches[$index])) {
$mod = array('{^pl?$}i', '{^rc$}i');
$modNormalized = array('patch', 'RC');
$version .= '-'.preg_replace($mod, $modNormalized, strtolower($matches[$index]))
. (!empty($matches[$index+1]) ? $matches[$index+1] : '');
}

if (!empty($matches[$index+2])) {
$version .= '-dev';
}

return $version;
}


 if (preg_match('{(.*?)[.-]?dev$}i', $version, $match)) {
try {
return $this-&gt;normalizeBranch($match[1]);
} catch (\Exception $e) {}
}

throw new \UnexpectedValueException('Invalid version string "'.$version.'"');
}







public function normalizeBranch($name)
{
$name = trim($name);

if (in_array($name, array('master', 'trunk', 'default'))) {
return $this-&gt;normalize($name);
}

if (preg_match('#^v?(\d+)(\.(?:\d+|[x*]))?(\.(?:\d+|[x*]))?(\.(?:\d+|[x*]))?$#i', $name, $matches)) {
$version = '';
for ($i = 1; $i &lt; 5; $i++) {
$version .= isset($matches[$i]) ? str_replace('*', 'x', $matches[$i]) : '.x';
}

return str_replace('x', '9999999', $version).'-dev';
}

return 'dev-'.$name;
}







public function parseConstraints($constraints)
{
$prettyConstraint = $constraints;

if (preg_match('{^([^,\s]*?)@('.implode('|', array_keys(BasePackage::$stabilities)).')$}i', $constraints, $match)) {
$constraints = empty($match[1]) ? '*' : $match[1];
}

if (preg_match('{^(dev-[^,\s@]+?|[^,\s@]+?\.x-dev)#[a-f0-9]+$}i', $constraints, $match)) {
$constraints = $match[1];
}

$constraints = preg_split('{\s*,\s*}', trim($constraints));

if (count($constraints) &gt; 1) {
$constraintObjects = array();
foreach ($constraints as $constraint) {
$constraintObjects = array_merge($constraintObjects, $this-&gt;parseConstraint($constraint));
}
} else {
$constraintObjects = $this-&gt;parseConstraint($constraints[0]);
}

if (1 === count($constraintObjects)) {
$constraint = $constraintObjects[0];
} else {
$constraint = new MultiConstraint($constraintObjects);
}

$constraint-&gt;setPrettyString($prettyConstraint);

return $constraint;
}

private function parseConstraint($constraint)
{
if (preg_match('{^[x*](\.[x*])*$}i', $constraint)) {
return array();
}


 if (preg_match('{^(\d+)(?:\.(\d+))?(?:\.(\d+))?\.[x*]$}', $constraint, $matches)) {
if (isset($matches[3])) {
$highVersion = $matches[1] . '.' . $matches[2] . '.' . $matches[3] . '.9999999';
if ($matches[3] === '0') {
$lowVersion = $matches[1] . '.' . ($matches[2] - 1) . '.9999999.9999999';
} else {
$lowVersion = $matches[1] . '.' . $matches[2] . '.' . ($matches[3] - 1). '.9999999';
}
} elseif (isset($matches[2])) {
$highVersion = $matches[1] . '.' . $matches[2] . '.9999999.9999999';
if ($matches[2] === '0') {
$lowVersion = ($matches[1] - 1) . '.9999999.9999999.9999999';
} else {
$lowVersion = $matches[1] . '.' . ($matches[2] - 1) . '.9999999.9999999';
}
} else {
$highVersion = $matches[1] . '.9999999.9999999.9999999';
if ($matches[1] === '0') {
return array(new VersionConstraint('&lt;', $highVersion));
} else {
$lowVersion = ($matches[1] - 1) . '.9999999.9999999.9999999';
}
}

return array(
new VersionConstraint('&gt;', $lowVersion),
new VersionConstraint('&lt;', $highVersion),
);
}


 if (preg_match('{^(&lt;&gt;|!=|&gt;=?|&lt;=?|==?)?\s*(.*)}', $constraint, $matches)) {
try {
$version = $this-&gt;normalize($matches[2]);

return array(new VersionConstraint($matches[1] ?: '=', $version));
} catch (\Exception $e) {}
}

throw new \UnexpectedValueException('Could not parse version constraint '.$constraint);
}
}
&lt;?php











namespace Composer\Package;

use Composer\Package\LinkConstraint\VersionConstraint;
use Composer\Package\Version\VersionParser;




class AliasPackage extends BasePackage
{
protected $version;
protected $prettyVersion;
protected $dev;
protected $aliasOf;
protected $rootPackageAlias = false;
protected $stability;

protected $requires;
protected $conflicts;
protected $provides;
protected $replaces;
protected $recommends;
protected $suggests;








public function __construct(PackageInterface $aliasOf, $version, $prettyVersion)
{
parent::__construct($aliasOf-&gt;getName());

$this-&gt;version = $version;
$this-&gt;prettyVersion = $prettyVersion;
$this-&gt;aliasOf = $aliasOf;
$this-&gt;stability = VersionParser::parseStability($version);
$this-&gt;dev = $this-&gt;stability === 'dev';


 foreach (array('requires', 'devRequires') as $type) {
$links = $aliasOf-&gt;{'get'.ucfirst($type)}();
foreach ($links as $index =&gt; $link) {

 if ('self.version' === $link-&gt;getPrettyConstraint()) {
$links[$index] = new Link($link-&gt;getSource(), $link-&gt;getTarget(), new VersionConstraint('=', $this-&gt;version), $type, $this-&gt;version);
}
}
$this-&gt;$type = $links;
}


 foreach (array('conflicts', 'provides', 'replaces') as $type) {
$links = $aliasOf-&gt;{'get'.ucfirst($type)}();
$newLinks = array();
foreach ($links as $link) {

 if ('self.version' === $link-&gt;getPrettyConstraint()) {
$newLinks[] = new Link($link-&gt;getSource(), $link-&gt;getTarget(), new VersionConstraint('=', $this-&gt;version), $type, $this-&gt;version);
}
}
$this-&gt;$type = array_merge($links, $newLinks);
}
}

public function getAliasOf()
{
return $this-&gt;aliasOf;
}




public function getVersion()
{
return $this-&gt;version;
}




public function getStability()
{
return $this-&gt;stability;
}




public function getPrettyVersion()
{
return $this-&gt;prettyVersion;
}




public function isDev()
{
return $this-&gt;dev;
}




public function getRequires()
{
return $this-&gt;requires;
}




public function getConflicts()
{
return $this-&gt;conflicts;
}




public function getProvides()
{
return $this-&gt;provides;
}




public function getReplaces()
{
return $this-&gt;replaces;
}




public function getDevRequires()
{
return $this-&gt;devRequires;
}








public function setRootPackageAlias($value)
{
return $this-&gt;rootPackageAlias = $value;
}





public function isRootPackageAlias()
{
return $this-&gt;rootPackageAlias;
}




public function getAlias()
{
return '';
}




public function getPrettyAlias()
{
return '';
}





public function getType()
{
return $this-&gt;aliasOf-&gt;getType();
}
public function getTargetDir()
{
return $this-&gt;aliasOf-&gt;getTargetDir();
}
public function getExtra()
{
return $this-&gt;aliasOf-&gt;getExtra();
}
public function setInstallationSource($type)
{
$this-&gt;aliasOf-&gt;setInstallationSource($type);
}
public function getInstallationSource()
{
return $this-&gt;aliasOf-&gt;getInstallationSource();
}
public function getSourceType()
{
return $this-&gt;aliasOf-&gt;getSourceType();
}
public function getSourceUrl()
{
return $this-&gt;aliasOf-&gt;getSourceUrl();
}
public function getSourceReference()
{
return $this-&gt;aliasOf-&gt;getSourceReference();
}
public function setSourceReference($reference)
{
return $this-&gt;aliasOf-&gt;setSourceReference($reference);
}
public function getDistType()
{
return $this-&gt;aliasOf-&gt;getDistType();
}
public function getDistUrl()
{
return $this-&gt;aliasOf-&gt;getDistUrl();
}
public function getDistReference()
{
return $this-&gt;aliasOf-&gt;getDistReference();
}
public function getDistSha1Checksum()
{
return $this-&gt;aliasOf-&gt;getDistSha1Checksum();
}
public function getScripts()
{
return $this-&gt;aliasOf-&gt;getScripts();
}
public function setAliases(array $aliases)
{
return $this-&gt;aliasOf-&gt;setAliases($aliases);
}
public function getAliases()
{
return $this-&gt;aliasOf-&gt;getAliases();
}
public function getLicense()
{
return $this-&gt;aliasOf-&gt;getLicense();
}
public function getAutoload()
{
return $this-&gt;aliasOf-&gt;getAutoload();
}
public function getIncludePaths()
{
return $this-&gt;aliasOf-&gt;getIncludePaths();
}
public function getRepositories()
{
return $this-&gt;aliasOf-&gt;getRepositories();
}
public function getReleaseDate()
{
return $this-&gt;aliasOf-&gt;getReleaseDate();
}
public function getBinaries()
{
return $this-&gt;aliasOf-&gt;getBinaries();
}
public function getKeywords()
{
return $this-&gt;aliasOf-&gt;getKeywords();
}
public function getDescription()
{
return $this-&gt;aliasOf-&gt;getDescription();
}
public function getHomepage()
{
return $this-&gt;aliasOf-&gt;getHomepage();
}
public function getSuggests()
{
return $this-&gt;aliasOf-&gt;getSuggests();
}
public function getAuthors()
{
return $this-&gt;aliasOf-&gt;getAuthors();
}
public function getSupport()
{
return $this-&gt;aliasOf-&gt;getSupport();
}
public function __toString()
{
return parent::__toString().' (alias of '.$this-&gt;aliasOf-&gt;getVersion().')';
}
}
&lt;?php











namespace Composer\Package;

use Composer\Package\LinkConstraint\LinkConstraintInterface;
use Composer\Package\PackageInterface;






class Link
{
protected $source;
protected $target;
protected $constraint;
protected $description;









public function __construct($source, $target, LinkConstraintInterface $constraint = null, $description = 'relates to', $prettyConstraint = null)
{
$this-&gt;source = strtolower($source);
$this-&gt;target = strtolower($target);
$this-&gt;constraint = $constraint;
$this-&gt;description = $description;
$this-&gt;prettyConstraint = $prettyConstraint;
}

public function getSource()
{
return $this-&gt;source;
}

public function getTarget()
{
return $this-&gt;target;
}

public function getConstraint()
{
return $this-&gt;constraint;
}

public function getPrettyConstraint()
{
if (null === $this-&gt;prettyConstraint) {
throw new \UnexpectedValueException(sprintf('Link %s has been misconfigured and had no prettyConstraint given.', $this));
}

return $this-&gt;prettyConstraint;
}

public function __toString()
{
return $this-&gt;source.' '.$this-&gt;description.' '.$this-&gt;target.' ('.$this-&gt;constraint.')';
}

public function getPrettyString(PackageInterface $sourcePackage)
{
return $sourcePackage-&gt;getPrettyString().' '.$this-&gt;description.' '.$this-&gt;target.' '.$this-&gt;constraint-&gt;getPrettyString().'';
}
}
&lt;?php











namespace Composer\Package\LinkConstraint;






class MultiConstraint implements LinkConstraintInterface
{
protected $constraints;
protected $prettyString;






public function __construct(array $constraints)
{
$this-&gt;constraints = $constraints;
}

public function matches(LinkConstraintInterface $provider)
{
foreach ($this-&gt;constraints as $constraint) {
if (!$constraint-&gt;matches($provider)) {
return false;
}
}

return true;
}

public function setPrettyString($prettyString)
{
$this-&gt;prettyString = $prettyString;
}

public function getPrettyString()
{
if ($this-&gt;prettyString) {
return $this-&gt;prettyString;
}

return $this-&gt;__toString();
}

public function __toString()
{
$constraints = array();
foreach ($this-&gt;constraints as $constraint) {
$constraints[] = $constraint-&gt;__toString();
}

return '['.implode(', ', $constraints).']';
}
}
&lt;?php











namespace Composer\Package\LinkConstraint;








class VersionConstraint extends SpecificConstraint
{
private $operator;
private $version;







public function __construct($operator, $version)
{
if ('=' === $operator) {
$operator = '==';
}

if ('&lt;&gt;' === $operator) {
$operator = '!=';
}

$this-&gt;operator = $operator;
$this-&gt;version = $version;
}

public function versionCompare($a, $b, $operator)
{
if ('dev-' === substr($a, 0, 4) &amp;&amp; 'dev-' === substr($b, 0, 4)) {
return $operator == '==' &amp;&amp; $a === $b;
}

return version_compare($a, $b, $operator);
}





public function matchSpecific(VersionConstraint $provider)
{
$noEqualOp = str_replace('=', '', $this-&gt;operator);
$providerNoEqualOp = str_replace('=', '', $provider-&gt;operator);

$isEqualOp = '==' === $this-&gt;operator;
$isNonEqualOp = '!=' === $this-&gt;operator;
$isProviderEqualOp = '==' === $provider-&gt;operator;
$isProviderNonEqualOp = '!=' === $provider-&gt;operator;


 
 if ($isNonEqualOp || $isProviderNonEqualOp) {
return !$isEqualOp &amp;&amp; !$isProviderEqualOp
|| $this-&gt;versionCompare($provider-&gt;version, $this-&gt;version, '!=');
}


 
 if ($this-&gt;operator != '==' &amp;&amp; $noEqualOp == $providerNoEqualOp) {
return true;
}

if ($this-&gt;versionCompare($provider-&gt;version, $this-&gt;version, $this-&gt;operator)) {

 
 if ($provider-&gt;version == $this-&gt;version &amp;&amp; $provider-&gt;operator == $providerNoEqualOp &amp;&amp; $this-&gt;operator != $noEqualOp) {
return false;
}

return true;
}

return false;
}

public function __toString()
{
return $this-&gt;operator.' '.$this-&gt;version;
}
}
&lt;?php











namespace Composer\Package\LinkConstraint;






abstract class SpecificConstraint implements LinkConstraintInterface
{
protected $prettyString;

public function matches(LinkConstraintInterface $provider)
{
if ($provider instanceof MultiConstraint) {

 return $provider-&gt;matches($this);
} elseif ($provider instanceof $this) {
return $this-&gt;matchSpecific($provider);
}

return true;
}

public function setPrettyString($prettyString)
{
$this-&gt;prettyString = $prettyString;
}

public function getPrettyString()
{
if ($this-&gt;prettyString) {
return $this-&gt;prettyString;
}

return $this-&gt;__toString();
}


 
 

}
&lt;?php











namespace Composer\Package\LinkConstraint;






interface LinkConstraintInterface
{
public function matches(LinkConstraintInterface $provider);
public function setPrettyString($prettyString);
public function getPrettyString();
public function __toString();
}
&lt;?php











namespace Composer;

use Composer\IO\IOInterface;






class Cache
{
private $io;
private $root;
private $enabled = true;

public function __construct(IOInterface $io, $cacheDir)
{
$this-&gt;io = $io;
$this-&gt;root = rtrim($cacheDir, '/\\') . '/';

if (!is_dir($this-&gt;root)) {
if (!@mkdir($this-&gt;root, 0777, true)) {
$this-&gt;enabled = false;
}
}
}

public function getRoot()
{
return $this-&gt;root;
}

public function read($file)
{
$file = preg_replace('{[^a-z0-9.]}i', '-', $file);
if ($this-&gt;enabled &amp;&amp; file_exists($this-&gt;root . $file)) {
return file_get_contents($this-&gt;root . $file);
}
}

public function write($file, $contents)
{
if ($this-&gt;enabled) {
$file = preg_replace('{[^a-z0-9.]}i', '-', $file);
file_put_contents($this-&gt;root . $file, $contents);
}
}

public function sha1($file)
{
$file = preg_replace('{[^a-z0-9.]}i', '-', $file);
if ($this-&gt;enabled &amp;&amp; file_exists($this-&gt;root . $file)) {
return sha1_file($this-&gt;root . $file);
}
}
}
&lt;?php











namespace Composer\DependencyResolver;

use Composer\Package\PackageInterface;




interface PolicyInterface
{
public function versionCompare(PackageInterface $a, PackageInterface $b, $operator);
public function findUpdatePackages(Pool $pool, array $installedMap, PackageInterface $package);
public function selectPreferedPackages(Pool $pool, array $installedMap, array $literals);
}
&lt;?php











namespace Composer\DependencyResolver;




class RuleSet implements \IteratorAggregate, \Countable
{

 const TYPE_PACKAGE = 0;
const TYPE_JOB = 1;
const TYPE_LEARNED = 4;

protected static $types = array(
-1 =&gt; 'UNKNOWN',
self::TYPE_PACKAGE =&gt; 'PACKAGE',
self::TYPE_JOB =&gt; 'JOB',
self::TYPE_LEARNED =&gt; 'LEARNED',
);

protected $rules;
protected $ruleById;
protected $nextRuleId;

protected $rulesByHash;

public function __construct()
{
$this-&gt;nextRuleId = 0;

foreach ($this-&gt;getTypes() as $type) {
$this-&gt;rules[$type] = array();
}

$this-&gt;rulesByHash = array();
}

public function add(Rule $rule, $type)
{
if (!isset(self::$types[$type])) {
throw new \OutOfBoundsException('Unknown rule type: ' . $type);
}

if (!isset($this-&gt;rules[$type])) {
$this-&gt;rules[$type] = array();
}

$this-&gt;rules[$type][] = $rule;
$this-&gt;ruleById[$this-&gt;nextRuleId] = $rule;
$rule-&gt;setType($type);

$rule-&gt;setId($this-&gt;nextRuleId);
$this-&gt;nextRuleId++;

$hash = $rule-&gt;getHash();
if (!isset($this-&gt;rulesByHash[$hash])) {
$this-&gt;rulesByHash[$hash] = array($rule);
} else {
$this-&gt;rulesByHash[$hash][] = $rule;
}
}

public function count()
{
return $this-&gt;nextRuleId;
}

public function ruleById($id)
{
return $this-&gt;ruleById[$id];
}

public function getRules()
{
return $this-&gt;rules;
}

public function getIterator()
{
return new RuleSetIterator($this-&gt;getRules());
}

public function getIteratorFor($types)
{
if (!is_array($types)) {
$types = array($types);
}

$allRules = $this-&gt;getRules();
$rules = array();

foreach ($types as $type) {
$rules[$type] = $allRules[$type];
}

return new RuleSetIterator($rules);
}

public function getIteratorWithout($types)
{
if (!is_array($types)) {
$types = array($types);
}

$rules = $this-&gt;getRules();

foreach ($types as $type) {
unset($rules[$type]);
}

return new RuleSetIterator($rules);
}

public function getTypes()
{
$types = self::$types;
unset($types[-1]);

return array_keys($types);
}

public function containsEqual($rule)
{
if (isset($this-&gt;rulesByHash[$rule-&gt;getHash()])) {
$potentialDuplicates = $this-&gt;rulesByHash[$rule-&gt;getHash()];
foreach ($potentialDuplicates as $potentialDuplicate) {
if ($rule-&gt;equals($potentialDuplicate)) {
return true;
}
}
}

return false;
}

public function __toString()
{
$string = "\n";
foreach ($this-&gt;rules as $type =&gt; $rules) {
$string .= str_pad(self::$types[$type], 8, ' ') . ": ";
foreach ($rules as $rule) {
$string .= $rule."\n";
}
$string .= "\n\n";
}

return $string;
}
}
&lt;?php











namespace Composer\DependencyResolver;




class SolverBugException extends \RuntimeException
{
public function __construct($message)
{
parent::__construct(
$message."\nThis exception was most likely caused by a bug in Composer.\n".
"Please report the command you ran, the exact error you received, and your composer.json on https://github.com/composer/composer/issues - thank you!\n");
}
}
&lt;?php











namespace Composer\DependencyResolver;

use Composer\Package\PackageInterface;
use Composer\Package\AliasPackage;
use Composer\Package\LinkConstraint\VersionConstraint;




class DefaultPolicy implements PolicyInterface
{
public function versionCompare(PackageInterface $a, PackageInterface $b, $operator)
{
$constraint = new VersionConstraint($operator, $b-&gt;getVersion());
$version = new VersionConstraint('==', $a-&gt;getVersion());

return $constraint-&gt;matchSpecific($version);
}

public function findUpdatePackages(Pool $pool, array $installedMap, PackageInterface $package)
{
$packages = array();

foreach ($pool-&gt;whatProvides($package-&gt;getName()) as $candidate) {
if ($candidate !== $package) {
$packages[] = $candidate;
}
}

return $packages;
}

public function getPriority(Pool $pool, PackageInterface $package)
{
return $pool-&gt;getPriority($package-&gt;getRepository());
}

public function selectPreferedPackages(Pool $pool, array $installedMap, array $literals)
{
$packages = $this-&gt;groupLiteralsByNamePreferInstalled($pool, $installedMap, $literals);

foreach ($packages as &amp;$literals) {
$policy = $this;
usort($literals, function ($a, $b) use ($policy, $pool, $installedMap) {
return $policy-&gt;compareByPriorityPreferInstalled($pool, $installedMap, $pool-&gt;literalToPackage($a), $pool-&gt;literalToPackage($b), true);
});
}

foreach ($packages as &amp;$literals) {
$literals = $this-&gt;pruneToBestVersion($pool, $literals);

$literals = $this-&gt;pruneToHighestPriorityOrInstalled($pool, $installedMap, $literals);

$literals = $this-&gt;pruneRemoteAliases($pool, $literals);
}

$selected = call_user_func_array('array_merge', $packages);


 usort($selected, function ($a, $b) use ($policy, $pool, $installedMap) {
return $policy-&gt;compareByPriorityPreferInstalled($pool, $installedMap, $pool-&gt;literalToPackage($a), $pool-&gt;literalToPackage($b));
});

return $selected;
}

protected function groupLiteralsByNamePreferInstalled(Pool $pool, array $installedMap, $literals)
{
$packages = array();
foreach ($literals as $literal) {
$packageName = $pool-&gt;literalToPackage($literal)-&gt;getName();

if (!isset($packages[$packageName])) {
$packages[$packageName] = array();
}

if (isset($installedMap[abs($literal)])) {
array_unshift($packages[$packageName], $literal);
} else {
$packages[$packageName][] = $literal;
}
}

return $packages;
}

public function compareByPriorityPreferInstalled(Pool $pool, array $installedMap, PackageInterface $a, PackageInterface $b, $ignoreReplace = false)
{
if ($a-&gt;getRepository() === $b-&gt;getRepository()) {

 if ($a-&gt;getName() === $b-&gt;getName()) {
$aAliased = $a instanceof AliasPackage;
$bAliased = $b instanceof AliasPackage;
if ($aAliased &amp;&amp; !$bAliased) {
return -1; 
 }
if (!$aAliased &amp;&amp; $bAliased) {
return 1; 
 }
}

if (!$ignoreReplace) {

 if ($this-&gt;replaces($a, $b)) {
return 1; 
 }
if ($this-&gt;replaces($b, $a)) {
return -1; 
 }
}


 if ($a-&gt;getId() === $b-&gt;getId()) {
return 0;
}

return ($a-&gt;getId() &lt; $b-&gt;getId()) ? -1 : 1;
}

if (isset($installedMap[$a-&gt;getId()])) {
return -1;
}

if (isset($installedMap[$b-&gt;getId()])) {
return 1;
}

return ($this-&gt;getPriority($pool, $a) &gt; $this-&gt;getPriority($pool, $b)) ? -1 : 1;
}











protected function replaces(PackageInterface $source, PackageInterface $target)
{
foreach ($source-&gt;getReplaces() as $link) {
if ($link-&gt;getTarget() === $target-&gt;getName()


 ) {
return true;
}
}

return false;
}

protected function pruneToBestVersion(Pool $pool, $literals)
{
$bestLiterals = array($literals[0]);
$bestPackage = $pool-&gt;literalToPackage($literals[0]);
foreach ($literals as $i =&gt; $literal) {
if (0 === $i) {
continue;
}

$package = $pool-&gt;literalToPackage($literal);

if ($this-&gt;versionCompare($package, $bestPackage, '&gt;')) {
$bestPackage = $package;
$bestLiterals = array($literal);
} elseif ($this-&gt;versionCompare($package, $bestPackage, '==')) {
$bestLiterals[] = $literal;
}
}

return $bestLiterals;
}

protected function selectNewestPackages(array $installedMap, array $literals)
{
$maxLiterals = array($literals[0]);
$maxPackage = $literals[0]-&gt;getPackage();
foreach ($literals as $i =&gt; $literal) {
if (0 === $i) {
continue;
}

if ($this-&gt;versionCompare($literal-&gt;getPackage(), $maxPackage, '&gt;')) {
$maxPackage = $literal-&gt;getPackage();
$maxLiterals = array($literal);
} elseif ($this-&gt;versionCompare($literal-&gt;getPackage(), $maxPackage, '==')) {
$maxLiterals[] = $literal;
}
}

return $maxLiterals;
}




protected function pruneToHighestPriorityOrInstalled(Pool $pool, array $installedMap, array $literals)
{
$selected = array();

$priority = null;

foreach ($literals as $literal) {
$package = $pool-&gt;literalToPackage($literal);

if (isset($installedMap[$package-&gt;getId()])) {
$selected[] = $literal;
continue;
}

if (null === $priority) {
$priority = $this-&gt;getPriority($pool, $package);
}

if ($this-&gt;getPriority($pool, $package) != $priority) {
break;
}

$selected[] = $literal;
}

return $selected;
}






protected function pruneRemoteAliases(Pool $pool, array $literals)
{
$hasLocalAlias = false;

foreach ($literals as $literal) {
$package = $pool-&gt;literalToPackage($literal);

if ($package instanceof AliasPackage &amp;&amp; $package-&gt;isRootPackageAlias()) {
$hasLocalAlias = true;
break;
}
}

if (!$hasLocalAlias) {
return $literals;
}

$selected = array();
foreach ($literals as $literal) {
$package = $pool-&gt;literalToPackage($literal);

if ($package instanceof AliasPackage &amp;&amp; $package-&gt;isRootPackageAlias()) {
$selected[] = $literal;
}
}

return $selected;
}
}
&lt;?php











namespace Composer\DependencyResolver;






class Decisions implements \Iterator, \Countable
{
const DECISION_LITERAL = 0;
const DECISION_REASON = 1;

protected $pool;
protected $decisionMap;
protected $decisionQueue = array();

public function __construct($pool)
{
$this-&gt;pool = $pool;

if (version_compare(PHP_VERSION, '5.3.4', '&gt;=')) {
$this-&gt;decisionMap = new \SplFixedArray($this-&gt;pool-&gt;getMaxId() + 1);
} else {
$this-&gt;decisionMap = array_fill(0, $this-&gt;pool-&gt;getMaxId() + 1, 0);
}
}

public function decide($literal, $level, $why)
{
$this-&gt;addDecision($literal, $level);
$this-&gt;decisionQueue[] = array(
self::DECISION_LITERAL =&gt; $literal,
self::DECISION_REASON =&gt; $why,
);
}

public function satisfy($literal)
{
$packageId = abs($literal);

return (
$literal &gt; 0 &amp;&amp; $this-&gt;decisionMap[$packageId] &gt; 0 ||
$literal &lt; 0 &amp;&amp; $this-&gt;decisionMap[$packageId] &lt; 0
);
}

public function conflict($literal)
{
$packageId = abs($literal);

return (
($this-&gt;decisionMap[$packageId] &gt; 0 &amp;&amp; $literal &lt; 0) ||
($this-&gt;decisionMap[$packageId] &lt; 0 &amp;&amp; $literal &gt; 0)
);
}

public function decided($literalOrPackageId)
{
return $this-&gt;decisionMap[abs($literalOrPackageId)] != 0;
}

public function undecided($literalOrPackageId)
{
return $this-&gt;decisionMap[abs($literalOrPackageId)] == 0;
}

public function decidedInstall($literalOrPackageId)
{
return $this-&gt;decisionMap[abs($literalOrPackageId)] &gt; 0;
}

public function decisionLevel($literalOrPackageId)
{
return abs($this-&gt;decisionMap[abs($literalOrPackageId)]);
}

public function decisionRule($literalOrPackageId)
{
$packageId = abs($literalOrPackageId);

foreach ($this-&gt;decisionQueue as $i =&gt; $decision) {
if ($packageId === abs($decision[self::DECISION_LITERAL])) {
return $decision[self::DECISION_REASON];
}
}

return null;
}

public function atOffset($queueOffset)
{
return $this-&gt;decisionQueue[$queueOffset];
}

public function validOffset($queueOffset)
{
return $queueOffset &gt;= 0 &amp;&amp; $queueOffset &lt; count($this-&gt;decisionQueue);
}

public function lastReason()
{
return $this-&gt;decisionQueue[count($this-&gt;decisionQueue) - 1][self::DECISION_REASON];
}

public function lastLiteral()
{
return $this-&gt;decisionQueue[count($this-&gt;decisionQueue) - 1][self::DECISION_LITERAL];
}

public function reset()
{
while ($decision = array_pop($this-&gt;decisionQueue)) {
$this-&gt;decisionMap[abs($decision[self::DECISION_LITERAL])] = 0;
}
}

public function resetToOffset($offset)
{
while (count($this-&gt;decisionQueue) &gt; $offset + 1) {
$decision = array_pop($this-&gt;decisionQueue);
$this-&gt;decisionMap[abs($decision[self::DECISION_LITERAL])] = 0;
}
}

public function revertLast()
{
$this-&gt;decisionMap[abs($this-&gt;lastLiteral())] = 0;
array_pop($this-&gt;decisionQueue);
}

public function count()
{
return count($this-&gt;decisionQueue);
}

public function rewind()
{
end($this-&gt;decisionQueue);
}

public function current()
{
return current($this-&gt;decisionQueue);
}

public function key()
{
return key($this-&gt;decisionQueue);
}

public function next()
{
return prev($this-&gt;decisionQueue);
}

public function valid()
{
return false !== current($this-&gt;decisionQueue);
}

public function isEmpty()
{
return count($this-&gt;decisionQueue) === 0;
}

protected function addDecision($literal, $level)
{
$packageId = abs($literal);

$previousDecision = $this-&gt;decisionMap[$packageId];
if ($previousDecision != 0) {
$literalString = $this-&gt;pool-&gt;literalToString($literal);
$package = $this-&gt;pool-&gt;literalToPackage($literal);
throw new SolverBugException(
"Trying to decide $literalString on level $level, even though $package was previously decided as ".(int) $previousDecision."."
);
}

if ($literal &gt; 0) {
$this-&gt;decisionMap[$packageId] = $level;
} else {
$this-&gt;decisionMap[$packageId] = -$level;
}
}
}
&lt;?php











namespace Composer\DependencyResolver;








class RuleWatchNode
{
public $watch1;
public $watch2;

protected $rule;






public function __construct($rule)
{
$this-&gt;rule = $rule;

$literals = $rule-&gt;getLiterals();

$this-&gt;watch1 = count($literals) &gt; 0 ? $literals[0] : 0;
$this-&gt;watch2 = count($literals) &gt; 1 ? $literals[1] : 0;
}









public function watch2OnHighest(Decisions $decisions)
{
$literals = $this-&gt;rule-&gt;getLiterals();


 if ($literals &lt; 3) {
return;
}

$watchLevel = 0;

foreach ($literals as $literal) {
$level = $decisions-&gt;decisionLevel($literal);

if ($level &gt; $watchLevel) {
$this-&gt;rule-&gt;watch2 = $literal;
$watchLevel = $level;
}
}
}






public function getRule()
{
return $this-&gt;rule;
}







public function getOtherWatch($literal)
{
if ($this-&gt;watch1 == $literal) {
return $this-&gt;watch2;
} else {
return $this-&gt;watch1;
}
}







public function moveWatch($from, $to)
{
if ($this-&gt;watch1 == $from) {
$this-&gt;watch1 = $to;
} else {
$this-&gt;watch2 = $to;
}
}
}
&lt;?php











namespace Composer\DependencyResolver;




class SolverProblemsException extends \RuntimeException
{
protected $problems;
protected $installedMap;

public function __construct(array $problems, array $installedMap)
{
$this-&gt;problems = $problems;
$this-&gt;installedMap = $installedMap;

parent::__construct($this-&gt;createMessage());
}

protected function createMessage()
{
$text = "\n";
foreach ($this-&gt;problems as $i =&gt; $problem) {
$text .= "  Problem ".($i+1).$problem-&gt;getPrettyString($this-&gt;installedMap)."\n";
}

if (strpos($text, 'could not be found') || strpos($text, 'no matching package found')) {
$text .= "\nPotential causes:\n - A typo in the package name\n - The package is not available in a stable-enough version according to your minimum-stability setting\n   see https://groups.google.com/d/topic/composer-dev/_g3ASeIFlrc/discussion for more details.\n";
}

return $text;
}

public function getProblems()
{
return $this-&gt;problems;
}
}
&lt;?php











namespace Composer\DependencyResolver;

use Composer\Package\AliasPackage;
use Composer\DependencyResolver\Operation;




class Transaction
{
protected $policy;
protected $pool;
protected $installedMap;
protected $decisions;
protected $transaction;

public function __construct($policy, $pool, $installedMap, $decisions)
{
$this-&gt;policy = $policy;
$this-&gt;pool = $pool;
$this-&gt;installedMap = $installedMap;
$this-&gt;decisions = $decisions;
$this-&gt;transaction = array();
}

public function getOperations()
{
$installMeansUpdateMap = $this-&gt;findUpdates();

$updateMap = array();
$installMap = array();
$uninstallMap = array();

foreach ($this-&gt;decisions as $i =&gt; $decision) {
$literal = $decision[Decisions::DECISION_LITERAL];
$reason = $decision[Decisions::DECISION_REASON];

$package = $this-&gt;pool-&gt;literalToPackage($literal);


 if (($literal &gt; 0) == (isset($this-&gt;installedMap[$package-&gt;getId()]))) {
continue;
}

if ($literal &gt; 0) {
if (isset($installMeansUpdateMap[abs($literal)]) &amp;&amp; !$package instanceof AliasPackage) {

$source = $installMeansUpdateMap[abs($literal)];

$updateMap[$package-&gt;getId()] = array(
'package' =&gt; $package,
'source' =&gt; $source,
'reason' =&gt; $reason,
);


 unset($installMeansUpdateMap[abs($literal)]);
$ignoreRemove[$source-&gt;getId()] = true;
} else {
$installMap[$package-&gt;getId()] = array(
'package' =&gt; $package,
'reason' =&gt; $reason,
);
}
}
}

foreach ($this-&gt;decisions as $i =&gt; $decision) {
$literal = $decision[Decisions::DECISION_LITERAL];
$package = $this-&gt;pool-&gt;literalToPackage($literal);

if ($literal &lt;= 0 &amp;&amp;
isset($this-&gt;installedMap[$package-&gt;getId()]) &amp;&amp;
!isset($ignoreRemove[$package-&gt;getId()])) {
$uninstallMap[$package-&gt;getId()] = array(
'package' =&gt; $package,
'reason' =&gt; $reason,
);

}
}

$this-&gt;transactionFromMaps($installMap, $updateMap, $uninstallMap);

return $this-&gt;transaction;
}

protected function transactionFromMaps($installMap, $updateMap, $uninstallMap)
{
$queue = array_map(function ($operation) {
return $operation['package'];
},
$this-&gt;findRootPackages($installMap, $updateMap)
);

$visited = array();

while (!empty($queue)) {
$package = array_pop($queue);
$packageId = $package-&gt;getId();

if (!isset($visited[$packageId])) {
array_push($queue, $package);

if ($package instanceof AliasPackage) {
array_push($queue, $package-&gt;getAliasOf());
} else {
foreach ($package-&gt;getRequires() as $link) {
$possibleRequires = $this-&gt;pool-&gt;whatProvides($link-&gt;getTarget(), $link-&gt;getConstraint());

foreach ($possibleRequires as $require) {
array_push($queue, $require);
}
}
}

$visited[$package-&gt;getId()] = true;
} else {
if (isset($installMap[$packageId])) {
$this-&gt;install(
$installMap[$packageId]['package'],
$installMap[$packageId]['reason']
);
unset($installMap[$packageId]);
}
if (isset($updateMap[$packageId])) {
$this-&gt;update(
$updateMap[$packageId]['source'],
$updateMap[$packageId]['package'],
$updateMap[$packageId]['reason']
);
unset($updateMap[$packageId]);
}
}
}

foreach ($uninstallMap as $uninstall) {
$this-&gt;uninstall($uninstall['package'], $uninstall['reason']);
}
}

protected function findRootPackages($installMap, $updateMap)
{
$packages = $installMap + $updateMap;
$roots = $packages;

foreach ($packages as $packageId =&gt; $operation) {
$package = $operation['package'];

if (!isset($roots[$packageId])) {
continue;
}

foreach ($package-&gt;getRequires() as $link) {
$possibleRequires = $this-&gt;pool-&gt;whatProvides($link-&gt;getTarget(), $link-&gt;getConstraint());

foreach ($possibleRequires as $require) {
unset($roots[$require-&gt;getId()]);
}
}
}

return $roots;
}

protected function findUpdates()
{
$installMeansUpdateMap = array();

foreach ($this-&gt;decisions as $i =&gt; $decision) {
$literal = $decision[Decisions::DECISION_LITERAL];
$package = $this-&gt;pool-&gt;literalToPackage($literal);

if ($package instanceof AliasPackage) {
continue;
}


 if ($literal &lt;= 0 &amp;&amp; isset($this-&gt;installedMap[$package-&gt;getId()])) {
$updates = $this-&gt;policy-&gt;findUpdatePackages($this-&gt;pool, $this-&gt;installedMap, $package);

$literals = array($package-&gt;getId());

foreach ($updates as $update) {
$literals[] = $update-&gt;getId();
}

foreach ($literals as $updateLiteral) {
if ($updateLiteral !== $literal) {
$installMeansUpdateMap[abs($updateLiteral)] = $package;
}
}
}
}

return $installMeansUpdateMap;
}

protected function install($package, $reason)
{
if ($package instanceof AliasPackage) {
return $this-&gt;markAliasInstalled($package, $reason);
}

$this-&gt;transaction[] = new Operation\InstallOperation($package, $reason);
}

protected function update($from, $to, $reason)
{
$this-&gt;transaction[] = new Operation\UpdateOperation($from, $to, $reason);
}

protected function uninstall($package, $reason)
{
if ($package instanceof AliasPackage) {
return $this-&gt;markAliasUninstalled($package, $reason);
}

$this-&gt;transaction[] = new Operation\UninstallOperation($package, $reason);
}

protected function markAliasInstalled($package, $reason)
{
$this-&gt;transaction[] = new Operation\MarkAliasInstalledOperation($package, $reason);
}

protected function markAliasUninstalled($package, $reason)
{
$this-&gt;transaction[] = new Operation\MarkAliasUninstalledOperation($package, $reason);
}
}
&lt;?php











namespace Composer\DependencyResolver\Operation;

use Composer\Package\PackageInterface;






class UninstallOperation extends SolverOperation
{
protected $package;







public function __construct(PackageInterface $package, $reason = null)
{
parent::__construct($reason);

$this-&gt;package = $package;
}






public function getPackage()
{
return $this-&gt;package;
}






public function getJobType()
{
return 'uninstall';
}




public function __toString()
{
return 'Uninstalling '.$this-&gt;package-&gt;getPrettyName().' ('.$this-&gt;formatVersion($this-&gt;package).')';
}
}
&lt;?php











namespace Composer\DependencyResolver\Operation;

use Composer\Package\PackageInterface;






class UpdateOperation extends SolverOperation
{
protected $initialPackage;
protected $targetPackage;








public function __construct(PackageInterface $initial, PackageInterface $target, $reason = null)
{
parent::__construct($reason);

$this-&gt;initialPackage = $initial;
$this-&gt;targetPackage = $target;
}






public function getInitialPackage()
{
return $this-&gt;initialPackage;
}






public function getTargetPackage()
{
return $this-&gt;targetPackage;
}






public function getJobType()
{
return 'update';
}




public function __toString()
{
return 'Updating '.$this-&gt;initialPackage-&gt;getPrettyName().' ('.$this-&gt;formatVersion($this-&gt;initialPackage).') to '.
$this-&gt;targetPackage-&gt;getPrettyName(). ' ('.$this-&gt;formatVersion($this-&gt;targetPackage).')';
}
}
&lt;?php











namespace Composer\DependencyResolver\Operation;

use Composer\Package\AliasPackage;






class MarkAliasInstalledOperation extends SolverOperation
{
protected $package;







public function __construct(AliasPackage $package, $reason = null)
{
parent::__construct($reason);

$this-&gt;package = $package;
}






public function getPackage()
{
return $this-&gt;package;
}






public function getJobType()
{
return 'markAliasInstalled';
}




public function __toString()
{
return 'Marking '.$this-&gt;package-&gt;getPrettyName().' ('.$this-&gt;formatVersion($this-&gt;package).') as installed, alias of '.$this-&gt;package-&gt;getAliasOf()-&gt;getPrettyName().' ('.$this-&gt;formatVersion($this-&gt;package-&gt;getAliasOf()).')';
}
}
&lt;?php











namespace Composer\DependencyResolver\Operation;

use Composer\Package\PackageInterface;






class InstallOperation extends SolverOperation
{
protected $package;







public function __construct(PackageInterface $package, $reason = null)
{
parent::__construct($reason);

$this-&gt;package = $package;
}






public function getPackage()
{
return $this-&gt;package;
}






public function getJobType()
{
return 'install';
}




public function __toString()
{
return 'Installing '.$this-&gt;package-&gt;getPrettyName().' ('.$this-&gt;formatVersion($this-&gt;package).')';
}
}
&lt;?php











namespace Composer\DependencyResolver\Operation;

use Composer\Package\Version\VersionParser;
use Composer\Package\PackageInterface;






abstract class SolverOperation implements OperationInterface
{
protected $reason;






public function __construct($reason = null)
{
$this-&gt;reason = $reason;
}






public function getReason()
{
return $this-&gt;reason;
}

protected function formatVersion(PackageInterface $package)
{
return VersionParser::formatVersion($package);
}
}
&lt;?php











namespace Composer\DependencyResolver\Operation;

use Composer\Package\AliasPackage;






class MarkAliasUninstalledOperation extends SolverOperation
{
protected $package;







public function __construct(AliasPackage $package, $reason = null)
{
parent::__construct($reason);

$this-&gt;package = $package;
}






public function getPackage()
{
return $this-&gt;package;
}






public function getJobType()
{
return 'markAliasUninstalled';
}




public function __toString()
{
return 'Marking '.$this-&gt;package-&gt;getPrettyName().' ('.$this-&gt;formatVersion($this-&gt;package).') as uninstalled, alias of '.$this-&gt;package-&gt;getAliasOf()-&gt;getPrettyName().' ('.$this-&gt;formatVersion($this-&gt;package-&gt;getAliasOf()).')';
}
}
&lt;?php











namespace Composer\DependencyResolver\Operation;






interface OperationInterface
{





public function getJobType();






public function getReason();






public function __toString();
}
&lt;?php











namespace Composer\DependencyResolver;

use Composer\Package\BasePackage;
use Composer\Package\LinkConstraint\LinkConstraintInterface;
use Composer\Repository\RepositoryInterface;
use Composer\Repository\CompositeRepository;
use Composer\Repository\InstalledRepositoryInterface;
use Composer\Repository\PlatformRepository;







class Pool
{
protected $repositories = array();
protected $packages = array();
protected $packageByName = array();
protected $acceptableStabilities;
protected $stabilityFlags;

public function __construct($minimumStability = 'stable', array $stabilityFlags = array())
{
$stabilities = BasePackage::$stabilities;
$this-&gt;acceptableStabilities = array();
foreach (BasePackage::$stabilities as $stability =&gt; $value) {
if ($value &lt;= BasePackage::$stabilities[$minimumStability]) {
$this-&gt;acceptableStabilities[$stability] = $value;
}
}
$this-&gt;stabilityFlags = $stabilityFlags;
}






public function addRepository(RepositoryInterface $repo)
{
if ($repo instanceof CompositeRepository) {
$repos = $repo-&gt;getRepositories();
} else {
$repos = array($repo);
}

$id = count($this-&gt;packages) + 1;
foreach ($repos as $repo) {
$this-&gt;repositories[] = $repo;

$exempt = $repo instanceof PlatformRepository || $repo instanceof InstalledRepositoryInterface;
foreach ($repo-&gt;getPackages() as $package) {
$name = $package-&gt;getName();
$stability = $package-&gt;getStability();
if (

 $exempt

 || (!isset($this-&gt;stabilityFlags[$name])
&amp;&amp; isset($this-&gt;acceptableStabilities[$stability]))

 || (isset($this-&gt;stabilityFlags[$name])
&amp;&amp; BasePackage::$stabilities[$stability] &lt;= $this-&gt;stabilityFlags[$name]
)
) {
$package-&gt;setId($id++);
$this-&gt;packages[] = $package;

foreach ($package-&gt;getNames() as $name) {
$this-&gt;packageByName[$name][] = $package;
}
}
}
}
}

public function getPriority(RepositoryInterface $repo)
{
$priority = array_search($repo, $this-&gt;repositories, true);

if (false === $priority) {
throw new \RuntimeException("Could not determine repository priority. The repository was not registered in the pool.");
}

return -$priority;
}







public function packageById($id)
{
return $this-&gt;packages[$id - 1];
}






public function getMaxId()
{
return count($this-&gt;packages);
}









public function whatProvides($name, LinkConstraintInterface $constraint = null)
{
if (!isset($this-&gt;packageByName[$name])) {
return array();
}

$candidates = $this-&gt;packageByName[$name];

if (null === $constraint) {
return $candidates;
}

$matches = $provideMatches = array();
$nameMatch = false;

foreach ($candidates as $candidate) {
switch ($candidate-&gt;matches($name, $constraint)) {
case BasePackage::MATCH_NONE:
break;

case BasePackage::MATCH_NAME:
$nameMatch = true;
break;

case BasePackage::MATCH:
$nameMatch = true;
$matches[] = $candidate;
break;

case BasePackage::MATCH_PROVIDE:
$provideMatches[] = $candidate;
break;

case BasePackage::MATCH_REPLACE:
$matches[] = $candidate;
break;

default:
throw new \UnexpectedValueException('Unexpected match type');
}
}


 if ($nameMatch) {
return $matches;
}

return array_merge($matches, $provideMatches);
}

public function literalToPackage($literal)
{
$packageId = abs($literal);

return $this-&gt;packageById($packageId);
}

public function literalToString($literal)
{
return ($literal &gt; 0 ? '+' : '-') . $this-&gt;literalToPackage($literal);
}

public function literalToPrettyString($literal, $installedMap)
{
$package = $this-&gt;literalToPackage($literal);

if (isset($installedMap[$package-&gt;getId()])) {
$prefix = ($literal &gt; 0 ? 'keep' : 'remove');
} else {
$prefix = ($literal &gt; 0 ? 'install' : 'don\'t install');
}

return $prefix.' '.$package-&gt;getPrettyString();
}
}
&lt;?php











namespace Composer\DependencyResolver;




class Rule
{
const RULE_INTERNAL_ALLOW_UPDATE = 1;
const RULE_JOB_INSTALL = 2;
const RULE_JOB_REMOVE = 3;
const RULE_PACKAGE_CONFLICT = 6;
const RULE_PACKAGE_REQUIRES = 7;
const RULE_PACKAGE_OBSOLETES = 8;
const RULE_INSTALLED_PACKAGE_OBSOLETES = 9;
const RULE_PACKAGE_SAME_NAME = 10;
const RULE_PACKAGE_IMPLICIT_OBSOLETES = 11;
const RULE_LEARNED = 12;
const RULE_PACKAGE_ALIAS = 13;

protected $pool;

protected $disabled;
protected $literals;
protected $type;
protected $id;

protected $job;

protected $ruleHash;

public function __construct(Pool $pool, array $literals, $reason, $reasonData, $job = null)
{
$this-&gt;pool = $pool;


 sort($literals);

$this-&gt;literals = $literals;
$this-&gt;reason = $reason;
$this-&gt;reasonData = $reasonData;

$this-&gt;disabled = false;

$this-&gt;job = $job;

$this-&gt;type = -1;

$this-&gt;ruleHash = substr(md5(implode(',', $this-&gt;literals)), 0, 5);
}

public function getHash()
{
return $this-&gt;ruleHash;
}

public function setId($id)
{
$this-&gt;id = $id;
}

public function getId()
{
return $this-&gt;id;
}

public function getJob()
{
return $this-&gt;job;
}









public function equals(Rule $rule)
{
if ($this-&gt;ruleHash !== $rule-&gt;ruleHash) {
return false;
}

if (count($this-&gt;literals) != count($rule-&gt;literals)) {
return false;
}

for ($i = 0, $n = count($this-&gt;literals); $i &lt; $n; $i++) {
if ($this-&gt;literals[$i] !== $rule-&gt;literals[$i]) {
return false;
}
}

return true;
}

public function setType($type)
{
$this-&gt;type = $type;
}

public function getType()
{
return $this-&gt;type;
}

public function disable()
{
$this-&gt;disabled = true;
}

public function enable()
{
$this-&gt;disabled = false;
}

public function isDisabled()
{
return $this-&gt;disabled;
}

public function isEnabled()
{
return !$this-&gt;disabled;
}

public function getLiterals()
{
return $this-&gt;literals;
}

public function isAssertion()
{
return 1 === count($this-&gt;literals);
}

public function getPrettyString(array $installedMap = array())
{
$ruleText = '';
foreach ($this-&gt;literals as $i =&gt; $literal) {
if ($i != 0) {
$ruleText .= '|';
}
$ruleText .= $this-&gt;pool-&gt;literalToPrettyString($literal, $installedMap);
}

switch ($this-&gt;reason) {
case self::RULE_INTERNAL_ALLOW_UPDATE:
return $ruleText;

case self::RULE_JOB_INSTALL:
return "Install command rule ($ruleText)";

case self::RULE_JOB_REMOVE:
return "Remove command rule ($ruleText)";

case self::RULE_PACKAGE_CONFLICT:
$package1 = $this-&gt;pool-&gt;literalToPackage($this-&gt;literals[0]);
$package2 = $this-&gt;pool-&gt;literalToPackage($this-&gt;literals[1]);

return $package1-&gt;getPrettyString().' conflicts with '.$package2-&gt;getPrettyString().'.';

case self::RULE_PACKAGE_REQUIRES:
$literals = $this-&gt;literals;
$sourceLiteral = array_shift($literals);
$sourcePackage = $this-&gt;pool-&gt;literalToPackage($sourceLiteral);

$requires = array();
foreach ($literals as $literal) {
$requires[] = $this-&gt;pool-&gt;literalToPackage($literal);
}

$text = $this-&gt;reasonData-&gt;getPrettyString($sourcePackage);
if ($requires) {
$requireText = array();
foreach ($requires as $require) {
$requireText[] = $require-&gt;getPrettyString();
}
$text .= ' -&gt; satisfiable by '.implode(', ', $requireText).'.';
} else {
$text .= ' -&gt; no matching package found.';
}

return $text;

case self::RULE_PACKAGE_OBSOLETES:
return $ruleText;
case self::RULE_INSTALLED_PACKAGE_OBSOLETES:
return $ruleText;
case self::RULE_PACKAGE_SAME_NAME:
$text = "Can only install one of: ";

$packages = array();
foreach ($this-&gt;literals as $i =&gt; $literal) {
$packages[] = $this-&gt;pool-&gt;literalToPackage($literal)-&gt;getPrettyString();
}

return $text.implode(', ', $packages).'.';
case self::RULE_PACKAGE_IMPLICIT_OBSOLETES:
return $ruleText;
case self::RULE_LEARNED:
return 'Conclusion: '.$ruleText;
case self::RULE_PACKAGE_ALIAS:
return $ruleText;
}
}






public function __toString()
{
$result = ($this-&gt;isDisabled()) ? 'disabled(' : '(';

foreach ($this-&gt;literals as $i =&gt; $literal) {
if ($i != 0) {
$result .= '|';
}
$result .= $this-&gt;pool-&gt;literalToString($literal);
}

$result .= ')';

return $result;
}
}
&lt;?php











namespace Composer\DependencyResolver;

use Composer\Package\PackageInterface;
use Composer\Package\AliasPackage;




class RuleSetGenerator
{
protected $policy;
protected $pool;
protected $rules;
protected $jobs;
protected $installedMap;

public function __construct(PolicyInterface $policy, Pool $pool)
{
$this-&gt;policy = $policy;
$this-&gt;pool = $pool;
}















protected function createRequireRule(PackageInterface $package, array $providers, $reason, $reasonData = null)
{
$literals = array(-$package-&gt;getId());

foreach ($providers as $provider) {

 if ($provider === $package) {
return null;
}
$literals[] = $provider-&gt;getId();
}

return new Rule($this-&gt;pool, $literals, $reason, $reasonData);
}













protected function createInstallOneOfRule(array $packages, $reason, $job)
{
$literals = array();
foreach ($packages as $package) {
$literals[] = $package-&gt;getId();
}

return new Rule($this-&gt;pool, $literals, $reason, $job['packageName'], $job);
}












protected function createRemoveRule(PackageInterface $package, $reason, $job)
{
return new Rule($this-&gt;pool, array(-$package-&gt;getId()), $reason, $job['packageName'], $job);
}















protected function createConflictRule(PackageInterface $issuer, PackageInterface $provider, $reason, $reasonData = null)
{

 if ($issuer === $provider) {
return null;
}

return new Rule($this-&gt;pool, array(-$issuer-&gt;getId(), -$provider-&gt;getId()), $reason, $reasonData);
}










private function addRule($type, Rule $newRule = null)
{
if (!$newRule || $this-&gt;rules-&gt;containsEqual($newRule)) {
return;
}

$this-&gt;rules-&gt;add($newRule, $type);
}

protected function addRulesForPackage(PackageInterface $package)
{
$workQueue = new \SplQueue;
$workQueue-&gt;enqueue($package);

while (!$workQueue-&gt;isEmpty()) {
$package = $workQueue-&gt;dequeue();
if (isset($this-&gt;addedMap[$package-&gt;getId()])) {
continue;
}

$this-&gt;addedMap[$package-&gt;getId()] = true;

foreach ($package-&gt;getRequires() as $link) {
$possibleRequires = $this-&gt;pool-&gt;whatProvides($link-&gt;getTarget(), $link-&gt;getConstraint());

$this-&gt;addRule(RuleSet::TYPE_PACKAGE, $rule = $this-&gt;createRequireRule($package, $possibleRequires, Rule::RULE_PACKAGE_REQUIRES, $link));

foreach ($possibleRequires as $require) {
$workQueue-&gt;enqueue($require);
}
}

foreach ($package-&gt;getConflicts() as $link) {
$possibleConflicts = $this-&gt;pool-&gt;whatProvides($link-&gt;getTarget(), $link-&gt;getConstraint());

foreach ($possibleConflicts as $conflict) {
$this-&gt;addRule(RuleSet::TYPE_PACKAGE, $this-&gt;createConflictRule($package, $conflict, Rule::RULE_PACKAGE_CONFLICT, $link));
}
}


 $isInstalled = (isset($this-&gt;installedMap[$package-&gt;getId()]));

foreach ($package-&gt;getReplaces() as $link) {
$obsoleteProviders = $this-&gt;pool-&gt;whatProvides($link-&gt;getTarget(), $link-&gt;getConstraint());

foreach ($obsoleteProviders as $provider) {
if ($provider === $package) {
continue;
}

if (!$this-&gt;obsoleteImpossibleForAlias($package, $provider)) {
$reason = ($isInstalled) ? Rule::RULE_INSTALLED_PACKAGE_OBSOLETES : Rule::RULE_PACKAGE_OBSOLETES;
$this-&gt;addRule(RuleSet::TYPE_PACKAGE, $this-&gt;createConflictRule($package, $provider, $reason, $link));
}
}
}

$obsoleteProviders = $this-&gt;pool-&gt;whatProvides($package-&gt;getName(), null);

foreach ($obsoleteProviders as $provider) {
if ($provider === $package) {
continue;
}

if (($package instanceof AliasPackage) &amp;&amp; $package-&gt;getAliasOf() === $provider) {
$this-&gt;addRule(RuleSet::TYPE_PACKAGE, $rule = $this-&gt;createRequireRule($package, array($provider), Rule::RULE_PACKAGE_ALIAS, $package));
} elseif (!$this-&gt;obsoleteImpossibleForAlias($package, $provider)) {
$reason = ($package-&gt;getName() == $provider-&gt;getName()) ? Rule::RULE_PACKAGE_SAME_NAME : Rule::RULE_PACKAGE_IMPLICIT_OBSOLETES;
$this-&gt;addRule(RuleSet::TYPE_PACKAGE, $rule = $this-&gt;createConflictRule($package, $provider, $reason, $package));
}
}
}
}

protected function obsoleteImpossibleForAlias($package, $provider)
{
$packageIsAlias = $package instanceof AliasPackage;
$providerIsAlias = $provider instanceof AliasPackage;

$impossible = (
($packageIsAlias &amp;&amp; $package-&gt;getAliasOf() === $provider) ||
($providerIsAlias &amp;&amp; $provider-&gt;getAliasOf() === $package) ||
($packageIsAlias &amp;&amp; $providerIsAlias &amp;&amp; $provider-&gt;getAliasOf() === $package-&gt;getAliasOf())
);

return $impossible;
}








private function addRulesForUpdatePackages(PackageInterface $package)
{
$updates = $this-&gt;policy-&gt;findUpdatePackages($this-&gt;pool, $this-&gt;installedMap, $package);

foreach ($updates as $update) {
$this-&gt;addRulesForPackage($update);
}
}

protected function addRulesForJobs()
{
foreach ($this-&gt;jobs as $job) {
switch ($job['cmd']) {
case 'install':
if ($job['packages']) {
foreach ($job['packages'] as $package) {
if (!isset($this-&gt;installedMap[$package-&gt;getId()])) {
$this-&gt;addRulesForPackage($package);
}
}

$rule = $this-&gt;createInstallOneOfRule($job['packages'], Rule::RULE_JOB_INSTALL, $job);
$this-&gt;addRule(RuleSet::TYPE_JOB, $rule);
}
break;
case 'remove':

 
 foreach ($job['packages'] as $package) {
$rule = $this-&gt;createRemoveRule($package, Rule::RULE_JOB_REMOVE, $job);
$this-&gt;addRule(RuleSet::TYPE_JOB, $rule);
}
break;
}
}
}

public function getRulesFor($jobs, $installedMap)
{
$this-&gt;jobs = $jobs;
$this-&gt;rules = new RuleSet;
$this-&gt;installedMap = $installedMap;

foreach ($this-&gt;installedMap as $package) {
$this-&gt;addRulesForPackage($package);
$this-&gt;addRulesForUpdatePackages($package);
}

$this-&gt;addRulesForJobs();

return $this-&gt;rules;
}
}
&lt;?php











namespace Composer\DependencyResolver;




class DebugSolver extends Solver
{
protected function printDecisionMap()
{
echo "\nDecisionMap: \n";
foreach ($this-&gt;decisionMap as $packageId =&gt; $level) {
if ($packageId === 0) {
continue;
}
if ($level &gt; 0) {
echo '    +' . $this-&gt;pool-&gt;packageById($packageId)."\n";
} elseif ($level &lt; 0) {
echo '    -' . $this-&gt;pool-&gt;packageById($packageId)."\n";
} else {
echo '    ?' . $this-&gt;pool-&gt;packageById($packageId)."\n";
}
}
echo "\n";
}

protected function printDecisionQueue()
{
echo "DecisionQueue: \n";
foreach ($this-&gt;decisionQueue as $i =&gt; $literal) {
echo '    ' . $this-&gt;pool-&gt;literalToString($literal) . ' ' . $this-&gt;decisionQueueWhy[$i]." level ".$this-&gt;decisionMap[abs($literal)]."\n";
}
echo "\n";
}

protected function printWatches()
{
echo "\nWatches:\n";
foreach ($this-&gt;watches as $literalId =&gt; $watch) {
echo '  '.$this-&gt;literalFromId($literalId)."\n";
$queue = array(array('    ', $watch));

while (!empty($queue)) {
list($indent, $watch) = array_pop($queue);

echo $indent.$watch;

if ($watch) {
echo ' [id='.$watch-&gt;getId().',watch1='.$this-&gt;literalFromId($watch-&gt;watch1).',watch2='.$this-&gt;literalFromId($watch-&gt;watch2)."]";
}

echo "\n";

if ($watch &amp;&amp; ($watch-&gt;next1 == $watch || $watch-&gt;next2 == $watch)) {
if ($watch-&gt;next1 == $watch) {
echo $indent."    1 *RECURSION*";
}
if ($watch-&gt;next2 == $watch) {
echo $indent."    2 *RECURSION*";
}
} elseif ($watch &amp;&amp; ($watch-&gt;next1 || $watch-&gt;next2)) {
$indent = str_replace(array('1', '2'), ' ', $indent);

array_push($queue, array($indent.'    2 ', $watch-&gt;next2));
array_push($queue, array($indent.'    1 ', $watch-&gt;next1));
}
}

echo "\n";
}
}
}
&lt;?php











namespace Composer\DependencyResolver;




class RuleSetIterator implements \Iterator
{
protected $rules;
protected $types;

protected $currentOffset;
protected $currentType;
protected $currentTypeOffset;

public function __construct(array $rules)
{
$this-&gt;rules = $rules;
$this-&gt;types = array_keys($rules);
sort($this-&gt;types);

$this-&gt;rewind();
}

public function current()
{
return $this-&gt;rules[$this-&gt;currentType][$this-&gt;currentOffset];
}

public function key()
{
return $this-&gt;currentType;
}

public function next()
{
$this-&gt;currentOffset++;

if (!isset($this-&gt;rules[$this-&gt;currentType])) {
return;
}

if ($this-&gt;currentOffset &gt;= sizeof($this-&gt;rules[$this-&gt;currentType])) {
$this-&gt;currentOffset = 0;

do {
$this-&gt;currentTypeOffset++;

if (!isset($this-&gt;types[$this-&gt;currentTypeOffset])) {
$this-&gt;currentType = -1;
break;
}

$this-&gt;currentType = $this-&gt;types[$this-&gt;currentTypeOffset];
} while (isset($this-&gt;types[$this-&gt;currentTypeOffset]) &amp;&amp; !sizeof($this-&gt;rules[$this-&gt;currentType]));
}
}

public function rewind()
{
$this-&gt;currentOffset = 0;

$this-&gt;currentTypeOffset = -1;
$this-&gt;currentType = -1;

do {
$this-&gt;currentTypeOffset++;

if (!isset($this-&gt;types[$this-&gt;currentTypeOffset])) {
$this-&gt;currentType = -1;
break;
}

$this-&gt;currentType = $this-&gt;types[$this-&gt;currentTypeOffset];
} while (isset($this-&gt;types[$this-&gt;currentTypeOffset]) &amp;&amp; !sizeof($this-&gt;rules[$this-&gt;currentType]));
}

public function valid()
{
return isset($this-&gt;rules[$this-&gt;currentType])
&amp;&amp; isset($this-&gt;rules[$this-&gt;currentType][$this-&gt;currentOffset]);
}
}
&lt;?php











namespace Composer\DependencyResolver;









class RuleWatchChain extends \SplDoublyLinkedList
{
protected $offset = 0;






public function seek($offset)
{
$this-&gt;rewind();
for ($i = 0; $i &lt; $offset; $i++, $this-&gt;next());
}









public function remove()
{
$offset = $this-&gt;key();
$this-&gt;offsetUnset($offset);
$this-&gt;seek($offset);
}
}
&lt;?php











namespace Composer\DependencyResolver;

use Composer\Repository\RepositoryInterface;




class Solver
{
const BRANCH_LITERALS = 0;
const BRANCH_LEVEL = 1;

protected $policy;
protected $pool;
protected $installed;
protected $rules;
protected $ruleSetGenerator;
protected $updateAll;

protected $addedMap = array();
protected $updateMap = array();
protected $watchGraph;
protected $decisions;
protected $installedMap;

protected $propagateIndex;
protected $branches = array();
protected $problems = array();
protected $learnedPool = array();

public function __construct(PolicyInterface $policy, Pool $pool, RepositoryInterface $installed)
{
$this-&gt;policy = $policy;
$this-&gt;pool = $pool;
$this-&gt;installed = $installed;
$this-&gt;ruleSetGenerator = new RuleSetGenerator($policy, $pool);
}


 private function makeAssertionRuleDecisions()
{
$decisionStart = count($this-&gt;decisions) - 1;

for ($ruleIndex = 0; $ruleIndex &lt; count($this-&gt;rules); $ruleIndex++) {
$rule = $this-&gt;rules-&gt;ruleById($ruleIndex);

if (!$rule-&gt;isAssertion() || $rule-&gt;isDisabled()) {
continue;
}

$literals = $rule-&gt;getLiterals();
$literal = $literals[0];

if (!$this-&gt;decisions-&gt;decided(abs($literal))) {
$this-&gt;decisions-&gt;decide($literal, 1, $rule);
continue;
}

if ($this-&gt;decisions-&gt;satisfy($literal)) {
continue;
}


 if (RuleSet::TYPE_LEARNED === $rule-&gt;getType()) {
$rule-&gt;disable();
continue;
}

$conflict = $this-&gt;decisions-&gt;decisionRule($literal);

if ($conflict &amp;&amp; RuleSet::TYPE_PACKAGE === $conflict-&gt;getType()) {

$problem = new Problem;

$problem-&gt;addRule($rule);
$problem-&gt;addRule($conflict);
$this-&gt;disableProblem($rule);
$this-&gt;problems[] = $problem;
continue;
}


 $problem = new Problem;
$problem-&gt;addRule($rule);
$problem-&gt;addRule($conflict);


 
 foreach ($this-&gt;rules-&gt;getIteratorFor(RuleSet::TYPE_JOB) as $assertRule) {
if ($assertRule-&gt;isDisabled() || !$assertRule-&gt;isAssertion()) {
continue;
}

$assertRuleLiterals = $assertRule-&gt;getLiterals();
$assertRuleLiteral = $assertRuleLiterals[0];

if (abs($literal) !== abs($assertRuleLiteral)) {
continue;
}

$problem-&gt;addRule($assertRule);
$this-&gt;disableProblem($assertRule);
}
$this-&gt;problems[] = $problem;

$this-&gt;resetToOffset($decisionStart);
$ruleIndex = -1;
}
}

protected function setupInstalledMap()
{
$this-&gt;installedMap = array();
foreach ($this-&gt;installed-&gt;getPackages() as $package) {
$this-&gt;installedMap[$package-&gt;getId()] = $package;
}

foreach ($this-&gt;jobs as $job) {
switch ($job['cmd']) {
case 'update':
foreach ($job['packages'] as $package) {
if (isset($this-&gt;installedMap[$package-&gt;getId()])) {
$this-&gt;updateMap[$package-&gt;getId()] = true;
}
}
break;

case 'update-all':
foreach ($this-&gt;installedMap as $package) {
$this-&gt;updateMap[$package-&gt;getId()] = true;
}
break;

case 'install':
if (!$job['packages']) {
$problem = new Problem();
$problem-&gt;addRule(new Rule($this-&gt;pool, array(), null, null, $job));
$this-&gt;problems[] = $problem;
}
break;
}
}
}

public function solve(Request $request)
{
$this-&gt;jobs = $request-&gt;getJobs();

$this-&gt;setupInstalledMap();

$this-&gt;decisions = new Decisions($this-&gt;pool);

$this-&gt;rules = $this-&gt;ruleSetGenerator-&gt;getRulesFor($this-&gt;jobs, $this-&gt;installedMap);
$this-&gt;watchGraph = new RuleWatchGraph;

foreach ($this-&gt;rules as $rule) {
$this-&gt;watchGraph-&gt;insert(new RuleWatchNode($rule));
}


$this-&gt;makeAssertionRuleDecisions();

$this-&gt;runSat(true);


 foreach ($this-&gt;installedMap as $packageId =&gt; $void) {
if ($this-&gt;decisions-&gt;undecided($packageId)) {
$this-&gt;decisions-&gt;decide(-$packageId, 1, null);
}
}

if ($this-&gt;problems) {
throw new SolverProblemsException($this-&gt;problems, $this-&gt;installedMap);
}

$transaction = new Transaction($this-&gt;policy, $this-&gt;pool, $this-&gt;installedMap, $this-&gt;decisions);

return $transaction-&gt;getOperations();
}

protected function literalFromId($id)
{
$package = $this-&gt;pool-&gt;packageById(abs($id));

return new Literal($package, $id &gt; 0);
}









protected function propagate($level)
{
while ($this-&gt;decisions-&gt;validOffset($this-&gt;propagateIndex)) {
$decision = $this-&gt;decisions-&gt;atOffset($this-&gt;propagateIndex);

$conflict = $this-&gt;watchGraph-&gt;propagateLiteral(
$decision[Decisions::DECISION_LITERAL],
$level,
$this-&gt;decisions
);

$this-&gt;propagateIndex++;

if ($conflict) {
return $conflict;
}
}

return null;
}




private function revert($level)
{
while (!$this-&gt;decisions-&gt;isEmpty()) {
$literal = $this-&gt;decisions-&gt;lastLiteral();

if ($this-&gt;decisions-&gt;undecided($literal)) {
break;
}

$decisionLevel = $this-&gt;decisions-&gt;decisionLevel($literal);

if ($decisionLevel &lt;= $level) {
break;
}

$this-&gt;decisions-&gt;revertLast();
$this-&gt;propagateIndex = count($this-&gt;decisions);
}

while (!empty($this-&gt;branches) &amp;&amp; $this-&gt;branches[count($this-&gt;branches) - 1][self::BRANCH_LEVEL] &gt;= $level) {
array_pop($this-&gt;branches);
}
}
















private function setPropagateLearn($level, $literal, $disableRules, Rule $rule)
{
$level++;

$this-&gt;decisions-&gt;decide($literal, $level, $rule);

while (true) {
$rule = $this-&gt;propagate($level);

if (!$rule) {
break;
}

if ($level == 1) {
return $this-&gt;analyzeUnsolvable($rule, $disableRules);
}


 list($learnLiteral, $newLevel, $newRule, $why) = $this-&gt;analyze($level, $rule);

if ($newLevel &lt;= 0 || $newLevel &gt;= $level) {
throw new SolverBugException(
"Trying to revert to invalid level ".(int) $newLevel." from level ".(int) $level."."
);
} elseif (!$newRule) {
throw new SolverBugException(
"No rule was learned from analyzing $rule at level $level."
);
}

$level = $newLevel;

$this-&gt;revert($level);

$this-&gt;rules-&gt;add($newRule, RuleSet::TYPE_LEARNED);

$this-&gt;learnedWhy[$newRule-&gt;getId()] = $why;

$ruleNode = new RuleWatchNode($newRule);
$ruleNode-&gt;watch2OnHighest($this-&gt;decisions);
$this-&gt;watchGraph-&gt;insert($ruleNode);

$this-&gt;decisions-&gt;decide($learnLiteral, $level, $newRule);
}

return $level;
}

private function selectAndInstall($level, array $decisionQueue, $disableRules, Rule $rule)
{

 $literals = $this-&gt;policy-&gt;selectPreferedPackages($this-&gt;pool, $this-&gt;installedMap, $decisionQueue);

$selectedLiteral = array_shift($literals);


 if (count($literals)) {
$this-&gt;branches[] = array($literals, $level);
}

return $this-&gt;setPropagateLearn($level, $selectedLiteral, $disableRules, $rule);
}

protected function analyze($level, $rule)
{
$analyzedRule = $rule;
$ruleLevel = 1;
$num = 0;
$l1num = 0;
$seen = array();
$learnedLiterals = array(null);

$decisionId = count($this-&gt;decisions);

$this-&gt;learnedPool[] = array();

while (true) {
$this-&gt;learnedPool[count($this-&gt;learnedPool) - 1][] = $rule;

foreach ($rule-&gt;getLiterals() as $literal) {

 if ($this-&gt;decisions-&gt;satisfy($literal)) {
continue;
}

if (isset($seen[abs($literal)])) {
continue;
}
$seen[abs($literal)] = true;

$l = $this-&gt;decisions-&gt;decisionLevel($literal);

if (1 === $l) {
$l1num++;
} elseif ($level === $l) {
$num++;
} else {

 $learnedLiterals[] = $literal;

if ($l &gt; $ruleLevel) {
$ruleLevel = $l;
}
}
}

$l1retry = true;
while ($l1retry) {
$l1retry = false;

if (!$num &amp;&amp; !--$l1num) {

 break 2;
}

while (true) {
if ($decisionId &lt;= 0) {
throw new SolverBugException(
"Reached invalid decision id $decisionId while looking through $rule for a literal present in the analyzed rule $analyzedRule."
);
}

$decisionId--;

$decision = $this-&gt;decisions-&gt;atOffset($decisionId);
$literal = $decision[Decisions::DECISION_LITERAL];

if (isset($seen[abs($literal)])) {
break;
}
}

unset($seen[abs($literal)]);

if ($num &amp;&amp; 0 === --$num) {
$learnedLiterals[0] = -abs($literal);

if (!$l1num) {
break 2;
}

foreach ($learnedLiterals as $i =&gt; $learnedLiteral) {
if ($i !== 0) {
unset($seen[abs($learnedLiteral)]);
}
}

 $l1num++;
$l1retry = true;
}
}

$decision = $this-&gt;decisions-&gt;atOffset($decisionId);
$rule = $decision[Decisions::DECISION_REASON];
}

$why = count($this-&gt;learnedPool) - 1;

if (!$learnedLiterals[0]) {
throw new SolverBugException(
"Did not find a learnable literal in analyzed rule $analyzedRule."
);
}

$newRule = new Rule($this-&gt;pool, $learnedLiterals, Rule::RULE_LEARNED, $why);

return array($learnedLiterals[0], $ruleLevel, $newRule, $why);
}

private function analyzeUnsolvableRule($problem, $conflictRule)
{
$why = $conflictRule-&gt;getId();

if ($conflictRule-&gt;getType() == RuleSet::TYPE_LEARNED) {
$learnedWhy = $this-&gt;learnedWhy[$why];
$problemRules = $this-&gt;learnedPool[$learnedWhy];

foreach ($problemRules as $problemRule) {
$this-&gt;analyzeUnsolvableRule($problem, $problemRule);
}

return;
}

if ($conflictRule-&gt;getType() == RuleSet::TYPE_PACKAGE) {

 return;
}

$problem-&gt;nextSection();
$problem-&gt;addRule($conflictRule);
}

private function analyzeUnsolvable($conflictRule, $disableRules)
{
$problem = new Problem;
$problem-&gt;addRule($conflictRule);

$this-&gt;analyzeUnsolvableRule($problem, $conflictRule);

$this-&gt;problems[] = $problem;

$seen = array();
$literals = $conflictRule-&gt;getLiterals();

foreach ($literals as $literal) {

 if ($this-&gt;decisions-&gt;satisfy($literal)) {
continue;
}
$seen[abs($literal)] = true;
}

foreach ($this-&gt;decisions as $decision) {
$literal = $decision[Decisions::DECISION_LITERAL];


 if (!isset($seen[abs($literal)])) {
continue;
}

$why = $decision[Decisions::DECISION_REASON];

$problem-&gt;addRule($why);
$this-&gt;analyzeUnsolvableRule($problem, $why);

$literals = $why-&gt;getLiterals();

foreach ($literals as $literal) {

 if ($this-&gt;decisions-&gt;satisfy($literal)) {
continue;
}
$seen[abs($literal)] = true;
}
}

if ($disableRules) {
foreach ($this-&gt;problems[count($this-&gt;problems) - 1] as $reason) {
$this-&gt;disableProblem($reason['rule']);
}

$this-&gt;resetSolver();

return 1;
}

return 0;
}

private function disableProblem($why)
{
$job = $why-&gt;getJob();

if (!$job) {
$why-&gt;disable();

return;
}


 foreach ($this-&gt;rules as $rule) {
if ($job === $rule-&gt;getJob()) {
$rule-&gt;disable();
}
}
}

private function resetSolver()
{
$this-&gt;decisions-&gt;reset();

$this-&gt;propagateIndex = 0;
$this-&gt;branches = array();

$this-&gt;enableDisableLearnedRules();
$this-&gt;makeAssertionRuleDecisions();
}








private function enableDisableLearnedRules()
{
foreach ($this-&gt;rules-&gt;getIteratorFor(RuleSet::TYPE_LEARNED) as $rule) {
$why = $this-&gt;learnedWhy[$rule-&gt;getId()];
$problemRules = $this-&gt;learnedPool[$why];

$foundDisabled = false;
foreach ($problemRules as $problemRule) {
if ($problemRule-&gt;isDisabled()) {
$foundDisabled = true;
break;
}
}

if ($foundDisabled &amp;&amp; $rule-&gt;isEnabled()) {
$rule-&gt;disable();
} elseif (!$foundDisabled &amp;&amp; $rule-&gt;isDisabled()) {
$rule-&gt;enable();
}
}
}

private function runSat($disableRules = true)
{
$this-&gt;propagateIndex = 0;


 
 
 
 
 
 
 
 

$decisionQueue = array();
$decisionSupplementQueue = array();
$disableRules = array();

$level = 1;
$systemLevel = $level + 1;
$installedPos = 0;

while (true) {

if (1 === $level) {
$conflictRule = $this-&gt;propagate($level);
if (null !== $conflictRule) {
if ($this-&gt;analyzeUnsolvable($conflictRule, $disableRules)) {
continue;
}

return;
}
}


 if ($level &lt; $systemLevel) {
$iterator = $this-&gt;rules-&gt;getIteratorFor(RuleSet::TYPE_JOB);
foreach ($iterator as $rule) {
if ($rule-&gt;isEnabled()) {
$decisionQueue = array();
$noneSatisfied = true;

foreach ($rule-&gt;getLiterals() as $literal) {
if ($this-&gt;decisions-&gt;satisfy($literal)) {
$noneSatisfied = false;
break;
}
if ($literal &gt; 0 &amp;&amp; $this-&gt;decisions-&gt;undecided($literal)) {
$decisionQueue[] = $literal;
}
}

if ($noneSatisfied &amp;&amp; count($decisionQueue)) {

 
 if (count($this-&gt;installed) != count($this-&gt;updateMap)) {
$prunedQueue = array();
foreach ($decisionQueue as $literal) {
if (isset($this-&gt;installedMap[abs($literal)])) {
$prunedQueue[] = $literal;
if (isset($this-&gt;updateMap[abs($literal)])) {
$prunedQueue = $decisionQueue;
break;
}
}
}
$decisionQueue = $prunedQueue;
}
}

if ($noneSatisfied &amp;&amp; count($decisionQueue)) {

$oLevel = $level;
$level = $this-&gt;selectAndInstall($level, $decisionQueue, $disableRules, $rule);

if (0 === $level) {
return;
}
if ($level &lt;= $oLevel) {
break;
}
}
}
}

$systemLevel = $level + 1;


 $iterator-&gt;next();
if ($iterator-&gt;valid()) {
continue;
}
}

if ($level &lt; $systemLevel) {
$systemLevel = $level;
}

for ($i = 0, $n = 0; $n &lt; count($this-&gt;rules); $i++, $n++) {
if ($i == count($this-&gt;rules)) {
$i = 0;
}

$rule = $this-&gt;rules-&gt;ruleById($i);
$literals = $rule-&gt;getLiterals();

if ($rule-&gt;isDisabled()) {
continue;
}

$decisionQueue = array();


 
 
 
 
 
 foreach ($literals as $literal) {
if ($literal &lt;= 0) {
if (!$this-&gt;decisions-&gt;decidedInstall(abs($literal))) {
continue 2; 
 }
} else {
if ($this-&gt;decisions-&gt;decidedInstall(abs($literal))) {
continue 2; 
 }
if ($this-&gt;decisions-&gt;undecided(abs($literal))) {
$decisionQueue[] = $literal;
}
}
}


 if (count($decisionQueue) &lt; 2) {
continue;
}

$oLevel = $level;
$level = $this-&gt;selectAndInstall($level, $decisionQueue, $disableRules, $rule);

if (0 === $level) {
return;
}


 $n = -1;
}

if ($level &lt; $systemLevel) {
continue;
}


 if (count($this-&gt;branches)) {

$lastLiteral = null;
$lastLevel = null;
$lastBranchIndex = 0;
$lastBranchOffset = 0;
$l = 0;

for ($i = count($this-&gt;branches) - 1; $i &gt;= 0; $i--) {
list($literals, $l) = $this-&gt;branches[$i];

foreach ($literals as $offset =&gt; $literal) {
if ($literal &amp;&amp; $literal &gt; 0 &amp;&amp; $this-&gt;decisions-&gt;decisionLevel($literal) &gt; $l + 1) {
$lastLiteral = $literal;
$lastBranchIndex = $i;
$lastBranchOffset = $offset;
$lastLevel = $l;
}
}
}

if ($lastLiteral) {
unset($this-&gt;branches[$lastBranchIndex][self::BRANCH_LITERALS][$lastBranchOffset]);
array_values($this-&gt;branches[$lastBranchIndex][self::BRANCH_LITERALS]);

$level = $lastLevel;
$this-&gt;revert($level);

$why = $this-&gt;decisions-&gt;lastReason();

$oLevel = $level;
$level = $this-&gt;setPropagateLearn($level, $lastLiteral, $disableRules, $why);

if ($level == 0) {
return;
}

continue;
}
}

break;
}
}
}
&lt;?php











namespace Composer\DependencyResolver;

use Composer\Package\LinkConstraint\LinkConstraintInterface;




class Request
{
protected $jobs;
protected $pool;

public function __construct(Pool $pool)
{
$this-&gt;pool = $pool;
$this-&gt;jobs = array();
}

public function install($packageName, LinkConstraintInterface $constraint = null)
{
$this-&gt;addJob($packageName, 'install', $constraint);
}

public function update($packageName, LinkConstraintInterface $constraint = null)
{
$this-&gt;addJob($packageName, 'update', $constraint);
}

public function remove($packageName, LinkConstraintInterface $constraint = null)
{
$this-&gt;addJob($packageName, 'remove', $constraint);
}

protected function addJob($packageName, $cmd, LinkConstraintInterface $constraint = null)
{
$packageName = strtolower($packageName);
$packages = $this-&gt;pool-&gt;whatProvides($packageName, $constraint);

$this-&gt;jobs[] = array(
'packages' =&gt; $packages,
'cmd' =&gt; $cmd,
'packageName' =&gt; $packageName,
'constraint' =&gt; $constraint,
);
}

public function updateAll()
{
$this-&gt;jobs[] = array('cmd' =&gt; 'update-all', 'packages' =&gt; array());
}

public function getJobs()
{
return $this-&gt;jobs;
}
}
&lt;?php











namespace Composer\DependencyResolver;






class Problem
{




protected $reasonSeen;





protected $reasons = array();

protected $section = 0;






public function addRule(Rule $rule)
{
$this-&gt;addReason($rule-&gt;getId(), array(
'rule' =&gt; $rule,
'job' =&gt; $rule-&gt;getJob(),
));
}






public function getReasons()
{
return $this-&gt;reasons;
}






public function getPrettyString(array $installedMap = array())
{
$reasons = call_user_func_array('array_merge', array_reverse($this-&gt;reasons));

if (count($reasons) === 1) {
reset($reasons);
$reason = current($reasons);

$rule = $reason['rule'];
$job = $reason['job'];

if ($job &amp;&amp; $job['cmd'] === 'install' &amp;&amp; empty($job['packages'])) {

 if (0 === stripos($job['packageName'], 'ext-')) {
$ext = substr($job['packageName'], 4);
$error = extension_loaded($ext) ? 'has the wrong version ('.phpversion($ext).') installed' : 'is missing from your system';

return "\n    - The requested PHP extension ".$job['packageName'].$this-&gt;constraintToText($job['constraint']).' '.$error.'.';
}

return "\n    - The requested package ".$job['packageName'].$this-&gt;constraintToText($job['constraint']).' could not be found.';
}
}

$messages = array();

foreach ($reasons as $reason) {

$rule = $reason['rule'];
$job = $reason['job'];

if ($job) {
$messages[] = $this-&gt;jobToText($job);
} elseif ($rule) {
if ($rule instanceof Rule) {
$messages[] = $rule-&gt;getPrettyString($installedMap);
}
}
}

return "\n    - ".implode("\n    - ", $messages);
}







protected function addReason($id, $reason)
{
if (!isset($this-&gt;reasonSeen[$id])) {
$this-&gt;reasonSeen[$id] = true;
$this-&gt;reasons[$this-&gt;section][] = $reason;
}
}

public function nextSection()
{
$this-&gt;section++;
}







protected function jobToText($job)
{
switch ($job['cmd']) {
case 'install':
if (!$job['packages']) {
return 'No package found to satisfy install request for '.$job['packageName'].$this-&gt;constraintToText($job['constraint']);
}

return 'Installation request for '.$job['packageName'].$this-&gt;constraintToText($job['constraint']).' -&gt; satisfiable by '.$this-&gt;getPackageList($job['packages']).'.';
case 'update':
return 'Update request for '.$job['packageName'].$this-&gt;constraintToText($job['constraint']).'.';
case 'remove':
return 'Removal request for '.$job['packageName'].$this-&gt;constraintToText($job['constraint']).'';
}

return 'Job(cmd='.$job['cmd'].', target='.$job['packageName'].', packages=['.$this-&gt;getPackageList($job['packages']).'])';
}

protected function getPackageList($packages)
{
return implode(', ', array_unique(array_map(function ($package) {
return $package-&gt;getPrettyString();
},
$packages
)));
}







protected function constraintToText($constraint)
{
return ($constraint) ? ' '.$constraint-&gt;getPrettyString() : '';
}
}
&lt;?php











namespace Composer\DependencyResolver;











class RuleWatchGraph
{
protected $watchChains = array();













public function insert(RuleWatchNode $node)
{
if ($node-&gt;getRule()-&gt;isAssertion()) {
return;
}

foreach (array($node-&gt;watch1, $node-&gt;watch2) as $literal) {
if (!isset($this-&gt;watchChains[$literal])) {
$this-&gt;watchChains[$literal] = new RuleWatchChain;
}

$this-&gt;watchChains[$literal]-&gt;unshift($node);
}
}
























public function propagateLiteral($decidedLiteral, $level, $decisions)
{

 
 
 $literal = -$decidedLiteral;

if (!isset($this-&gt;watchChains[$literal])) {
return null;
}

$chain = $this-&gt;watchChains[$literal];

$chain-&gt;rewind();
while ($chain-&gt;valid()) {
$node = $chain-&gt;current();
$otherWatch = $node-&gt;getOtherWatch($literal);

if (!$node-&gt;getRule()-&gt;isDisabled() &amp;&amp; !$decisions-&gt;satisfy($otherWatch)) {
$ruleLiterals = $node-&gt;getRule()-&gt;getLiterals();

$alternativeLiterals = array_filter($ruleLiterals, function ($ruleLiteral) use ($literal, $otherWatch, $decisions) {
return $literal !== $ruleLiteral &amp;&amp;
$otherWatch !== $ruleLiteral &amp;&amp;
!$decisions-&gt;conflict($ruleLiteral);
});

if ($alternativeLiterals) {
reset($alternativeLiterals);
$this-&gt;moveWatch($literal, current($alternativeLiterals), $node);
continue;
}

if ($decisions-&gt;conflict($otherWatch)) {
return $node-&gt;getRule();
}

$decisions-&gt;decide($otherWatch, $level, $node-&gt;getRule());
}

$chain-&gt;next();
}

return null;
}










protected function moveWatch($fromLiteral, $toLiteral, $node)
{
if (!isset($this-&gt;watchChains[$toLiteral])) {
$this-&gt;watchChains[$toLiteral] = new RuleWatchChain;
}

$node-&gt;moveWatch($fromLiteral, $toLiteral);
$this-&gt;watchChains[$fromLiteral]-&gt;remove();
$this-&gt;watchChains[$toLiteral]-&gt;unshift($node);
}
}
&lt;?php











namespace Composer;

use Composer\Json\JsonFile;
use Composer\IO\IOInterface;
use Composer\Repository\ComposerRepository;
use Composer\Repository\RepositoryManager;
use Composer\Util\ProcessExecutor;
use Composer\Util\RemoteFilesystem;








class Factory
{



public static function createConfig()
{

 if (!$home = getenv('COMPOSER_HOME')) {
if (defined('PHP_WINDOWS_VERSION_MAJOR')) {
$home = getenv('APPDATA') . '/Composer';
} else {
$home = getenv('HOME') . '/.composer';
}
}


 if (!file_exists($home . '/.htaccess')) {
if (!is_dir($home)) {
@mkdir($home, 0777, true);
}
@file_put_contents($home . '/.htaccess', 'Deny from all');
}

$config = new Config();


 $config-&gt;merge(array('config' =&gt; array('home' =&gt; $home)));

$file = new JsonFile($home.'/config.json');
if ($file-&gt;exists()) {
$config-&gt;merge($file-&gt;read());
}

return $config;
}

public function getComposerFile()
{
return getenv('COMPOSER') ?: 'composer.json';
}

public static function createDefaultRepositories(IOInterface $io = null, Config $config = null, RepositoryManager $rm = null)
{
$repos = array();

if (!$config) {
$config = static::createConfig();
}
if (!$rm) {
if (!$io) {
throw new \InvalidArgumentException('This function requires either an IOInterface or a RepositoryManager');
}
$factory = new static;
$rm = $factory-&gt;createRepositoryManager($io, $config);
}

foreach ($config-&gt;getRepositories() as $index =&gt; $repo) {
if (!is_array($repo)) {
throw new \UnexpectedValueException('Repository '.$index.' ('.json_encode($repo).') should be an array, '.gettype($repo).' given');
}
if (!isset($repo['type'])) {
throw new \UnexpectedValueException('Repository '.$index.' ('.json_encode($repo).') must have a type defined');
}
$name = is_int($index) &amp;&amp; isset($repo['url']) ? preg_replace('{^https?://}i', '', $repo['url']) : $index;
while (isset($repos[$name])) {
$name .= '2';
}
$repos[$name] = $rm-&gt;createRepository($repo['type'], $repo);
}

return $repos;
}










public function createComposer(IOInterface $io, $localConfig = null)
{

 if (null === $localConfig) {
$localConfig = $this-&gt;getComposerFile();
}

if (is_string($localConfig)) {
$composerFile = $localConfig;
$file = new JsonFile($localConfig, new RemoteFilesystem($io));

if (!$file-&gt;exists()) {
if ($localConfig === 'composer.json') {
$message = 'Composer could not find a composer.json file in '.getcwd();
} else {
$message = 'Composer could not find the config file: '.$localConfig;
}
$instructions = 'To initialize a project, please create a composer.json file as described in the http://getcomposer.org/ "Getting Started" section';
throw new \InvalidArgumentException($message.PHP_EOL.$instructions);
}

$file-&gt;validateSchema(JsonFile::LAX_SCHEMA);
$localConfig = $file-&gt;read();
}


 $config = static::createConfig();
$config-&gt;merge($localConfig);

$vendorDir = $config-&gt;get('vendor-dir');
$binDir = $config-&gt;get('bin-dir');


 ProcessExecutor::setTimeout((int) $config-&gt;get('process-timeout'));


 $rm = $this-&gt;createRepositoryManager($io, $config);


 $this-&gt;addLocalRepository($rm, $vendorDir);


 $loader = new Package\Loader\RootPackageLoader($rm, $config);
$package = $loader-&gt;load($localConfig);


 $dm = $this-&gt;createDownloadManager($io);


 $im = $this-&gt;createInstallationManager($config);


 $composer = new Composer();
$composer-&gt;setConfig($config);
$composer-&gt;setPackage($package);
$composer-&gt;setRepositoryManager($rm);
$composer-&gt;setDownloadManager($dm);
$composer-&gt;setInstallationManager($im);


 $this-&gt;createDefaultInstallers($im, $composer, $io);


 $this-&gt;purgePackages($rm, $im);


 if (isset($composerFile)) {
$lockFile = "json" === pathinfo($composerFile, PATHINFO_EXTENSION)
? substr($composerFile, 0, -4).'lock'
: $composerFile . '.lock';
$locker = new Package\Locker(new JsonFile($lockFile, new RemoteFilesystem($io)), $rm, $im, md5_file($composerFile));
$composer-&gt;setLocker($locker);
}

return $composer;
}






protected function createRepositoryManager(IOInterface $io, Config $config)
{
$rm = new RepositoryManager($io, $config);
$rm-&gt;setRepositoryClass('composer', 'Composer\Repository\ComposerRepository');
$rm-&gt;setRepositoryClass('vcs', 'Composer\Repository\VcsRepository');
$rm-&gt;setRepositoryClass('package', 'Composer\Repository\PackageRepository');
$rm-&gt;setRepositoryClass('pear', 'Composer\Repository\PearRepository');
$rm-&gt;setRepositoryClass('git', 'Composer\Repository\VcsRepository');
$rm-&gt;setRepositoryClass('svn', 'Composer\Repository\VcsRepository');
$rm-&gt;setRepositoryClass('hg', 'Composer\Repository\VcsRepository');

return $rm;
}





protected function addLocalRepository(RepositoryManager $rm, $vendorDir)
{
$rm-&gt;setLocalRepository(new Repository\InstalledFilesystemRepository(new JsonFile($vendorDir.'/composer/installed.json')));
$rm-&gt;setLocalDevRepository(new Repository\InstalledFilesystemRepository(new JsonFile($vendorDir.'/composer/installed_dev.json')));
}





public function createDownloadManager(IOInterface $io)
{
$dm = new Downloader\DownloadManager();
$dm-&gt;setDownloader('git', new Downloader\GitDownloader($io));
$dm-&gt;setDownloader('svn', new Downloader\SvnDownloader($io));
$dm-&gt;setDownloader('hg', new Downloader\HgDownloader($io));
$dm-&gt;setDownloader('zip', new Downloader\ZipDownloader($io));
$dm-&gt;setDownloader('tar', new Downloader\TarDownloader($io));
$dm-&gt;setDownloader('phar', new Downloader\PharDownloader($io));
$dm-&gt;setDownloader('file', new Downloader\FileDownloader($io));

return $dm;
}





protected function createInstallationManager(Config $config)
{
return new Installer\InstallationManager($config-&gt;get('vendor-dir'));
}






protected function createDefaultInstallers(Installer\InstallationManager $im, Composer $composer, IOInterface $io)
{
$im-&gt;addInstaller(new Installer\LibraryInstaller($io, $composer, null));
$im-&gt;addInstaller(new Installer\PearInstaller($io, $composer, 'pear-library'));
$im-&gt;addInstaller(new Installer\InstallerInstaller($io, $composer));
$im-&gt;addInstaller(new Installer\MetapackageInstaller($io));
}





protected function purgePackages(Repository\RepositoryManager $rm, Installer\InstallationManager $im)
{
foreach ($rm-&gt;getLocalRepositories() as $repo) {

foreach ($repo-&gt;getPackages() as $package) {
if (!$im-&gt;isPackageInstalled($repo, $package)) {
$repo-&gt;removePackage($package);
}
}
}
}







public static function create(IOInterface $io, $config = null)
{
$factory = new static();

return $factory-&gt;createComposer($io, $config);
}
}
&lt;?php











namespace Composer\Util;





class Filesystem
{
private $processExecutor;

public function __construct(ProcessExecutor $executor = null)
{
$this-&gt;processExecutor = $executor ?: new ProcessExecutor();
}

public function removeDirectory($directory)
{
if (!is_dir($directory)) {
return true;
}

if (defined('PHP_WINDOWS_VERSION_BUILD')) {
$cmd = sprintf('rmdir /S /Q %s', escapeshellarg(realpath($directory)));
} else {
$cmd = sprintf('rm -rf %s', escapeshellarg($directory));
}

$result = $this-&gt;getProcess()-&gt;execute($cmd) === 0;


 clearstatcache();

return $result &amp;&amp; !is_dir($directory);
}

public function ensureDirectoryExists($directory)
{
if (!is_dir($directory)) {
if (file_exists($directory)) {
throw new \RuntimeException(
$directory.' exists and is not a directory.'
);
}
if (!mkdir($directory, 0777, true)) {
throw new \RuntimeException(
$directory.' does not exist and could not be created.'
);
}
}
}

public function rename($source, $target)
{
if (defined('PHP_WINDOWS_VERSION_BUILD')) {
rename($source, $target);

return;
}


 
 if (0 !== $this-&gt;processExecutor-&gt;execute('mv '.escapeshellarg($source).' '.escapeshellarg($target))) {
if (true === @rename($source, $target)) {
return;
}

throw new \RuntimeException(sprintf('Could not rename "%s" to "%s".', $source, $target));
}
}









public function findShortestPath($from, $to, $directories = false)
{
if (!$this-&gt;isAbsolutePath($from) || !$this-&gt;isAbsolutePath($to)) {
throw new \InvalidArgumentException(sprintf('$from (%s) and $to (%s) must be absolute paths.', $from, $to));
}

$from = lcfirst(rtrim(strtr($from, '\\', '/'), '/'));
$to = lcfirst(rtrim(strtr($to, '\\', '/'), '/'));

if ($directories) {
$from .= '/dummy_file';
}

if (dirname($from) === dirname($to)) {
return './'.basename($to);
}

$commonPath = $to;
while (strpos($from, $commonPath) !== 0 &amp;&amp; '/' !== $commonPath &amp;&amp; !preg_match('{^[a-z]:/?$}i', $commonPath) &amp;&amp; '.' !== $commonPath) {
$commonPath = strtr(dirname($commonPath), '\\', '/');
}

if (0 !== strpos($from, $commonPath) || '/' === $commonPath || '.' === $commonPath) {
return $to;
}

$commonPath = rtrim($commonPath, '/') . '/';
$sourcePathDepth = substr_count(substr($from, strlen($commonPath)), '/');
$commonPathCode = str_repeat('../', $sourcePathDepth);

return ($commonPathCode . substr($to, strlen($commonPath))) ?: './';
}









public function findShortestPathCode($from, $to, $directories = false)
{
if (!$this-&gt;isAbsolutePath($from) || !$this-&gt;isAbsolutePath($to)) {
throw new \InvalidArgumentException(sprintf('$from (%s) and $to (%s) must be absolute paths.', $from, $to));
}

$from = lcfirst(strtr($from, '\\', '/'));
$to = lcfirst(strtr($to, '\\', '/'));

if ($from === $to) {
return $directories ? '__DIR__' : '__FILE__';
}

$commonPath = $to;
while (strpos($from, $commonPath) !== 0 &amp;&amp; '/' !== $commonPath &amp;&amp; !preg_match('{^[a-z]:/?$}i', $commonPath) &amp;&amp; '.' !== $commonPath) {
$commonPath = strtr(dirname($commonPath), '\\', '/');
}

if (0 !== strpos($from, $commonPath) || '/' === $commonPath || '.' === $commonPath) {
return var_export($to, true);
}

$commonPath = rtrim($commonPath, '/') . '/';
if (strpos($to, $from.'/') === 0) {
return '__DIR__ . '.var_export(substr($to, strlen($from)), true);
}
$sourcePathDepth = substr_count(substr($from, strlen($commonPath)), '/') + $directories;
$commonPathCode = str_repeat('dirname(', $sourcePathDepth).'__DIR__'.str_repeat(')', $sourcePathDepth);
$relTarget = substr($to, strlen($commonPath));

return $commonPathCode . (strlen($relTarget) ? '.' . var_export('/' . $relTarget, true) : '');
}







public function isAbsolutePath($path)
{
return substr($path, 0, 1) === '/' || substr($path, 1, 1) === ':';
}

protected function getProcess()
{
return new ProcessExecutor;
}
}
&lt;?php











namespace Composer\Util;

use Symfony\Component\Process\Process;




class ProcessExecutor
{
protected static $timeout = 300;

protected $captureOutput;
protected $errorOutput;










public function execute($command, &amp;$output = null, $cwd = null)
{
$this-&gt;captureOutput = count(func_get_args()) &gt; 1;
$this-&gt;errorOutput = null;
$process = new Process($command, $cwd, null, null, static::getTimeout());

$callback = is_callable($output) ? $output : array($this, 'outputHandler');
$process-&gt;run($callback);

if ($this-&gt;captureOutput &amp;&amp; !is_callable($output)) {
$output = $process-&gt;getOutput();
}

$this-&gt;errorOutput = $process-&gt;getErrorOutput();

return $process-&gt;getExitCode();
}

public function splitLines($output)
{
return ((string) $output === '') ? array() : preg_split('{\r?\n}', $output);
}






public function getErrorOutput()
{
return $this-&gt;errorOutput;
}

public function outputHandler($type, $buffer)
{
if ($this-&gt;captureOutput) {
return;
}

echo $buffer;
}

public static function getTimeout()
{
return static::$timeout;
}

public static function setTimeout($timeout)
{
static::$timeout = $timeout;
}
}
&lt;?php











namespace Composer\Util;

use Composer\Composer;
use Composer\IO\IOInterface;
use Composer\Downloader\TransportException;




class RemoteFilesystem
{
private $io;
private $firstCall;
private $bytesMax;
private $originUrl;
private $fileUrl;
private $fileName;
private $result;
private $progress;
private $lastProgress;






public function __construct(IOInterface $io)
{
$this-&gt;io = $io;
}











public function copy($originUrl, $fileUrl, $fileName, $progress = true)
{
$this-&gt;get($originUrl, $fileUrl, $fileName, $progress);

return $this-&gt;result;
}










public function getContents($originUrl, $fileUrl, $progress = true)
{
$this-&gt;get($originUrl, $fileUrl, null, $progress);

return $this-&gt;result;
}











protected function get($originUrl, $fileUrl, $fileName = null, $progress = true)
{
$this-&gt;bytesMax = 0;
$this-&gt;result = null;
$this-&gt;originUrl = $originUrl;
$this-&gt;fileUrl = $fileUrl;
$this-&gt;fileName = $fileName;
$this-&gt;progress = $progress;
$this-&gt;lastProgress = null;

$options = $this-&gt;getOptionsForUrl($originUrl);
$ctx = StreamContextFactory::getContext($options, array('notification' =&gt; array($this, 'callbackGet')));

if ($this-&gt;progress) {
$this-&gt;io-&gt;write("    Downloading: &lt;comment&gt;connection...&lt;/comment&gt;", false);
}

$result = @file_get_contents($fileUrl, false, $ctx);


 if (!empty($http_response_header[0]) &amp;&amp; preg_match('{^HTTP/\S+ 404}i', $http_response_header[0])) {
$result = false;
}


 if (false !== $result &amp;&amp; extension_loaded('zlib') &amp;&amp; substr($fileUrl, 0, 4) === 'http') {
$decode = false;
foreach ($http_response_header as $header) {
if (preg_match('{^content-encoding: *gzip *$}i', $header)) {
$decode = true;
continue;
} elseif (preg_match('{^HTTP/}i', $header)) {
$decode = false;
}
}

if ($decode) {
if (version_compare(PHP_VERSION, '5.4.0', '&gt;=')) {
$result = zlib_decode($result);
} else {

 $result = file_get_contents('compress.zlib://data:application/octet-stream;base64,'.base64_encode($result));
}
}
}

if ($this-&gt;progress) {
$this-&gt;io-&gt;overwrite("    Downloading: &lt;comment&gt;100%&lt;/comment&gt;");
}


 if (false !== $result &amp;&amp; null !== $fileName) {
$result = (bool) @file_put_contents($fileName, $result);
if (false === $result) {
throw new TransportException('The "'.$fileUrl.'" file could not be written to '.$fileName);
}
}


 if (null === $this-&gt;result) {
$this-&gt;result = $result;
}

if (false === $this-&gt;result) {
throw new TransportException('The "'.$fileUrl.'" file could not be downloaded');
}
}











protected function callbackGet($notificationCode, $severity, $message, $messageCode, $bytesTransferred, $bytesMax)
{
switch ($notificationCode) {
case STREAM_NOTIFY_FAILURE:
throw new TransportException('The "'.$this-&gt;fileUrl.'" file could not be downloaded ('.trim($message).')', $messageCode);
break;

case STREAM_NOTIFY_AUTH_REQUIRED:
if (401 === $messageCode) {
if (!$this-&gt;io-&gt;isInteractive()) {
$message = "The '" . $this-&gt;fileUrl . "' URL required authentication.\nYou must be using the interactive console";

throw new TransportException($message, 401);
}

$this-&gt;io-&gt;overwrite('    Authentication required (&lt;info&gt;'.parse_url($this-&gt;fileUrl, PHP_URL_HOST).'&lt;/info&gt;):');
$username = $this-&gt;io-&gt;ask('      Username: ');
$password = $this-&gt;io-&gt;askAndHideAnswer('      Password: ');
$this-&gt;io-&gt;setAuthorization($this-&gt;originUrl, $username, $password);

$this-&gt;get($this-&gt;originUrl, $this-&gt;fileUrl, $this-&gt;fileName, $this-&gt;progress);
}
break;

case STREAM_NOTIFY_FILE_SIZE_IS:
if ($this-&gt;bytesMax &lt; $bytesMax) {
$this-&gt;bytesMax = $bytesMax;
}
break;

case STREAM_NOTIFY_PROGRESS:
if ($this-&gt;bytesMax &gt; 0 &amp;&amp; $this-&gt;progress) {
$progression = 0;

if ($this-&gt;bytesMax &gt; 0) {
$progression = round($bytesTransferred / $this-&gt;bytesMax * 100);
}

if ((0 === $progression % 5) &amp;&amp; $progression !== $this-&gt;lastProgress) {
$this-&gt;lastProgress = $progression;
$this-&gt;io-&gt;overwrite("    Downloading: &lt;comment&gt;$progression%&lt;/comment&gt;", false);
}
}
break;

default:
break;
}
}

protected function getOptionsForUrl($originUrl)
{
$options['http']['header'] = sprintf(
"User-Agent: Composer/%s (%s; %s; PHP %s.%s.%s)\r\n",
Composer::VERSION,
php_uname('s'),
php_uname('r'),
PHP_MAJOR_VERSION,
PHP_MINOR_VERSION,
PHP_RELEASE_VERSION
);
if (extension_loaded('zlib')) {
$options['http']['header'] .= 'Accept-Encoding: gzip'."\r\n";
}

if ($this-&gt;io-&gt;hasAuthorization($originUrl)) {
$auth = $this-&gt;io-&gt;getAuthorization($originUrl);
$authStr = base64_encode($auth['username'] . ':' . $auth['password']);
$options['http']['header'] .= "Authorization: Basic $authStr\r\n";
}

return $options;
}
}
&lt;?php











namespace Composer\Util;






final class StreamContextFactory
{








public static function getContext(array $defaultOptions = array(), array $defaultParams = array())
{
$options = array('http' =&gt; array());


 if (!empty($_SERVER['HTTP_PROXY']) || !empty($_SERVER['http_proxy'])) {

 $proxy = parse_url(!empty($_SERVER['http_proxy']) ? $_SERVER['http_proxy'] : $_SERVER['HTTP_PROXY']);
}

if (!empty($proxy)) {
$proxyURL = (isset($proxy['scheme']) ? $proxy['scheme'] : '') . '://';
$proxyURL .= isset($proxy['host']) ? $proxy['host'] : '';

if (isset($proxy['port'])) {
$proxyURL .= ":" . $proxy['port'];
} elseif ('http://' == substr($proxyURL, 0, 7)) {
$proxyURL .= ":80";
} elseif ('https://' == substr($proxyURL, 0, 8)) {
$proxyURL .= ":443";
}


 $proxyURL = str_replace(array('http://', 'https://'), array('tcp://', 'ssl://'), $proxyURL);

if (0 === strpos($proxyURL, 'ssl:') &amp;&amp; !extension_loaded('openssl')) {
throw new \RuntimeException('You must enable the openssl extension to use a proxy over https');
}

$options['http'] = array(
'proxy' =&gt; $proxyURL,
'request_fulluri' =&gt; true,
);

if (isset($proxy['user'])) {
$auth = $proxy['user'];
if (isset($proxy['pass'])) {
$auth .= ':' . $proxy['pass'];
}
$auth = base64_encode($auth);


 if (isset($defaultOptions['http']['header'])) {
$defaultOptions['http']['header'] .= "Proxy-Authorization: Basic {$auth}\r\n";
} else {
$options['http']['header'] = "Proxy-Authorization: Basic {$auth}\r\n";
}
}
}

$options = array_replace_recursive($options, $defaultOptions);

return stream_context_create($options, $defaultParams);
}
}
&lt;?php











namespace Composer\Util;






class ErrorHandler
{











public static function handle($level, $message, $file, $line)
{

 if (!error_reporting()) {
return;
}

if (ini_get('xdebug.scream')) {
$message .= "\n\nWarning: You have xdebug.scream enabled, the warning above may be".
"\na legitimately suppressed error that you were not supposed to see.";
}

throw new \ErrorException($message, 0, $level, $file, $line);
}






public static function register()
{
set_error_handler(array(__CLASS__, 'handle'));
}
}
&lt;?php











namespace Composer\Util;

use Composer\Json\JsonFile;







class SpdxLicenseIdentifier
{



private $identifiers;

public function __construct()
{
$this-&gt;initIdentifiers();
}







public function validate($license)
{
if (is_array($license)) {
$count = count($license);
if ($count !== count(array_filter($license, 'is_string'))) {
throw new \InvalidArgumentException('Array of strings expected.');
}
$license = $count &gt; 1 ? '('.implode(' or ', $license).')' : (string) reset($license);
}
if (!is_string($license)) {
throw new \InvalidArgumentException(sprintf(
'Array or String expected, %s given.', gettype($license)
));
}

return $this-&gt;isValidLicenseString($license);
}




private function initIdentifiers()
{
$jsonFile = new JsonFile(__DIR__ . '/../../../res/spdx-identifier.json');
$this-&gt;identifiers = $jsonFile-&gt;read();
}






private function isValidLicenseIdentifier($identifier)
{
return in_array($identifier, $this-&gt;identifiers);
}







private function isValidLicenseString($license)
{
$tokens = array(
'po' =&gt; '\(',
'pc' =&gt; '\)',
'op' =&gt; '(?:or|and)',
'lix' =&gt; '(?:NONE|NOASSERTION)',
'lir' =&gt; 'LicenseRef-\d+',
'lic' =&gt; '[-+_.a-zA-Z0-9]{3,}',
'ws' =&gt; '\s+',
'_' =&gt; '.',
);

$next = function () use ($license, $tokens) {
static $offset = 0;

if ($offset &gt;= strlen($license)) {
return null;
}

foreach ($tokens as $name =&gt; $token) {
if (false === $r = preg_match('{' . $token . '}', $license, $matches, PREG_OFFSET_CAPTURE, $offset)) {
throw new \RuntimeException('Pattern for token %s failed (regex error).', $name);
}
if ($r === 0) {
continue;
}
if ($matches[0][1] !== $offset) {
continue;
}
$offset += strlen($matches[0][0]);

return array($name, $matches[0][0]);
}

throw new \RuntimeException('At least the last pattern needs to match, but it did not (dot-match-all is missing?).');
};

$open = 0;
$require = 1;
$lastop = null;

while (list($token, $string) = $next()) {
switch ($token) {
case 'po':
if ($open || !$require) {
return false;
}
$open = 1;
break;
case 'pc':
if ($open !== 1 || $require || !$lastop) {
return false;
}
$open = 2;
break;
case 'op':
if ($require || !$open) {
return false;
}
$lastop || $lastop = $string;
if ($lastop !== $string) {
return false;
}
$require = 1;
break;
case 'lix':
if ($open) {
return false;
}
goto lir;
case 'lic':
if (!$this-&gt;isValidLicenseIdentifier($string)) {
return false;
}

 case 'lir':
lir:
if (!$require) {
return false;
}
$require = 0;
break;
case 'ws':
break;
case '_':
return false;
default:
throw new \RuntimeException(sprintf('Unparsed token: %s.', print_r($token, true)));
}
}

return !($open % 2 || $require);
}
}
&lt;?php











namespace Composer\Util;

use Composer\IO\IOInterface;





class Svn
{



protected $credentials;




protected $hasAuth;




protected $io;




protected $url;




protected $cacheCredentials = true;




protected $process;






public function __construct($url, IOInterface $io, ProcessExecutor $process = null)
{
$this-&gt;url = $url;
$this-&gt;io = $io;
$this-&gt;process = $process ?: new ProcessExecutor;
}















public function execute($command, $url, $cwd = null, $path = null, $verbose = false)
{
$svnCommand = $this-&gt;getCommand($command, $url, $path);
$output = null;
$io = $this-&gt;io;
$handler = function ($type, $buffer) use (&amp;$output, $io, $verbose) {
if ($type !== 'out') {
return;
}
$output .= $buffer;
if ($verbose) {
$io-&gt;write($buffer, false);
}
};
$status = $this-&gt;process-&gt;execute($svnCommand, $handler, $cwd);
if (0 === $status) {
return $output;
}

if (empty($output)) {
$output = $this-&gt;process-&gt;getErrorOutput();
}


 if (false === stripos($output, 'Could not authenticate to server:')) {
throw new \RuntimeException($output);
}


 if (!$this-&gt;io-&gt;isInteractive()) {
throw new \RuntimeException(
'can not ask for authentication in non interactive mode ('.$output.')'
);
}


 


 if (!$this-&gt;hasAuth()) {
$this-&gt;doAuthDance();


 return $this-&gt;execute($command, $url, $cwd, $path, $verbose);
}

throw new \RuntimeException(
'wrong credentials provided ('.$output.')'
);
}






protected function doAuthDance()
{
$this-&gt;io-&gt;write("The Subversion server ({$this-&gt;url}) requested credentials:");

$this-&gt;hasAuth = true;
$this-&gt;credentials['username'] = $this-&gt;io-&gt;ask("Username: ");
$this-&gt;credentials['password'] = $this-&gt;io-&gt;askAndHideAnswer("Password: ");

$this-&gt;cacheCredentials = $this-&gt;io-&gt;askConfirmation("Should Subversion cache these credentials? (yes/no) ", true);

return $this;
}










protected function getCommand($cmd, $url, $path = null)
{
$cmd = sprintf('%s %s%s %s',
$cmd,
'--non-interactive ',
$this-&gt;getCredentialString(),
escapeshellarg($url)
);

if ($path) {
$cmd .= ' ' . escapeshellarg($path);
}

return $cmd;
}








protected function getCredentialString()
{
if (!$this-&gt;hasAuth()) {
return '';
}

return sprintf(
' %s--username %s --password %s ',
$this-&gt;getAuthCache(),
escapeshellarg($this-&gt;getUsername()),
escapeshellarg($this-&gt;getPassword())
);
}







protected function getPassword()
{
if ($this-&gt;credentials === null) {
throw new \LogicException("No svn auth detected.");
}

return isset($this-&gt;credentials['password']) ? $this-&gt;credentials['password'] : '';
}







protected function getUsername()
{
if ($this-&gt;credentials === null) {
throw new \LogicException("No svn auth detected.");
}

return $this-&gt;credentials['username'];
}








protected function hasAuth()
{
if (null !== $this-&gt;hasAuth) {
return $this-&gt;hasAuth;
}

$uri = parse_url($this-&gt;url);
if (empty($uri['user'])) {
return $this-&gt;hasAuth = false;
}

$this-&gt;credentials['username'] = $uri['user'];
if (!empty($uri['pass'])) {
$this-&gt;credentials['password'] = $uri['pass'];
}

return $this-&gt;hasAuth = true;
}






protected function getAuthCache()
{
return $this-&gt;cacheCredentials ? '' : '--no-auth-cache ';
}
}
&lt;?php











namespace Composer;

use Composer\Package\PackageInterface;
use Composer\Package\Locker;
use Composer\Repository\RepositoryManager;
use Composer\Installer\InstallationManager;
use Composer\Downloader\DownloadManager;





class Composer
{
const VERSION = 'a2171e2';




private $package;




private $locker;




private $repositoryManager;




private $downloadManager;




private $installationManager;




private $config;





public function setPackage(PackageInterface $package)
{
$this-&gt;package = $package;
}




public function getPackage()
{
return $this-&gt;package;
}




public function setConfig(Config $config)
{
$this-&gt;config = $config;
}




public function getConfig()
{
return $this-&gt;config;
}




public function setLocker(Locker $locker)
{
$this-&gt;locker = $locker;
}




public function getLocker()
{
return $this-&gt;locker;
}




public function setRepositoryManager(RepositoryManager $manager)
{
$this-&gt;repositoryManager = $manager;
}




public function getRepositoryManager()
{
return $this-&gt;repositoryManager;
}




public function setDownloadManager(DownloadManager $manager)
{
$this-&gt;downloadManager = $manager;
}




public function getDownloadManager()
{
return $this-&gt;downloadManager;
}




public function setInstallationManager(InstallationManager $manager)
{
$this-&gt;installationManager = $manager;
}




public function getInstallationManager()
{
return $this-&gt;installationManager;
}
}
&lt;?php











namespace Composer\Json;




class JsonManipulator
{
private $contents;
private $newline;
private $indent;

public function __construct($contents)
{
$contents = trim($contents);
if (!preg_match('#^\{(.*)\}$#s', $contents)) {
throw new \InvalidArgumentException('The json file must be an object ({})');
}
$this-&gt;newline = false !== strpos("\r\n", $contents) ? "\r\n": "\n";
$this-&gt;contents = $contents;
$this-&gt;detectIndenting();
}

public function getContents()
{
return $this-&gt;contents . $this-&gt;newline;
}

public function addLink($type, $package, $constraint)
{

 if (!preg_match('#"'.$type.'":\s*\{#', $this-&gt;contents)) {
$this-&gt;addMainKey($type, $this-&gt;format(array($package =&gt; $constraint)));

return true;
}

$linksRegex = '#("'.$type.'":\s*\{)([^}]+)(\})#s';
if (!preg_match($linksRegex, $this-&gt;contents, $match)) {
return false;
}

$links = $match[2];
$packageRegex = str_replace('/', '\\\\?/', preg_quote($package));


 if (preg_match('{"'.$packageRegex.'"\s*:}i', $links)) {
$links = preg_replace('{"'.$packageRegex.'"(\s*:\s*)"[^"]+"}i', JsonFile::encode($package).'$1"'.$constraint.'"', $links);
} elseif (preg_match('#[^\s](\s*)$#', $links, $match)) {

 $links = preg_replace(
'#'.$match[1].'$#',
',' . $this-&gt;newline . $this-&gt;indent . $this-&gt;indent . JsonFile::encode($package).': '.JsonFile::encode($constraint) . $match[1],
$links
);
} else {

 $links = $this-&gt;newline . $this-&gt;indent . $this-&gt;indent . JsonFile::encode($package).': '.JsonFile::encode($constraint) . $links;
}

$this-&gt;contents = preg_replace($linksRegex, '$1'.$links.'$3', $this-&gt;contents);

return true;
}

public function addMainKey($key, $content)
{
if (preg_match('#[^{\s](\s*)\}$#', $this-&gt;contents, $match)) {
$this-&gt;contents = preg_replace(
'#'.$match[1].'\}$#',
',' . $this-&gt;newline . $this-&gt;indent . JsonFile::encode($key). ': '. $content . $this-&gt;newline . '}',
$this-&gt;contents
);
} else {
$this-&gt;contents = preg_replace(
'#\}$#',
$this-&gt;indent . JsonFile::encode($key). ': '.$content . $this-&gt;newline . '}',
$this-&gt;contents
);
}
}

protected function format($data)
{
if (is_array($data)) {
reset($data);

if (is_numeric(key($data))) {
return '['.implode(', ', $data).']';
}

$out = '{' . $this-&gt;newline;
foreach ($data as $key =&gt; $val) {
$elems[] = $this-&gt;indent . $this-&gt;indent . JsonFile::encode($key). ': '.$this-&gt;format($val);
}

return $out . implode(','.$this-&gt;newline, $elems) . $this-&gt;newline . $this-&gt;indent . '}';
}

return JsonFile::encode($data);
}

protected function detectIndenting()
{
if (preg_match('{^(\s+)"}', $this-&gt;contents, $match)) {
$this-&gt;indent = $match[1];
} else {
$this-&gt;indent = '    ';
}
}
}
&lt;?php











namespace Composer\Json;

use Composer\Composer;
use JsonSchema\Validator;
use Seld\JsonLint\JsonParser;
use Seld\JsonLint\ParsingException;
use Composer\Util\RemoteFilesystem;
use Composer\Downloader\TransportException;







class JsonFile
{
const LAX_SCHEMA = 1;
const STRICT_SCHEMA = 2;

const JSON_UNESCAPED_SLASHES = 64;
const JSON_PRETTY_PRINT = 128;
const JSON_UNESCAPED_UNICODE = 256;

private $path;
private $rfs;







public function __construct($path, RemoteFilesystem $rfs = null)
{
$this-&gt;path = $path;

if (null === $rfs &amp;&amp; preg_match('{^https?://}i', $path)) {
throw new \InvalidArgumentException('http urls require a RemoteFilesystem instance to be passed');
}
$this-&gt;rfs = $rfs;
}




public function getPath()
{
return $this-&gt;path;
}






public function exists()
{
return is_file($this-&gt;path);
}






public function read()
{
try {
if ($this-&gt;rfs) {
$json = $this-&gt;rfs-&gt;getContents($this-&gt;path, $this-&gt;path, false);
} else {
$json = file_get_contents($this-&gt;path);
}
} catch (TransportException $e) {
throw new \RuntimeException('Could not read '.$this-&gt;path.', either you or the remote host is probably offline'."\n\n".$e-&gt;getMessage());
} catch (\Exception $e) {
throw new \RuntimeException('Could not read '.$this-&gt;path."\n\n".$e-&gt;getMessage());
}

return static::parseJson($json, $this-&gt;path);
}







public function write(array $hash, $options = 448)
{
$dir = dirname($this-&gt;path);
if (!is_dir($dir)) {
if (file_exists($dir)) {
throw new \UnexpectedValueException(
$dir.' exists and is not a directory.'
);
}
if (!mkdir($dir, 0777, true)) {
throw new \UnexpectedValueException(
$dir.' does not exist and could not be created.'
);
}
}
file_put_contents($this-&gt;path, static::encode($hash, $options). ($options &amp; self::JSON_PRETTY_PRINT ? "\n" : ''));
}








public function validateSchema($schema = self::STRICT_SCHEMA)
{
$content = file_get_contents($this-&gt;path);
$data = json_decode($content);

if (null === $data &amp;&amp; 'null' !== $content) {
self::validateSyntax($content, $this-&gt;path);
}

$schemaFile = __DIR__ . '/../../../res/composer-schema.json';
$schemaData = json_decode(file_get_contents($schemaFile));

if ($schema === self::LAX_SCHEMA) {
$schemaData-&gt;additionalProperties = true;
$schemaData-&gt;properties-&gt;name-&gt;required = false;
$schemaData-&gt;properties-&gt;description-&gt;required = false;
}

$validator = new Validator();
$validator-&gt;check($data, $schemaData);



if (!$validator-&gt;isValid()) {
$errors = array();
foreach ((array) $validator-&gt;getErrors() as $error) {
$errors[] = ($error['property'] ? $error['property'].' : ' : '').$error['message'];
}
throw new JsonValidationException('"'.$this-&gt;path.'" does not match the expected JSON schema', $errors);
}

return true;
}













public static function encode($data, $options = 448)
{
if (version_compare(PHP_VERSION, '5.4', '&gt;=')) {
return json_encode($data, $options);
}

$json = json_encode($data);

$prettyPrint = (bool) ($options &amp; self::JSON_PRETTY_PRINT);
$unescapeUnicode = (bool) ($options &amp; self::JSON_UNESCAPED_UNICODE);
$unescapeSlashes = (bool) ($options &amp; self::JSON_UNESCAPED_SLASHES);

if (!$prettyPrint &amp;&amp; !$unescapeUnicode &amp;&amp; !$unescapeSlashes) {
return $json;
}

$result = '';
$pos = 0;
$strLen = strlen($json);
$indentStr = '    ';
$newLine = "\n";
$outOfQuotes = true;
$buffer = '';
$noescape = true;

for ($i = 0; $i &lt;= $strLen; $i++) {

 $char = substr($json, $i, 1);


 if ('"' === $char &amp;&amp; $noescape) {
$outOfQuotes = !$outOfQuotes;
}

if (!$outOfQuotes) {
$buffer .= $char;
$noescape = '\\' === $char ? !$noescape : true;
continue;
} elseif ('' !== $buffer) {
if ($unescapeSlashes) {
$buffer = str_replace('\\/', '/', $buffer);
}

if ($unescapeUnicode &amp;&amp; function_exists('mb_convert_encoding')) {

 $buffer = preg_replace_callback('/\\\\u([0-9a-f]{4})/i', function($match) {
return mb_convert_encoding(pack('H*', $match[1]), 'UTF-8', 'UCS-2BE');
}, $buffer);
}

$result .= $buffer.$char;
$buffer = '';
continue;
}

if (':' === $char) {

 $char .= ' ';
} elseif (('}' === $char || ']' === $char)) {
$pos--;
$prevChar = substr($json, $i - 1, 1);

if ('{' !== $prevChar &amp;&amp; '[' !== $prevChar) {

 
 $result .= $newLine;
for ($j = 0; $j &lt; $pos; $j++) {
$result .= $indentStr;
}
} else {

 $result = rtrim($result)."\n\n".$indentStr;
}
}

$result .= $char;


 
 if (',' === $char || '{' === $char || '[' === $char) {
$result .= $newLine;

if ('{' === $char || '[' === $char) {
$pos++;
}

for ($j = 0; $j &lt; $pos; $j++) {
$result .= $indentStr;
}
}
}

return $result;
}









public static function parseJson($json, $file = null)
{
$data = json_decode($json, true);
if (null === $data &amp;&amp; JSON_ERROR_NONE !== json_last_error()) {
self::validateSyntax($json, $file);
}

return $data;
}










protected static function validateSyntax($json, $file = null)
{
$parser = new JsonParser();
$result = $parser-&gt;lint($json);
if (null === $result) {
if (defined('JSON_ERROR_UTF8') &amp;&amp; JSON_ERROR_UTF8 === json_last_error()) {
throw new \UnexpectedValueException('"'.$file.'" is not UTF-8, could not parse as JSON');
}

return true;
}

throw new ParsingException('"'.$file.'" does not contain valid JSON'."\n".$result-&gt;getMessage(), $result-&gt;getDetails());
}
}
&lt;?php











namespace Composer\Json;

use Exception;




class JsonValidationException extends Exception
{
protected $errors;

public function __construct($message, $errors = array())
{
$this-&gt;errors = $errors;
parent::__construct($message);
}

public function getErrors()
{
return $this-&gt;errors;
}
}
&lt;?php











namespace Composer;




class Config
{
public static $defaultConfig = array(
'process-timeout' =&gt; 300,
'vendor-dir' =&gt; 'vendor',
'bin-dir' =&gt; '{$vendor-dir}/bin',
'notify-on-install' =&gt; true,
);

public static $defaultRepositories = array(
'packagist' =&gt; array(
'type' =&gt; 'composer',
'url' =&gt; 'http://packagist.org',
)
);

private $config;
private $repositories;

public function __construct()
{

 $this-&gt;config = static::$defaultConfig;
$this-&gt;repositories = static::$defaultRepositories;
}






public function merge(array $config)
{

 if (!empty($config['config']) &amp;&amp; is_array($config['config'])) {
$this-&gt;config = array_replace_recursive($this-&gt;config, $config['config']);
}

if (!empty($config['repositories']) &amp;&amp; is_array($config['repositories'])) {
$this-&gt;repositories = array_reverse($this-&gt;repositories, true);
$newRepos = array_reverse($config['repositories'], true);
foreach ($newRepos as $name =&gt; $repository) {

 if (false === $repository) {
unset($this-&gt;repositories[$name]);
continue;
}


 if (1 === count($repository) &amp;&amp; false === current($repository)) {
unset($this-&gt;repositories[key($repository)]);
continue;
}


 if (is_int($name)) {
$this-&gt;repositories[] = $repository;
} else {
$this-&gt;repositories[$name] = $repository;
}
}
$this-&gt;repositories = array_reverse($this-&gt;repositories, true);
}
}




public function getRepositories()
{
return $this-&gt;repositories;
}







public function get($key)
{
switch ($key) {
case 'vendor-dir':
case 'bin-dir':
case 'process-timeout':

 $env = 'COMPOSER_' . strtoupper(strtr($key, '-', '_'));

return rtrim($this-&gt;process(getenv($env) ?: $this-&gt;config[$key]), '/\\');

case 'home':
return rtrim($this-&gt;process($this-&gt;config[$key]), '/\\');

default:
return $this-&gt;process($this-&gt;config[$key]);
}
}







public function has($key)
{
return array_key_exists($key, $this-&gt;config);
}







private function process($value)
{
$config = $this;

return preg_replace_callback('#\{\$(.+)\}#', function ($match) use ($config) {
return $config-&gt;get($match[1]);
}, $value);
}
}
&lt;?php











namespace Composer\Script;

use Composer\Composer;
use Composer\IO\IOInterface;






class Event
{



private $name;




private $composer;




private $io;








public function __construct($name, Composer $composer, IOInterface $io)
{
$this-&gt;name = $name;
$this-&gt;composer = $composer;
$this-&gt;io = $io;
}






public function getName()
{
return $this-&gt;name;
}






public function getComposer()
{
return $this-&gt;composer;
}






public function getIO()
{
return $this-&gt;io;
}
}
&lt;?php











namespace Composer\Script;







class ScriptEvents
{







const PRE_INSTALL_CMD = 'pre-install-cmd';








const POST_INSTALL_CMD = 'post-install-cmd';








const PRE_UPDATE_CMD = 'pre-update-cmd';








const POST_UPDATE_CMD = 'post-update-cmd';








const PRE_PACKAGE_INSTALL = 'pre-package-install';








const POST_PACKAGE_INSTALL = 'post-package-install';








const PRE_PACKAGE_UPDATE = 'pre-package-update';








const POST_PACKAGE_UPDATE = 'post-package-update';








const PRE_PACKAGE_UNINSTALL = 'pre-package-uninstall';








const POST_PACKAGE_UNINSTALL = 'post-package-uninstall';
}
&lt;?php











namespace Composer\Script;

use Composer\Composer;






class CommandEvent extends Event
{
}
&lt;?php











namespace Composer\Script;

use Composer\Composer;
use Composer\IO\IOInterface;
use Composer\DependencyResolver\Operation\OperationInterface;






class PackageEvent extends Event
{



private $operation;









public function __construct($name, Composer $composer, IOInterface $io, OperationInterface $operation)
{
parent::__construct($name, $composer, $io);
$this-&gt;operation = $operation;
}






public function getOperation()
{
return $this-&gt;operation;
}
}
&lt;?php











namespace Composer\Script;

use Composer\Autoload\AutoloadGenerator;
use Composer\IO\IOInterface;
use Composer\Composer;
use Composer\DependencyResolver\Operation\OperationInterface;













class EventDispatcher
{
protected $composer;
protected $io;
protected $loader;







public function __construct(Composer $composer, IOInterface $io)
{
$this-&gt;composer = $composer;
$this-&gt;io = $io;
}







public function dispatchPackageEvent($eventName, OperationInterface $operation)
{
$this-&gt;doDispatch(new PackageEvent($eventName, $this-&gt;composer, $this-&gt;io, $operation));
}






public function dispatchCommandEvent($eventName)
{
$this-&gt;doDispatch(new CommandEvent($eventName, $this-&gt;composer, $this-&gt;io));
}






protected function doDispatch(Event $event)
{
$listeners = $this-&gt;getListeners($event);

foreach ($listeners as $callable) {
$className = substr($callable, 0, strpos($callable, '::'));
$methodName = substr($callable, strpos($callable, '::') + 2);

if (!class_exists($className)) {
throw new \UnexpectedValueException('Class '.$className.' is not autoloadable, can not call '.$event-&gt;getName().' script');
}
if (!is_callable($callable)) {
throw new \UnexpectedValueException('Method '.$callable.' is not callable, can not call '.$event-&gt;getName().' script');
}

try {
$className::$methodName($event);
} catch (\Exception $e) {
$message = "Script %s handling the %s event terminated with an exception";
$this-&gt;io-&gt;write('&lt;error&gt;'.sprintf($message, $callable, $event-&gt;getName()).'&lt;/error&gt;');
throw $e;
}
}
}





protected function getListeners(Event $event)
{
$package = $this-&gt;composer-&gt;getPackage();
$scripts = $package-&gt;getScripts();

if (empty($scripts[$event-&gt;getName()])) {
return array();
}

if ($this-&gt;loader) {
$this-&gt;loader-&gt;unregister();
}

$generator = new AutoloadGenerator;
$packages = $this-&gt;composer-&gt;getRepositoryManager()-&gt;getLocalRepository()-&gt;getPackages();
$packageMap = $generator-&gt;buildPackageMap($this-&gt;composer-&gt;getInstallationManager(), $package, $packages);
$map = $generator-&gt;parseAutoloads($packageMap);
$this-&gt;loader = $generator-&gt;createLoader($map);
$this-&gt;loader-&gt;register();

return $scripts[$event-&gt;getName()];
}
}
&lt;?php











namespace Composer\Installer;

use Composer\Repository\InstalledRepositoryInterface;
use Composer\Package\PackageInterface;








class NoopInstaller implements InstallerInterface
{



public function supports($packageType)
{
return true;
}




public function isInstalled(InstalledRepositoryInterface $repo, PackageInterface $package)
{
return $repo-&gt;hasPackage($package);
}




public function install(InstalledRepositoryInterface $repo, PackageInterface $package)
{
if (!$repo-&gt;hasPackage($package)) {
$repo-&gt;addPackage(clone $package);
}
}




public function update(InstalledRepositoryInterface $repo, PackageInterface $initial, PackageInterface $target)
{
if (!$repo-&gt;hasPackage($initial)) {
throw new \InvalidArgumentException('Package is not installed: '.$initial);
}

if (!$repo-&gt;hasPackage($target)) {
$repo-&gt;addPackage(clone $target);
}
}




public function uninstall(InstalledRepositoryInterface $repo, PackageInterface $package)
{
if (!$repo-&gt;hasPackage($package)) {

 return;
throw new \InvalidArgumentException('Package is not installed: '.$package);
}
$repo-&gt;removePackage($package);
}




public function getInstallPath(PackageInterface $package)
{
$targetDir = $package-&gt;getTargetDir();

return $package-&gt;getPrettyName() . ($targetDir ? '/'.$targetDir : '');
}
}
&lt;?php











namespace Composer\Installer;

use Composer\Repository\InstalledRepositoryInterface;
use Composer\Package\PackageInterface;






class MetapackageInstaller implements InstallerInterface
{



public function supports($packageType)
{
return $packageType === 'metapackage';
}




public function isInstalled(InstalledRepositoryInterface $repo, PackageInterface $package)
{
return $repo-&gt;hasPackage($package);
}




public function install(InstalledRepositoryInterface $repo, PackageInterface $package)
{
$repo-&gt;addPackage(clone $package);
}




public function update(InstalledRepositoryInterface $repo, PackageInterface $initial, PackageInterface $target)
{
if (!$repo-&gt;hasPackage($initial)) {
throw new \InvalidArgumentException('Package is not installed: '.$initial);
}

$repo-&gt;removePackage($initial);
$repo-&gt;addPackage(clone $target);
}




public function uninstall(InstalledRepositoryInterface $repo, PackageInterface $package)
{
if (!$repo-&gt;hasPackage($package)) {

 return;
throw new \InvalidArgumentException('Package is not installed: '.$package);
}

$repo-&gt;removePackage($package);
}




public function getInstallPath(PackageInterface $package)
{
return '';
}
}
&lt;?php











namespace Composer\Installer;

use Composer\IO\IOInterface;
use Composer\Composer;
use Composer\Downloader\PearPackageExtractor;
use Composer\Repository\InstalledRepositoryInterface;
use Composer\Package\PackageInterface;







class PearInstaller extends LibraryInstaller
{







public function __construct(IOInterface $io, Composer $composer, $type = 'pear-library')
{
parent::__construct($io, $composer, $type);
}




public function update(InstalledRepositoryInterface $repo, PackageInterface $initial, PackageInterface $target)
{
$this-&gt;uninstall($repo, $initial);
$this-&gt;install($repo, $target);
}

protected function installCode(PackageInterface $package)
{
parent::installCode($package);
parent::initializeBinDir();

$isWindows = defined('PHP_WINDOWS_VERSION_BUILD');
$php_bin = $this-&gt;binDir . ($isWindows ? '/composer-php.bat' : '/composer-php');

$installPath = $this-&gt;getInstallPath($package);
$vars = array(
'os' =&gt; $isWindows ? 'windows' : 'linux',
'php_bin' =&gt; $php_bin,
'pear_php' =&gt; $installPath,
'php_dir' =&gt; $installPath,
'bin_dir' =&gt; $installPath . '/bin',
'data_dir' =&gt; $installPath . '/data',
'version' =&gt; $package-&gt;getPrettyVersion(),
);

$packageArchive = $this-&gt;getInstallPath($package).'/'.pathinfo($package-&gt;getDistUrl(), PATHINFO_BASENAME);
$pearExtractor = new PearPackageExtractor($packageArchive);
$pearExtractor-&gt;extractTo($this-&gt;getInstallPath($package), array('php' =&gt; '/', 'script' =&gt; '/bin', 'data' =&gt; '/data'), $vars);

if ($this-&gt;io-&gt;isVerbose()) {
$this-&gt;io-&gt;write('    Cleaning up');
}
unlink($packageArchive);
}

protected function getBinaries(PackageInterface $package)
{
$binariesPath = $this-&gt;getInstallPath($package) . '/bin/';
$binaries = array();
if (file_exists($binariesPath)) {
foreach (new \FilesystemIterator($binariesPath, \FilesystemIterator::KEY_AS_FILENAME | \FilesystemIterator::CURRENT_AS_FILEINFO) as $fileName =&gt; $value) {
if (!$value-&gt;isDir()) {
$binaries[] = 'bin/'.$fileName;
}
}
}

return $binaries;
}

protected function initializeBinDir()
{
parent::initializeBinDir();
file_put_contents($this-&gt;binDir.'/composer-php', $this-&gt;generateUnixyPhpProxyCode());
chmod($this-&gt;binDir.'/composer-php', 0777);
file_put_contents($this-&gt;binDir.'/composer-php.bat', $this-&gt;generateWindowsPhpProxyCode());
chmod($this-&gt;binDir.'/composer-php.bat', 0777);
}

protected function generateWindowsProxyCode($bin, $link)
{
$binPath = $this-&gt;filesystem-&gt;findShortestPath($link, $bin);
if ('.bat' === substr($bin, -4)) {
$caller = 'call';
} else {
$handle = fopen($bin, 'r');
$line = fgets($handle);
fclose($handle);
if (preg_match('{^#!/(?:usr/bin/env )?(?:[^/]+/)*(.+)$}m', $line, $match)) {
$caller = trim($match[1]);
} else {
$caller = 'php';
}

if ($caller === 'php') {
return "@echo off\r\n".
"pushd .\r\n".
"cd %~dp0\r\n".
"set PHP_PROXY=%CD%\\composer-php.bat\r\n".
"cd ".escapeshellarg(dirname($binPath))."\r\n".
"set BIN_TARGET=%CD%\\".basename($binPath)."\r\n".
"popd\r\n".
"%PHP_PROXY% \"%BIN_TARGET%\" %*\r\n";
}
}

return "@echo off\r\n".
"pushd .\r\n".
"cd %~dp0\r\n".
"cd ".escapeshellarg(dirname($binPath))."\r\n".
"set BIN_TARGET=%CD%\\".basename($binPath)."\r\n".
"popd\r\n".
$caller." \"%BIN_TARGET%\" %*\r\n";
}

private function generateWindowsPhpProxyCode()
{
$binToVendor = $this-&gt;filesystem-&gt;findShortestPath($this-&gt;binDir, $this-&gt;vendorDir, true);

return
"@echo off\r\n" .
"setlocal enabledelayedexpansion\r\n" .
"set BIN_DIR=%~dp0\r\n" .
"set VENDOR_DIR=%BIN_DIR%\\".$binToVendor."\r\n" .
"set DIRS=.\r\n" .
"FOR /D %%V IN (%VENDOR_DIR%\\*) DO (\r\n" .
"    FOR /D %%P IN (%%V\\*) DO (\r\n" .
"        set DIRS=!DIRS!;%%~fP\r\n" .
"    )\r\n" .
")\r\n" .
"php.exe -d include_path=!DIRS! %*\r\n";
}

private function generateUnixyPhpProxyCode()
{
$binToVendor = $this-&gt;filesystem-&gt;findShortestPath($this-&gt;binDir, $this-&gt;vendorDir, true);

return
"#!/usr/bin/env sh\n".
"SRC_DIR=`pwd`\n".
"BIN_DIR=`dirname $(readlink -f $0)`\n".
"VENDOR_DIR=\$BIN_DIR/".escapeshellarg($binToVendor)."\n".
"DIRS=\"\"\n".
"for vendor in \$VENDOR_DIR/*; do\n".
"    if [ -d \"\$vendor\" ]; then\n".
"        for package in \$vendor/*; do\n".
"            if [ -d \"\$package\" ]; then\n".
"                DIRS=\"\${DIRS}:\${package}\"\n".
"            fi\n".
"        done\n".
"    fi\n".
"done\n".
"php -d include_path=\".\$DIRS\" $@\n";
}
}
&lt;?php











namespace Composer\Installer;

use Composer\Package\PackageInterface;
use Composer\Downloader\DownloadManager;
use Composer\Repository\InstalledRepositoryInterface;







class ProjectInstaller implements InstallerInterface
{
private $installPath;
private $downloadManager;

public function __construct($installPath, DownloadManager $dm)
{
$this-&gt;installPath = $installPath;
$this-&gt;downloadManager = $dm;
}







public function supports($packageType)
{
return true;
}




public function isInstalled(InstalledRepositoryInterface $repo, PackageInterface $package)
{
return false;
}




public function install(InstalledRepositoryInterface $repo, PackageInterface $package)
{
$installPath = $this-&gt;installPath;
if (file_exists($installPath)) {
throw new \InvalidArgumentException("Project directory $installPath already exists.");
}
if (!file_exists(dirname($installPath))) {
throw new \InvalidArgumentException("Project root " . dirname($installPath) . " does not exist.");
}
mkdir($installPath, 0777);
$this-&gt;downloadManager-&gt;download($package, $installPath);
}




public function update(InstalledRepositoryInterface $repo, PackageInterface $initial, PackageInterface $target)
{
throw new \InvalidArgumentException("not supported");
}




public function uninstall(InstalledRepositoryInterface $repo, PackageInterface $package)
{
throw new \InvalidArgumentException("not supported");
}







public function getInstallPath(PackageInterface $package)
{
return $this-&gt;installPath;
}
}
&lt;?php











namespace Composer\Installer;

use Composer\Composer;
use Composer\IO\IOInterface;
use Composer\Downloader\DownloadManager;
use Composer\Repository\InstalledRepositoryInterface;
use Composer\Package\PackageInterface;
use Composer\Util\Filesystem;







class LibraryInstaller implements InstallerInterface
{
protected $composer;
protected $vendorDir;
protected $binDir;
protected $downloadManager;
protected $io;
protected $type;
protected $filesystem;







public function __construct(IOInterface $io, Composer $composer, $type = 'library')
{
$this-&gt;composer = $composer;
$this-&gt;downloadManager = $composer-&gt;getDownloadManager();
$this-&gt;io = $io;
$this-&gt;type = $type;

$this-&gt;filesystem = new Filesystem();
$this-&gt;vendorDir = rtrim($composer-&gt;getConfig()-&gt;get('vendor-dir'), '/');
$this-&gt;binDir = rtrim($composer-&gt;getConfig()-&gt;get('bin-dir'), '/');
}




public function supports($packageType)
{
return $packageType === $this-&gt;type || null === $this-&gt;type;
}




public function isInstalled(InstalledRepositoryInterface $repo, PackageInterface $package)
{
return $repo-&gt;hasPackage($package) &amp;&amp; is_readable($this-&gt;getInstallPath($package));
}




public function install(InstalledRepositoryInterface $repo, PackageInterface $package)
{
$this-&gt;initializeVendorDir();
$downloadPath = $this-&gt;getInstallPath($package);


 if (!is_readable($downloadPath) &amp;&amp; $repo-&gt;hasPackage($package)) {
$this-&gt;removeBinaries($package);
}

$this-&gt;installCode($package);
$this-&gt;installBinaries($package);
if (!$repo-&gt;hasPackage($package)) {
$repo-&gt;addPackage(clone $package);
}
}




public function update(InstalledRepositoryInterface $repo, PackageInterface $initial, PackageInterface $target)
{
if (!$repo-&gt;hasPackage($initial)) {
throw new \InvalidArgumentException('Package is not installed: '.$initial);
}

$this-&gt;initializeVendorDir();

$this-&gt;removeBinaries($initial);
$this-&gt;updateCode($initial, $target);
$this-&gt;installBinaries($target);
$repo-&gt;removePackage($initial);
if (!$repo-&gt;hasPackage($target)) {
$repo-&gt;addPackage(clone $target);
}
}




public function uninstall(InstalledRepositoryInterface $repo, PackageInterface $package)
{
if (!$repo-&gt;hasPackage($package)) {

 return;
throw new \InvalidArgumentException('Package is not installed: '.$package);
}

$downloadPath = $this-&gt;getInstallPath($package);

$this-&gt;removeCode($package);
$this-&gt;removeBinaries($package);
$repo-&gt;removePackage($package);

if (strpos($package-&gt;getName(), '/')) {
$packageVendorDir = dirname($downloadPath);
if (is_dir($packageVendorDir) &amp;&amp; !glob($packageVendorDir.'/*')) {
@rmdir($packageVendorDir);
}
}
}




public function getInstallPath(PackageInterface $package)
{
$this-&gt;initializeVendorDir();
$targetDir = $package-&gt;getTargetDir();

return ($this-&gt;vendorDir ? $this-&gt;vendorDir.'/' : '') . $package-&gt;getPrettyName() . ($targetDir ? '/'.$targetDir : '');
}

protected function installCode(PackageInterface $package)
{
$downloadPath = $this-&gt;getInstallPath($package);
$this-&gt;downloadManager-&gt;download($package, $downloadPath);
}

protected function updateCode(PackageInterface $initial, PackageInterface $target)
{
$downloadPath = $this-&gt;getInstallPath($initial);
$this-&gt;downloadManager-&gt;update($initial, $target, $downloadPath);
}

protected function removeCode(PackageInterface $package)
{
$downloadPath = $this-&gt;getInstallPath($package);
$this-&gt;downloadManager-&gt;remove($package, $downloadPath);
}

protected function getBinaries(PackageInterface $package)
{
return $package-&gt;getBinaries();
}

protected function installBinaries(PackageInterface $package)
{
$binaries = $this-&gt;getBinaries($package);
if (!$binaries) {
return;
}
foreach ($binaries as $bin) {
$this-&gt;initializeBinDir();
$link = $this-&gt;binDir.'/'.basename($bin);
if (file_exists($link)) {
if (is_link($link)) {

 
 
 chmod($link, 0777 &amp; ~umask());
}
$this-&gt;io-&gt;write('Skipped installation of '.$bin.' for package '.$package-&gt;getName().', name conflicts with an existing file');
continue;
}
$bin = $this-&gt;getInstallPath($package).'/'.$bin;

if (defined('PHP_WINDOWS_VERSION_BUILD')) {

 if ('.bat' !== substr($bin, -4)) {
file_put_contents($link, $this-&gt;generateUnixyProxyCode($bin, $link));
chmod($link, 0777 &amp; ~umask());
$link .= '.bat';
}
file_put_contents($link, $this-&gt;generateWindowsProxyCode($bin, $link));
} else {
$cwd = getcwd();
try {

 
 $relativeBin = $this-&gt;filesystem-&gt;findShortestPath($link, $bin);
chdir(dirname($link));
symlink($relativeBin, $link);
} catch (\ErrorException $e) {
file_put_contents($link, $this-&gt;generateUnixyProxyCode($bin, $link));
}
chdir($cwd);
}
chmod($link, 0777 &amp; ~umask());
}
}

protected function removeBinaries(PackageInterface $package)
{
$binaries = $this-&gt;getBinaries($package);
if (!$binaries) {
return;
}
foreach ($binaries as $bin) {
$link = $this-&gt;binDir.'/'.basename($bin);
if (!file_exists($link)) {
continue;
}
unlink($link);
}
}

protected function initializeVendorDir()
{
$this-&gt;filesystem-&gt;ensureDirectoryExists($this-&gt;vendorDir);
$this-&gt;vendorDir = realpath($this-&gt;vendorDir);
}

protected function initializeBinDir()
{
$this-&gt;filesystem-&gt;ensureDirectoryExists($this-&gt;binDir);
$this-&gt;binDir = realpath($this-&gt;binDir);
}

protected function generateWindowsProxyCode($bin, $link)
{
$binPath = $this-&gt;filesystem-&gt;findShortestPath($link, $bin);
if ('.bat' === substr($bin, -4)) {
$caller = 'call';
} else {
$handle = fopen($bin, 'r');
$line = fgets($handle);
fclose($handle);
if (preg_match('{^#!/(?:usr/bin/env )?(?:[^/]+/)*(.+)$}m', $line, $match)) {
$caller = trim($match[1]);
} else {
$caller = 'php';
}
}

return "@echo off\r\n".
"pushd .\r\n".
"cd %~dp0\r\n".
"cd ".escapeshellarg(dirname($binPath))."\r\n".
"set BIN_TARGET=%CD%\\".basename($binPath)."\r\n".
"popd\r\n".
$caller." \"%BIN_TARGET%\" %*\r\n";
}

protected function generateUnixyProxyCode($bin, $link)
{
$binPath = $this-&gt;filesystem-&gt;findShortestPath($link, $bin);

return "#!/usr/bin/env sh\n".
'SRC_DIR=`pwd`'."\n".
'cd `dirname "$0"`'."\n".
'cd '.escapeshellarg(dirname($binPath))."\n".
'BIN_TARGET=`pwd`/'.basename($binPath)."\n".
'cd $SRC_DIR'."\n".
'$BIN_TARGET "$@"'."\n";
}
}
&lt;?php











namespace Composer\Installer;

use Composer\Package\PackageInterface;
use Composer\Package\AliasPackage;
use Composer\Repository\RepositoryInterface;
use Composer\Repository\NotifiableRepositoryInterface;
use Composer\Repository\InstalledRepositoryInterface;
use Composer\DependencyResolver\Operation\OperationInterface;
use Composer\DependencyResolver\Operation\InstallOperation;
use Composer\DependencyResolver\Operation\UpdateOperation;
use Composer\DependencyResolver\Operation\UninstallOperation;
use Composer\DependencyResolver\Operation\MarkAliasInstalledOperation;
use Composer\DependencyResolver\Operation\MarkAliasUninstalledOperation;







class InstallationManager
{
private $installers = array();
private $cache = array();






public function addInstaller(InstallerInterface $installer)
{
array_unshift($this-&gt;installers, $installer);
$this-&gt;cache = array();
}








public function disableCustomInstallers()
{
foreach ($this-&gt;installers as $i =&gt; $installer) {
if ( ! $installer instanceof InstallerInstaller) {
continue;
}

unset($this-&gt;installers[$i]);
}
}










public function getInstaller($type)
{
$type = strtolower($type);

if (isset($this-&gt;cache[$type])) {
return $this-&gt;cache[$type];
}

foreach ($this-&gt;installers as $installer) {
if ($installer-&gt;supports($type)) {
return $this-&gt;cache[$type] = $installer;
}
}

throw new \InvalidArgumentException('Unknown installer type: '.$type);
}









public function isPackageInstalled(InstalledRepositoryInterface $repo, PackageInterface $package)
{
if ($package instanceof AliasPackage) {
return $repo-&gt;hasPackage($package) &amp;&amp; $this-&gt;isPackageInstalled($repo, $package-&gt;getAliasOf());
}

return $this-&gt;getInstaller($package-&gt;getType())-&gt;isInstalled($repo, $package);
}







public function execute(RepositoryInterface $repo, OperationInterface $operation)
{
$method = $operation-&gt;getJobType();
$this-&gt;$method($repo, $operation);
}







public function install(RepositoryInterface $repo, InstallOperation $operation)
{
$package = $operation-&gt;getPackage();
$installer = $this-&gt;getInstaller($package-&gt;getType());
$installer-&gt;install($repo, $package);
$this-&gt;notifyInstall($package);
}







public function update(RepositoryInterface $repo, UpdateOperation $operation)
{
$initial = $operation-&gt;getInitialPackage();
$target = $operation-&gt;getTargetPackage();

$initialType = $initial-&gt;getType();
$targetType = $target-&gt;getType();

if ($initialType === $targetType) {
$installer = $this-&gt;getInstaller($initialType);
$installer-&gt;update($repo, $initial, $target);
$this-&gt;notifyInstall($target);
} else {
$this-&gt;getInstaller($initialType)-&gt;uninstall($repo, $initial);
$this-&gt;getInstaller($targetType)-&gt;install($repo, $target);
}
}







public function uninstall(RepositoryInterface $repo, UninstallOperation $operation)
{
$package = $operation-&gt;getPackage();
$installer = $this-&gt;getInstaller($package-&gt;getType());
$installer-&gt;uninstall($repo, $package);
}







public function markAliasInstalled(RepositoryInterface $repo, MarkAliasInstalledOperation $operation)
{
$package = $operation-&gt;getPackage();

if (!$repo-&gt;hasPackage($package)) {
$repo-&gt;addPackage(clone $package);
}
}







public function markAliasUninstalled(RepositoryInterface $repo, MarkAliasUninstalledOperation $operation)
{
$package = $operation-&gt;getPackage();

$repo-&gt;removePackage($package);
}







public function getInstallPath(PackageInterface $package)
{
$installer = $this-&gt;getInstaller($package-&gt;getType());

return $installer-&gt;getInstallPath($package);
}

private function notifyInstall(PackageInterface $package)
{
if ($package-&gt;getRepository() instanceof NotifiableRepositoryInterface) {
$package-&gt;getRepository()-&gt;notifyInstall($package);
}
}
}
&lt;?php











namespace Composer\Installer;

use Composer\Package\PackageInterface;
use Composer\Repository\InstalledRepositoryInterface;







interface InstallerInterface
{






public function supports($packageType);









public function isInstalled(InstalledRepositoryInterface $repo, PackageInterface $package);







public function install(InstalledRepositoryInterface $repo, PackageInterface $package);










public function update(InstalledRepositoryInterface $repo, PackageInterface $initial, PackageInterface $target);







public function uninstall(InstalledRepositoryInterface $repo, PackageInterface $package);







public function getInstallPath(PackageInterface $package);
}
&lt;?php











namespace Composer\Installer;

use Composer\Composer;
use Composer\IO\IOInterface;
use Composer\Autoload\AutoloadGenerator;
use Composer\Repository\InstalledRepositoryInterface;
use Composer\Package\PackageInterface;






class InstallerInstaller extends LibraryInstaller
{
private $installationManager;
private static $classCounter = 0;





public function __construct(IOInterface $io, Composer $composer, $type = 'library')
{
parent::__construct($io, $composer, 'composer-installer');
$this-&gt;installationManager = $composer-&gt;getInstallationManager();

foreach ($composer-&gt;getRepositoryManager()-&gt;getLocalRepositories() as $repo) {
foreach ($repo-&gt;getPackages() as $package) {
if ('composer-installer' === $package-&gt;getType()) {
$this-&gt;registerInstaller($package);
}
}
}
}




public function install(InstalledRepositoryInterface $repo, PackageInterface $package)
{
$extra = $package-&gt;getExtra();
if (empty($extra['class'])) {
throw new \UnexpectedValueException('Error while installing '.$package-&gt;getPrettyName().', composer-installer packages should have a class defined in their extra key to be usable.');
}

parent::install($repo, $package);
$this-&gt;registerInstaller($package);
}




public function update(InstalledRepositoryInterface $repo, PackageInterface $initial, PackageInterface $target)
{
$extra = $target-&gt;getExtra();
if (empty($extra['class'])) {
throw new \UnexpectedValueException('Error while installing '.$target-&gt;getPrettyName().', composer-installer packages should have a class defined in their extra key to be usable.');
}

parent::update($repo, $initial, $target);
$this-&gt;registerInstaller($target);
}

private function registerInstaller(PackageInterface $package)
{
$downloadPath = $this-&gt;getInstallPath($package);

$extra = $package-&gt;getExtra();
$classes = is_array($extra['class']) ? $extra['class'] : array($extra['class']);

$generator = new AutoloadGenerator;
$map = $generator-&gt;parseAutoloads(array(array($package, $downloadPath)));
$classLoader = $generator-&gt;createLoader($map);
$classLoader-&gt;register();

foreach ($classes as $class) {
if (class_exists($class, false)) {
$code = file_get_contents($classLoader-&gt;findFile($class));
$code = preg_replace('{^class\s+(\S+)}mi', 'class $1_composer_tmp'.self::$classCounter, $code);
eval('?&gt;'.$code);
$class .= '_composer_tmp'.self::$classCounter;
self::$classCounter++;
}

$installer = new $class($this-&gt;io, $this-&gt;composer);
$this-&gt;installationManager-&gt;addInstaller($installer);
}
}
}
&lt;?php











namespace Composer\Console;

use Symfony\Component\Console\Application as BaseApplication;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Formatter\OutputFormatter;
use Symfony\Component\Console\Formatter\OutputFormatterStyle;
use Composer\Command;
use Composer\Command\Helper\DialogHelper;
use Composer\Composer;
use Composer\Factory;
use Composer\IO\IOInterface;
use Composer\IO\ConsoleIO;
use Composer\Util\ErrorHandler;








class Application extends BaseApplication
{



protected $composer;




protected $io;

public function __construct()
{
ErrorHandler::register();
parent::__construct('Composer', Composer::VERSION);
}




public function run(InputInterface $input = null, OutputInterface $output = null)
{
if (null === $output) {
$styles['highlight'] = new OutputFormatterStyle('red');
$styles['warning'] = new OutputFormatterStyle('black', 'yellow');
$formatter = new OutputFormatter(null, $styles);
$output = new ConsoleOutput(ConsoleOutput::VERBOSITY_NORMAL, null, $formatter);
}

return parent::run($input, $output);
}




public function doRun(InputInterface $input, OutputInterface $output)
{
$this-&gt;io = new ConsoleIO($input, $output, $this-&gt;getHelperSet());

if (version_compare(PHP_VERSION, '5.3.2', '&lt;')) {
$output-&gt;writeln('&lt;warning&gt;Composer only officially supports PHP 5.3.2 and above, you will most likely encounter problems with your PHP '.PHP_VERSION.', upgrading is strongly recommended.&lt;/warning&gt;');
}

if (defined('COMPOSER_DEV_WARNING_TIME') &amp;&amp; $this-&gt;getCommandName($input) !== 'self-update') {
if (time() &gt; COMPOSER_DEV_WARNING_TIME) {
$output-&gt;writeln(sprintf('&lt;warning&gt;This dev build of composer is outdated, please run "%s self-update" to get the latest version.&lt;/warning&gt;', $_SERVER['PHP_SELF']));
}
}

return parent::doRun($input, $output);
}





public function getComposer($required = true)
{
if (null === $this-&gt;composer) {
try {
$this-&gt;composer = Factory::create($this-&gt;io);
} catch (\InvalidArgumentException $e) {
if ($required) {
$this-&gt;io-&gt;write($e-&gt;getMessage());
exit(1);
}
}
}

return $this-&gt;composer;
}




public function getIO()
{
return $this-&gt;io;
}




protected function getDefaultCommands()
{
$commands = parent::getDefaultCommands();
$commands[] = new Command\AboutCommand();
$commands[] = new Command\DependsCommand();
$commands[] = new Command\InitCommand();
$commands[] = new Command\InstallCommand();
$commands[] = new Command\CreateProjectCommand();
$commands[] = new Command\UpdateCommand();
$commands[] = new Command\SearchCommand();
$commands[] = new Command\ValidateCommand();
$commands[] = new Command\ShowCommand();
$commands[] = new Command\RequireCommand();
$commands[] = new Command\DumpAutoloadCommand();

if ('phar:' === substr(__FILE__, 0, 5)) {
$commands[] = new Command\SelfUpdateCommand();
}

return $commands;
}




protected function getDefaultHelperSet()
{
$helperSet = parent::getDefaultHelperSet();

$helperSet-&gt;set(new DialogHelper());

return $helperSet;
}
}
&lt;?php











namespace Composer\Autoload;

use Composer\Config;
use Composer\Installer\InstallationManager;
use Composer\Package\AliasPackage;
use Composer\Package\PackageInterface;
use Composer\Repository\RepositoryInterface;
use Composer\Util\Filesystem;





class AutoloadGenerator
{
public function dump(Config $config, RepositoryInterface $localRepo, PackageInterface $mainPackage, InstallationManager $installationManager, $targetDir, $scanPsr0Packages = false, $suffix = '')
{
$filesystem = new Filesystem();
$filesystem-&gt;ensureDirectoryExists($config-&gt;get('vendor-dir'));
$vendorPath = strtr(realpath($config-&gt;get('vendor-dir')), '\\', '/');
$targetDir = $vendorPath.'/'.$targetDir;
$filesystem-&gt;ensureDirectoryExists($targetDir);

$relVendorPath = $filesystem-&gt;findShortestPath(getcwd(), $vendorPath, true);
$vendorPathCode = $filesystem-&gt;findShortestPathCode(realpath($targetDir), $vendorPath, true);
$vendorPathToTargetDirCode = $filesystem-&gt;findShortestPathCode($vendorPath, realpath($targetDir), true);

$appBaseDirCode = $filesystem-&gt;findShortestPathCode($vendorPath, getcwd(), true);
$appBaseDirCode = str_replace('__DIR__', '$vendorDir', $appBaseDirCode);

$namespacesFile = &lt;&lt;&lt;EOF
&lt;?php

// autoload_namespaces.php generated by Composer

\$vendorDir = $vendorPathCode;
\$baseDir = $appBaseDirCode;

return array(

EOF;

$packageMap = $this-&gt;buildPackageMap($installationManager, $mainPackage, $localRepo-&gt;getPackages());
$autoloads = $this-&gt;parseAutoloads($packageMap);

foreach ($autoloads['psr-0'] as $namespace =&gt; $paths) {
$exportedPaths = array();
foreach ($paths as $path) {
$exportedPaths[] = $this-&gt;getPathCode($filesystem, $relVendorPath, $vendorPath, $path);
}
$exportedPrefix = var_export($namespace, true);
$namespacesFile .= "    $exportedPrefix =&gt; ";
if (count($exportedPaths) &gt; 1) {
$namespacesFile .= "array(".implode(', ', $exportedPaths)."),\n";
} else {
$namespacesFile .= $exportedPaths[0].",\n";
}
}
$namespacesFile .= ");\n";

$classmapFile = &lt;&lt;&lt;EOF
&lt;?php

// autoload_classmap.php generated by Composer

\$vendorDir = $vendorPathCode;
\$baseDir = $appBaseDirCode;

return array(

EOF;


 $targetDirLoader = null;
$mainAutoload = $mainPackage-&gt;getAutoload();
if ($mainPackage-&gt;getTargetDir() &amp;&amp; $mainAutoload['psr-0']) {
$levels = count(explode('/', trim(strtr($mainPackage-&gt;getTargetDir(), '\\', '/'), '/')));
$prefixes = implode(', ', array_map(function ($prefix) {
return var_export($prefix, true);
}, array_keys($mainAutoload['psr-0'])));
$baseDirFromTargetDirCode = $filesystem-&gt;findShortestPathCode($targetDir, getcwd(), true);

$targetDirLoader = &lt;&lt;&lt;EOF

    public static function autoload(\$class)
    {
        \$dir = $baseDirFromTargetDirCode . '/';
        \$prefixes = array($prefixes);
        foreach (\$prefixes as \$prefix) {
            if (0 !== strpos(\$class, \$prefix)) {
                continue;
            }
            \$path = \$dir . implode('/', array_slice(explode('\\\\', \$class), $levels)).'.php';
            if (!\$path = stream_resolve_include_path(\$path)) {
                return false;
            }
            require \$path;

            return true;
        }
    }

EOF;
}


 $classMap = array();
$autoloads['classmap'] = new \RecursiveIteratorIterator(new \RecursiveArrayIterator($autoloads['classmap']));

if ($scanPsr0Packages) {
foreach ($autoloads['psr-0'] as $namespace =&gt; $paths) {
foreach ($paths as $dir) {
$dir = $this-&gt;getPath($filesystem, $relVendorPath, $vendorPath, $dir);
$whitelist = sprintf(
'{%s/%s.+(?&lt;!(?&lt;!/)Test\.php)$}',
preg_quote(rtrim($dir, '/')),
strpos($namespace, '_') === false ? preg_quote(strtr($namespace, '\\', '/')) : ''
);
foreach (ClassMapGenerator::createMap($dir, $whitelist) as $class =&gt; $path) {
if ('' === $namespace || 0 === strpos($class, $namespace)) {
$path = '/'.$filesystem-&gt;findShortestPath(getcwd(), $path, true);
if (!isset($classMap[$class])) {
$classMap[$class] = '$baseDir . '.var_export($path, true).",\n";
}
}
}
}
}
}
foreach ($autoloads['classmap'] as $dir) {
foreach (ClassMapGenerator::createMap($dir) as $class =&gt; $path) {
$path = '/'.$filesystem-&gt;findShortestPath(getcwd(), $path, true);
$classMap[$class] = '$baseDir . '.var_export($path, true).",\n";
}
}
foreach ($classMap as $class =&gt; $code) {
$classmapFile .= '    '.var_export($class, true).' =&gt; '.$code;
}
$classmapFile .= ");\n";

$filesCode = "";
$autoloads['files'] = new \RecursiveIteratorIterator(new \RecursiveArrayIterator($autoloads['files']));
foreach ($autoloads['files'] as $functionFile) {
$filesCode .= '        require '.$this-&gt;getPathCode($filesystem, $relVendorPath, $vendorPath, $functionFile).";\n";
}

file_put_contents($targetDir.'/autoload_namespaces.php', $namespacesFile);
file_put_contents($targetDir.'/autoload_classmap.php', $classmapFile);
if ($includePathFile = $this-&gt;getIncludePathsFile($packageMap, $filesystem, $relVendorPath, $vendorPath, $vendorPathCode, $appBaseDirCode)) {
file_put_contents($targetDir.'/include_paths.php', $includePathFile);
}
file_put_contents($vendorPath.'/autoload.php', $this-&gt;getAutoloadFile($vendorPathToTargetDirCode, $suffix));
file_put_contents($targetDir.'/autoload_real'.$suffix.'.php', $this-&gt;getAutoloadRealFile(true, true, (bool) $includePathFile, $targetDirLoader, $filesCode, $vendorPathCode, $appBaseDirCode, $suffix));
copy(__DIR__.'/ClassLoader.php', $targetDir.'/ClassLoader.php');
}

public function buildPackageMap(InstallationManager $installationManager, PackageInterface $mainPackage, array $packages)
{

 $packageMap = array();


 $packageMap[] = array($mainPackage, '');

foreach ($packages as $package) {
if ($package instanceof AliasPackage) {
continue;
}
$packageMap[] = array(
$package,
$installationManager-&gt;getInstallPath($package)
);
}

return $packageMap;
}







public function parseAutoloads(array $packageMap)
{
$autoloads = array('classmap' =&gt; array(), 'psr-0' =&gt; array(), 'files' =&gt; array());
foreach ($packageMap as $item) {
list($package, $installPath) = $item;

if (null !== $package-&gt;getTargetDir()) {
$installPath = substr($installPath, 0, -strlen('/'.$package-&gt;getTargetDir()));
}

foreach ($package-&gt;getAutoload() as $type =&gt; $mapping) {

 if (!is_array($mapping)) {
continue;
}

foreach ($mapping as $namespace =&gt; $paths) {
foreach ((array) $paths as $path) {
$autoloads[$type][$namespace][] = empty($installPath) ? $path : $installPath.'/'.$path;
}
}
}
}

foreach ($autoloads as $type =&gt; $maps) {
krsort($autoloads[$type]);
}

return $autoloads;
}







public function createLoader(array $autoloads)
{
$loader = new ClassLoader();

if (isset($autoloads['psr-0'])) {
foreach ($autoloads['psr-0'] as $namespace =&gt; $path) {
$loader-&gt;add($namespace, $path);
}
}

return $loader;
}

protected function getIncludePathsFile(array $packageMap, Filesystem $filesystem, $relVendorPath, $vendorPath, $vendorPathCode, $appBaseDirCode)
{
$includePaths = array();

foreach ($packageMap as $item) {
list($package, $installPath) = $item;

if (null !== $package-&gt;getTargetDir() &amp;&amp; strlen($package-&gt;getTargetDir()) &gt; 0) {
$installPath = substr($installPath, 0, -strlen('/'.$package-&gt;getTargetDir()));
}

foreach ($package-&gt;getIncludePaths() as $includePath) {
$includePath = trim($includePath, '/');
$includePaths[] = empty($installPath) ? $includePath : $installPath.'/'.$includePath;
}
}

if (!$includePaths) {
return;
}

$includePathsFile = &lt;&lt;&lt;EOF
&lt;?php

// include_paths.php generated by Composer

\$vendorDir = $vendorPathCode;
\$baseDir = $appBaseDirCode;

return array(

EOF;

foreach ($includePaths as $path) {
$includePathsFile .= "    " . $this-&gt;getPathCode($filesystem, $relVendorPath, $vendorPath, $path) . ",\n";
}

return $includePathsFile . ");\n";
}

protected function getPathCode(Filesystem $filesystem, $relVendorPath, $vendorPath, $path)
{
$path = strtr($path, '\\', '/');
$baseDir = '';
if (!$filesystem-&gt;isAbsolutePath($path)) {
if (strpos($path, $relVendorPath) === 0) {

 $path = substr($path, strlen($relVendorPath));
$baseDir = '$vendorDir . ';
} else {
$path = '/'.$path;
$baseDir = '$baseDir . ';
}
} elseif (strpos($path, $vendorPath) === 0) {
$path = substr($path, strlen($vendorPath));
$baseDir = '$vendorDir . ';
}

return $baseDir.var_export($path, true);
}

protected function getPath(Filesystem $filesystem, $relVendorPath, $vendorPath, $path)
{
$path = strtr($path, '\\', '/');
if (!$filesystem-&gt;isAbsolutePath($path)) {
if (strpos($path, $relVendorPath) === 0) {

 return $vendorPath . substr($path, strlen($relVendorPath));
}
return strtr(getcwd(), '\\', '/').'/'.$path;
}

return $path;
}

protected function getAutoloadFile($vendorPathToTargetDirCode, $suffix)
{
return &lt;&lt;&lt;AUTOLOAD
&lt;?php

// autoload.php generated by Composer

require_once $vendorPathToTargetDirCode . '/autoload_real$suffix.php';

return ComposerAutoloaderInit$suffix::getLoader();

AUTOLOAD;
}

protected function getAutoloadRealFile($usePSR0, $useClassMap, $useIncludePath, $targetDirLoader, $filesCode, $vendorPathCode, $appBaseDirCode, $suffix)
{

 
 
 
 
 

if ($filesCode) {
$filesCode = "\n".$filesCode;
}

$file = &lt;&lt;&lt;HEADER
&lt;?php

// autoload_real$suffix.php generated by Composer

require __DIR__ . '/ClassLoader.php';

class ComposerAutoloaderInit$suffix
{
    public static function getLoader()
    {
        \$loader = new \\Composer\\Autoload\\ClassLoader();
        \$vendorDir = $vendorPathCode;
        \$baseDir = $appBaseDirCode;


HEADER;

if ($useIncludePath) {
$file .= &lt;&lt;&lt;'INCLUDE_PATH'
        $includePaths = require __DIR__ . '/include_paths.php';
        array_push($includePaths, get_include_path());
        set_include_path(join(PATH_SEPARATOR, $includePaths));


INCLUDE_PATH;
}

if ($usePSR0) {
$file .= &lt;&lt;&lt;'PSR0'
        $map = require __DIR__ . '/autoload_namespaces.php';
        foreach ($map as $namespace =&gt; $path) {
            $loader-&gt;add($namespace, $path);
        }


PSR0;
}

if ($useClassMap) {
$file .= &lt;&lt;&lt;'CLASSMAP'
        $classMap = require __DIR__ . '/autoload_classmap.php';
        if ($classMap) {
            $loader-&gt;addClassMap($classMap);
        }


CLASSMAP;
}

if ($targetDirLoader) {
$file .= &lt;&lt;&lt;REGISTER_AUTOLOAD
        spl_autoload_register(array('ComposerAutoloaderInit$suffix', 'autoload'));


REGISTER_AUTOLOAD;

}

$file .= &lt;&lt;&lt;METHOD_FOOTER
        \$loader-&gt;register();
$filesCode
        return \$loader;
    }

METHOD_FOOTER;

$file .= $targetDirLoader;

return $file . &lt;&lt;&lt;FOOTER
}

FOOTER;

}

}
&lt;?php












namespace Composer\Autoload;






class ClassMapGenerator
{






public static function dump($dirs, $file)
{
$maps = array();

foreach ($dirs as $dir) {
$maps = array_merge($maps, static::createMap($dir));
}

file_put_contents($file, sprintf('&lt;?php return %s;', var_export($maps, true)));
}









public static function createMap($dir, $whitelist = null)
{
if (is_string($dir)) {
if (is_file($dir)) {
$dir = array(new \SplFileInfo($dir));
} else {
$dir = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($dir));
}
}

$map = array();

foreach ($dir as $file) {
if (!$file-&gt;isFile()) {
continue;
}

$path = $file-&gt;getRealPath();

if (pathinfo($path, PATHINFO_EXTENSION) !== 'php') {
continue;
}

if ($whitelist &amp;&amp; !preg_match($whitelist, strtr($path, '\\', '/'))) {
continue;
}

$classes = self::findClasses($path);

foreach ($classes as $class) {
$map[$class] = $path;
}

}

return $map;
}








private static function findClasses($path)
{
$contents = file_get_contents($path);
try {
if (!preg_match('{\b(?:class|interface|trait)\b}i', $contents)) {
return array();
}
$tokens = token_get_all($contents);
} catch (\Exception $e) {
throw new \RuntimeException('Could not scan for classes inside '.$path.": \n".$e-&gt;getMessage(), 0, $e);
}
$T_TRAIT = version_compare(PHP_VERSION, '5.4', '&lt;') ? -1 : T_TRAIT;

$classes = array();

$namespace = '';
for ($i = 0, $max = count($tokens); $i &lt; $max; $i++) {
$token = $tokens[$i];

if (is_string($token)) {
continue;
}

$class = '';

switch ($token[0]) {
case T_NAMESPACE:
$namespace = '';

 while (($t = $tokens[++$i]) &amp;&amp; is_array($t)) {
if (in_array($t[0], array(T_STRING, T_NS_SEPARATOR))) {
$namespace .= $t[1];
}
}
$namespace .= '\\';
break;
case T_CLASS:
case T_INTERFACE:
case $T_TRAIT:

 while (($t = $tokens[++$i]) &amp;&amp; is_array($t)) {
if (T_STRING === $t[0]) {
$class .= $t[1];
} elseif ($class !== '' &amp;&amp; T_WHITESPACE == $t[0]) {
break;
}
}

$classes[] = ltrim($namespace . $class, '\\');
break;
default:
break;
}
}

return $classes;
}
}
&lt;?php











namespace Composer;

use Composer\Autoload\AutoloadGenerator;
use Composer\DependencyResolver\DefaultPolicy;
use Composer\DependencyResolver\Operation\UpdateOperation;
use Composer\DependencyResolver\Pool;
use Composer\DependencyResolver\Request;
use Composer\DependencyResolver\Solver;
use Composer\DependencyResolver\SolverProblemsException;
use Composer\Downloader\DownloadManager;
use Composer\Installer\InstallationManager;
use Composer\Config;
use Composer\Installer\NoopInstaller;
use Composer\IO\IOInterface;
use Composer\Package\AliasPackage;
use Composer\Package\Link;
use Composer\Package\LinkConstraint\VersionConstraint;
use Composer\Package\Locker;
use Composer\Package\PackageInterface;
use Composer\Repository\CompositeRepository;
use Composer\Repository\InstalledArrayRepository;
use Composer\Repository\PlatformRepository;
use Composer\Repository\RepositoryInterface;
use Composer\Repository\RepositoryManager;
use Composer\Script\EventDispatcher;
use Composer\Script\ScriptEvents;






class Installer
{



protected $io;




protected $config;




protected $package;




protected $downloadManager;




protected $repositoryManager;




protected $locker;




protected $installationManager;




protected $eventDispatcher;




protected $autoloadGenerator;

protected $preferSource = false;
protected $devMode = false;
protected $dryRun = false;
protected $verbose = false;
protected $update = false;
protected $runScripts = true;
protected $updateWhitelist = null;




protected $suggestedPackages;




protected $additionalInstalledRepository;














public function __construct(IOInterface $io, Config $config, PackageInterface $package, DownloadManager $downloadManager, RepositoryManager $repositoryManager, Locker $locker, InstallationManager $installationManager, EventDispatcher $eventDispatcher, AutoloadGenerator $autoloadGenerator)
{
$this-&gt;io = $io;
$this-&gt;config = $config;
$this-&gt;package = $package;
$this-&gt;downloadManager = $downloadManager;
$this-&gt;repositoryManager = $repositoryManager;
$this-&gt;locker = $locker;
$this-&gt;installationManager = $installationManager;
$this-&gt;eventDispatcher = $eventDispatcher;
$this-&gt;autoloadGenerator = $autoloadGenerator;
}




public function run()
{
if ($this-&gt;dryRun) {
$this-&gt;verbose = true;
$this-&gt;runScripts = false;
$this-&gt;installationManager-&gt;addInstaller(new NoopInstaller);
}

if ($this-&gt;preferSource) {
$this-&gt;downloadManager-&gt;setPreferSource(true);
}


 $installedRootPackage = clone $this-&gt;package;
$installedRootPackage-&gt;setRequires(array());
$installedRootPackage-&gt;setDevRequires(array());

$platformRepo = new PlatformRepository();
$repos = array_merge(
$this-&gt;repositoryManager-&gt;getLocalRepositories(),
array(
new InstalledArrayRepository(array($installedRootPackage)),
$platformRepo,
)
);
$installedRepo = new CompositeRepository($repos);
if ($this-&gt;additionalInstalledRepository) {
$installedRepo-&gt;addRepository($this-&gt;additionalInstalledRepository);
}

$aliases = $this-&gt;aliasPackages($platformRepo);

if ($this-&gt;runScripts) {

 $eventName = $this-&gt;update ? ScriptEvents::PRE_UPDATE_CMD : ScriptEvents::PRE_INSTALL_CMD;
$this-&gt;eventDispatcher-&gt;dispatchCommandEvent($eventName);
}

$this-&gt;suggestedPackages = array();
if (!$this-&gt;doInstall($this-&gt;repositoryManager-&gt;getLocalRepository(), $installedRepo, $aliases)) {
return false;
}
if ($this-&gt;devMode) {
if (!$this-&gt;doInstall($this-&gt;repositoryManager-&gt;getLocalDevRepository(), $installedRepo, $aliases, true)) {
return false;
}
}


 foreach ($this-&gt;suggestedPackages as $suggestion) {
if (!$installedRepo-&gt;findPackages($suggestion['target'])) {
$this-&gt;io-&gt;write($suggestion['source'].' suggests installing '.$suggestion['target'].' ('.$suggestion['reason'].')');
}
}

if (!$this-&gt;dryRun) {

 if ($this-&gt;update || !$this-&gt;locker-&gt;isLocked()) {
$updatedLock = $this-&gt;locker-&gt;setLockData(
$this-&gt;repositoryManager-&gt;getLocalRepository()-&gt;getPackages(),
$this-&gt;devMode ? $this-&gt;repositoryManager-&gt;getLocalDevRepository()-&gt;getPackages() : null,
$aliases,
$this-&gt;package-&gt;getMinimumStability(),
$this-&gt;package-&gt;getStabilityFlags()
);
if ($updatedLock) {
$this-&gt;io-&gt;write('&lt;info&gt;Writing lock file&lt;/info&gt;');
}
}


 $this-&gt;io-&gt;write('&lt;info&gt;Generating autoload files&lt;/info&gt;');
$localRepos = new CompositeRepository($this-&gt;repositoryManager-&gt;getLocalRepositories());
$this-&gt;autoloadGenerator-&gt;dump($this-&gt;config, $localRepos, $this-&gt;package, $this-&gt;installationManager, 'composer');

if ($this-&gt;runScripts) {

 $eventName = $this-&gt;update ? ScriptEvents::POST_UPDATE_CMD : ScriptEvents::POST_INSTALL_CMD;
$this-&gt;eventDispatcher-&gt;dispatchCommandEvent($eventName);
}
}

return true;
}

protected function doInstall($localRepo, $installedRepo, $aliases, $devMode = false)
{
$minimumStability = $this-&gt;package-&gt;getMinimumStability();
$stabilityFlags = $this-&gt;package-&gt;getStabilityFlags();


 if (!$this-&gt;update &amp;&amp; $this-&gt;locker-&gt;isLocked($devMode)) {
$lockedPackages = $this-&gt;locker-&gt;getLockedPackages($devMode);
$minimumStability = $this-&gt;locker-&gt;getMinimumStability();
$stabilityFlags = $this-&gt;locker-&gt;getStabilityFlags();
}

$this-&gt;whitelistUpdateDependencies(
$localRepo,
$devMode,
$this-&gt;package-&gt;getRequires(),
$this-&gt;package-&gt;getDevRequires()
);


 $pool = new Pool($minimumStability, $stabilityFlags);
$pool-&gt;addRepository($installedRepo);
foreach ($this-&gt;repositoryManager-&gt;getRepositories() as $repository) {
$pool-&gt;addRepository($repository);
}


 $installFromLock = false;
$request = new Request($pool);

$constraint = new VersionConstraint('=', $this-&gt;package-&gt;getVersion());
$request-&gt;install($this-&gt;package-&gt;getName(), $constraint);

if ($this-&gt;update) {
$this-&gt;io-&gt;write('&lt;info&gt;Updating '.($devMode ? 'dev ': '').'dependencies&lt;/info&gt;');

$request-&gt;updateAll();

$links = $devMode ? $this-&gt;package-&gt;getDevRequires() : $this-&gt;package-&gt;getRequires();

foreach ($links as $link) {
$request-&gt;install($link-&gt;getTarget(), $link-&gt;getConstraint());
}
} elseif ($this-&gt;locker-&gt;isLocked($devMode)) {
$installFromLock = true;
$this-&gt;io-&gt;write('&lt;info&gt;Installing '.($devMode ? 'dev ': '').'dependencies from lock file&lt;/info&gt;');

if (!$this-&gt;locker-&gt;isFresh() &amp;&amp; !$devMode) {
$this-&gt;io-&gt;write('&lt;warning&gt;Your lock file is out of sync with your composer.json, run "composer.phar update" to update dependencies&lt;/warning&gt;');
}

foreach ($lockedPackages as $package) {
$version = $package-&gt;getVersion();
foreach ($aliases as $alias) {
if ($alias['package'] === $package-&gt;getName() &amp;&amp; $alias['version'] === $package-&gt;getVersion()) {
$version = $alias['alias_normalized'];
break;
}
}
$constraint = new VersionConstraint('=', $version);
$request-&gt;install($package-&gt;getName(), $constraint);
}
} else {
$this-&gt;io-&gt;write('&lt;info&gt;Installing '.($devMode ? 'dev ': '').'dependencies&lt;/info&gt;');

$links = $devMode ? $this-&gt;package-&gt;getDevRequires() : $this-&gt;package-&gt;getRequires();

foreach ($links as $link) {
$request-&gt;install($link-&gt;getTarget(), $link-&gt;getConstraint());
}
}


 
 
 foreach ($installedRepo-&gt;getPackages() as $package) {
if ($package-&gt;getRepository() === $localRepo) {
continue;
}

$constraint = new VersionConstraint('=', $package-&gt;getVersion());
$request-&gt;install($package-&gt;getName(), $constraint);
}


 
 if ($this-&gt;update &amp;&amp; $this-&gt;updateWhitelist) {
if ($this-&gt;locker-&gt;isLocked($devMode)) {
$currentPackages = $this-&gt;locker-&gt;getLockedPackages($devMode);
} else {
$currentPackages = $installedRepo-&gt;getPackages();
}


 $candidates = array();
foreach ($links as $link) {
$candidates[$link-&gt;getTarget()] = true;
}
foreach ($localRepo-&gt;getPackages() as $package) {
$candidates[$package-&gt;getName()] = true;
}


 foreach ($candidates as $candidate =&gt; $dummy) {
foreach ($currentPackages as $curPackage) {
if ($curPackage-&gt;getName() === $candidate) {
if ($this-&gt;isUpdateable($curPackage)) {
break;
}

$constraint = new VersionConstraint('=', $curPackage-&gt;getVersion());
$request-&gt;install($curPackage-&gt;getName(), $constraint);
}
}
}
}


 $policy = new DefaultPolicy();
$solver = new Solver($policy, $pool, $installedRepo);


 try {
$operations = $solver-&gt;solve($request);
} catch (SolverProblemsException $e) {
$this-&gt;io-&gt;write('&lt;error&gt;Your requirements could not be resolved to an installable set of packages.&lt;/error&gt;');
$this-&gt;io-&gt;write($e-&gt;getMessage());

return false;
}


 foreach ($localRepo-&gt;getPackages() as $package) {

 if (!$package-&gt;isDev()) {
continue;
}


 foreach ($operations as $operation) {
if (('update' === $operation-&gt;getJobType() &amp;&amp; $operation-&gt;getInitialPackage()-&gt;equals($package))
|| ('uninstall' === $operation-&gt;getJobType() &amp;&amp; $operation-&gt;getPackage()-&gt;equals($package))
) {
continue 2;
}
}


 if ($installFromLock) {
$lockData = $this-&gt;locker-&gt;getLockData();
unset($lockedReference);
foreach ($lockData['packages'] as $lockedPackage) {
if (!empty($lockedPackage['source-reference']) &amp;&amp; strtolower($lockedPackage['package']) === $package-&gt;getName()) {
$lockedReference = $lockedPackage['source-reference'];
break;
}
}
if (isset($lockedReference) &amp;&amp; $lockedReference !== $package-&gt;getSourceReference()) {

 $operations[] = new UpdateOperation($package, clone $package);
}
} else {

 if ($this-&gt;update) {

 if ($this-&gt;updateWhitelist &amp;&amp; !$this-&gt;isUpdateable($package)) {
continue;
}

$newPackage = $this-&gt;repositoryManager-&gt;findPackage($package-&gt;getName(), $package-&gt;getVersion());
if ($newPackage &amp;&amp; $newPackage-&gt;getSourceReference() !== $package-&gt;getSourceReference()) {
$operations[] = new UpdateOperation($package, $newPackage);
}
}


 $references = $this-&gt;package-&gt;getReferences();

if (isset($references[$package-&gt;getName()]) &amp;&amp; $references[$package-&gt;getName()] !== $package-&gt;getSourceReference()) {

 $operations[] = new UpdateOperation($package, clone $package);
}
}
}


 if (!$operations) {
$this-&gt;io-&gt;write('Nothing to install or update');
}

foreach ($operations as $operation) {

 if ('install' === $operation-&gt;getJobType()) {
foreach ($operation-&gt;getPackage()-&gt;getSuggests() as $target =&gt; $reason) {
$this-&gt;suggestedPackages[] = array(
'source' =&gt; $operation-&gt;getPackage()-&gt;getPrettyName(),
'target' =&gt; $target,
'reason' =&gt; $reason,
);
}
}

$event = 'Composer\Script\ScriptEvents::PRE_PACKAGE_'.strtoupper($operation-&gt;getJobType());
if (defined($event) &amp;&amp; $this-&gt;runScripts) {
$this-&gt;eventDispatcher-&gt;dispatchPackageEvent(constant($event), $operation);
}


 if ($installFromLock) {
$package = null;
if ('update' === $operation-&gt;getJobType()) {
$package = $operation-&gt;getTargetPackage();
} elseif ('install' === $operation-&gt;getJobType()) {
$package = $operation-&gt;getPackage();
}
if ($package &amp;&amp; $package-&gt;isDev()) {
$lockData = $this-&gt;locker-&gt;getLockData();
foreach ($lockData['packages'] as $lockedPackage) {
if (!empty($lockedPackage['source-reference']) &amp;&amp; strtolower($lockedPackage['package']) === $package-&gt;getName()) {

 if (!empty($lockedPackage['commit-date'])) {
$package-&gt;setReleaseDate(new \DateTime('@'.$lockedPackage['commit-date']));
}
$package-&gt;setSourceReference($lockedPackage['source-reference']);
break;
}
}
}
} else {

 $package = null;
if ('update' === $operation-&gt;getJobType()) {
$package = $operation-&gt;getTargetPackage();
} elseif ('install' === $operation-&gt;getJobType()) {
$package = $operation-&gt;getPackage();
}
if ($package &amp;&amp; $package-&gt;isDev()) {
$references = $this-&gt;package-&gt;getReferences();
if (isset($references[$package-&gt;getName()])) {
$package-&gt;setSourceReference($references[$package-&gt;getName()]);
}
}
}

if ($this-&gt;verbose) {
$this-&gt;io-&gt;write((string) $operation);
}

$this-&gt;installationManager-&gt;execute($localRepo, $operation);

$event = 'Composer\Script\ScriptEvents::POST_PACKAGE_'.strtoupper($operation-&gt;getJobType());
if (defined($event) &amp;&amp; $this-&gt;runScripts) {
$this-&gt;eventDispatcher-&gt;dispatchPackageEvent(constant($event), $operation);
}

if (!$this-&gt;dryRun) {
$localRepo-&gt;write();
}
}

return true;
}

private function aliasPackages(PlatformRepository $platformRepo)
{
if (!$this-&gt;update &amp;&amp; $this-&gt;locker-&gt;isLocked()) {
$aliases = $this-&gt;locker-&gt;getAliases();
} else {
$aliases = $this-&gt;package-&gt;getAliases();
}

foreach ($aliases as $alias) {
$packages = array_merge(
$platformRepo-&gt;findPackages($alias['package'], $alias['version']),
$this-&gt;repositoryManager-&gt;findPackages($alias['package'], $alias['version'])
);
foreach ($packages as $package) {
$package-&gt;setAlias($alias['alias_normalized']);
$package-&gt;setPrettyAlias($alias['alias']);
$package-&gt;getRepository()-&gt;addPackage($aliasPackage = new AliasPackage($package, $alias['alias_normalized'], $alias['alias']));
$aliasPackage-&gt;setRootPackageAlias(true);
}
}

return $aliases;
}

private function isUpdateable(PackageInterface $package)
{
if (!$this-&gt;updateWhitelist) {
throw new \LogicException('isUpdateable should only be called when a whitelist is present');
}

return isset($this-&gt;updateWhitelist[$package-&gt;getName()]);
}













private function whitelistUpdateDependencies($localRepo, $devMode, array $rootRequires, array $rootDevRequires)
{
if (!$this-&gt;updateWhitelist) {
return;
}

if ($devMode) {
$rootRequires = array_merge($rootRequires, $rootDevRequires);
}

$skipPackages = array();
foreach ($rootRequires as $require) {
$skipPackages[$require-&gt;getTarget()] = true;
}

$pool = new Pool;
$pool-&gt;addRepository($localRepo);

$seen = array();

foreach ($this-&gt;updateWhitelist as $packageName =&gt; $void) {
$packageQueue = new \SplQueue;

foreach ($pool-&gt;whatProvides($packageName) as $depPackage) {
$packageQueue-&gt;enqueue($depPackage);
}

while (!$packageQueue-&gt;isEmpty()) {
$package = $packageQueue-&gt;dequeue();
if (isset($seen[$package-&gt;getId()])) {
continue;
}

$seen[$package-&gt;getId()] = true;
$this-&gt;updateWhitelist[$package-&gt;getName()] = true;

$requires = $package-&gt;getRequires();
if ($devMode) {
$requires = array_merge($requires, $package-&gt;getDevRequires());
}

foreach ($requires as $require) {
$requirePackages = $pool-&gt;whatProvides($require-&gt;getTarget());

foreach ($requirePackages as $requirePackage) {
if (isset($skipPackages[$requirePackage-&gt;getName()])) {
continue;
}
$packageQueue-&gt;enqueue($requirePackage);
}
}
}
}
}










public static function create(IOInterface $io, Composer $composer, EventDispatcher $eventDispatcher = null, AutoloadGenerator $autoloadGenerator = null)
{
$eventDispatcher = $eventDispatcher ?: new EventDispatcher($composer, $io);
$autoloadGenerator = $autoloadGenerator ?: new AutoloadGenerator;

return new static(
$io,
$composer-&gt;getConfig(),
$composer-&gt;getPackage(),
$composer-&gt;getDownloadManager(),
$composer-&gt;getRepositoryManager(),
$composer-&gt;getLocker(),
$composer-&gt;getInstallationManager(),
$eventDispatcher,
$autoloadGenerator
);
}

public function setAdditionalInstalledRepository(RepositoryInterface $additionalInstalledRepository)
{
$this-&gt;additionalInstalledRepository = $additionalInstalledRepository;

return $this;
}







public function setDryRun($dryRun = true)
{
$this-&gt;dryRun = (boolean) $dryRun;

return $this;
}







public function setPreferSource($preferSource = true)
{
$this-&gt;preferSource = (boolean) $preferSource;

return $this;
}







public function setUpdate($update = true)
{
$this-&gt;update = (boolean) $update;

return $this;
}







public function setDevMode($devMode = true)
{
$this-&gt;devMode = (boolean) $devMode;

return $this;
}







public function setRunScripts($runScripts = true)
{
$this-&gt;runScripts = (boolean) $runScripts;

return $this;
}







public function setConfig(Config $config)
{
$this-&gt;config = $config;

return $this;
}







public function setVerbose($verbose = true)
{
$this-&gt;verbose = (boolean) $verbose;

return $this;
}








public function setUpdateWhitelist(array $packages)
{
$this-&gt;updateWhitelist = array_flip(array_map('strtolower', $packages));

return $this;
}








public function disableCustomInstallers()
{
$this-&gt;installationManager-&gt;disableCustomInstallers();
}
}
&lt;?php

/*
 * This file is part of Composer.
 *
 * (c) Nils Adermann &lt;naderman@naderman.de&gt;
 *     Jordi Boggiano &lt;j.boggiano@seld.be&gt;
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Composer\Autoload;

/**
 * ClassLoader implements a PSR-0 class loader
 *
 * See https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md
 *
 *     $loader = new \Composer\Autoload\ClassLoader();
 *
 *     // register classes with namespaces
 *     $loader-&gt;add('Symfony\Component', __DIR__.'/component');
 *     $loader-&gt;add('Symfony',           __DIR__.'/framework');
 *
 *     // activate the autoloader
 *     $loader-&gt;register();
 *
 *     // to enable searching the include path (eg. for PEAR packages)
 *     $loader-&gt;setUseIncludePath(true);
 *
 * In this example, if you try to use a class in the Symfony\Component
 * namespace or one of its children (Symfony\Component\Console for instance),
 * the autoloader will first look for the class under the component/
 * directory, and it will then fallback to the framework/ directory if not
 * found before giving up.
 *
 * This class is loosely based on the Symfony UniversalClassLoader.
 *
 * @author Fabien Potencier &lt;fabien@symfony.com&gt;
 * @author Jordi Boggiano &lt;j.boggiano@seld.be&gt;
 */
class ClassLoader
{
    private $prefixes = array();
    private $fallbackDirs = array();
    private $useIncludePath = false;
    private $classMap = array();

    public function getPrefixes()
    {
        return $this-&gt;prefixes;
    }

    public function getFallbackDirs()
    {
        return $this-&gt;fallbackDirs;
    }

    public function getClassMap()
    {
        return $this-&gt;classMap;
    }

    /**
     * @param array $classMap Class to filename map
     */
    public function addClassMap(array $classMap)
    {
        if ($this-&gt;classMap) {
            $this-&gt;classMap = array_merge($this-&gt;classMap, $classMap);
        } else {
            $this-&gt;classMap = $classMap;
        }
    }

    /**
     * Registers a set of classes
     *
     * @param string       $prefix The classes prefix
     * @param array|string $paths  The location(s) of the classes
     */
    public function add($prefix, $paths)
    {
        if (!$prefix) {
            foreach ((array) $paths as $path) {
                $this-&gt;fallbackDirs[] = $path;
            }

            return;
        }
        if (isset($this-&gt;prefixes[$prefix])) {
            $this-&gt;prefixes[$prefix] = array_merge(
                $this-&gt;prefixes[$prefix],
                (array) $paths
            );
        } else {
            $this-&gt;prefixes[$prefix] = (array) $paths;
        }
    }

    /**
     * Turns on searching the include path for class files.
     *
     * @param bool $useIncludePath
     */
    public function setUseIncludePath($useIncludePath)
    {
        $this-&gt;useIncludePath = $useIncludePath;
    }

    /**
     * Can be used to check if the autoloader uses the include path to check
     * for classes.
     *
     * @return bool
     */
    public function getUseIncludePath()
    {
        return $this-&gt;useIncludePath;
    }

    /**
     * Registers this instance as an autoloader.
     *
     * @param bool $prepend Whether to prepend the autoloader or not
     */
    public function register($prepend = false)
    {
        spl_autoload_register(array($this, 'loadClass'), true, $prepend);
    }

    /**
     * Unregisters this instance as an autoloader.
     */
    public function unregister()
    {
        spl_autoload_unregister(array($this, 'loadClass'));
    }

    /**
     * Loads the given class or interface.
     *
     * @param  string    $class The name of the class
     * @return bool|null True, if loaded
     */
    public function loadClass($class)
    {
        if ($file = $this-&gt;findFile($class)) {
            include $file;

            return true;
        }
    }

    /**
     * Finds the path to the file where the class is defined.
     *
     * @param string $class The name of the class
     *
     * @return string|null The path, if found
     */
    public function findFile($class)
    {
        if (isset($this-&gt;classMap[$class])) {
            return $this-&gt;classMap[$class];
        }

        if ('\\' == $class[0]) {
            $class = substr($class, 1);
        }

        if (false !== $pos = strrpos($class, '\\')) {
            // namespaced class name
            $classPath = str_replace('\\', DIRECTORY_SEPARATOR, substr($class, 0, $pos)) . DIRECTORY_SEPARATOR;
            $className = substr($class, $pos + 1);
        } else {
            // PEAR-like class name
            $classPath = null;
            $className = $class;
        }

        $classPath .= str_replace('_', DIRECTORY_SEPARATOR, $className) . '.php';

        foreach ($this-&gt;prefixes as $prefix =&gt; $dirs) {
            if (0 === strpos($class, $prefix)) {
                foreach ($dirs as $dir) {
                    if (file_exists($dir . DIRECTORY_SEPARATOR . $classPath)) {
                        return $dir . DIRECTORY_SEPARATOR . $classPath;
                    }
                }
            }
        }

        foreach ($this-&gt;fallbackDirs as $dir) {
            if (file_exists($dir . DIRECTORY_SEPARATOR . $classPath)) {
                return $dir . DIRECTORY_SEPARATOR . $classPath;
            }
        }

        if ($this-&gt;useIncludePath &amp;&amp; $file = stream_resolve_include_path($classPath)) {
            return $file;
        }

        $this-&gt;classMap[$class] = false;
    }
}
[
    "AFL-1.1", "AFL-1.2", "AFL-2.0", "AFL-2.1", "AFL-3.0", "APL-1.0",
    "ANTLR-PD", "Apache-1.0", "Apache-1.1", "Apache-2.0", "APSL-1.0",
    "APSL-1.1", "APSL-1.2", "APSL-2.0", "Artistic-1.0", "Artistic-2.0", "AAL",
    "BSL-1.0", "BSD-2-Clause", "BSD-2-Clause-NetBSD", "BSD-2-Clause-FreeBSD",
    "BSD-3-Clause", "BSD-4-Clause", "BSD-4-Clause-UC", "CECILL-1.0",
    "CECILL-1.1", "CECILL-2.0", "CECILL-B", "CECILL-C", "ClArtistic",
    "CNRI-Python-GPL-Compatible", "CNRI-Python", "CDDL-1.0", "CDDL-1.1",
    "CPAL-1.0", "CPL-1.0", "CATOSL-1.1", "CC-BY-1.0", "CC-BY-2.0", "CC-BY-2.5",
    "CC-BY-3.0", "CC-BY-ND-1.0", "CC-BY-ND-2.0", "CC-BY-ND-2.5", "CC-BY-ND-3.0",
    "CC-BY-NC-1.0", "CC-BY-NC-2.0", "CC-BY-NC-2.5", "CC-BY-NC-3.0",
    "CC-BY-NC-ND-1.0", "CC-BY-NC-ND-2.0", "CC-BY-NC-ND-2.5", "CC-BY-NC-ND-3.0",
    "CC-BY-NC-SA-1.0", "CC-BY-NC-SA-2.0", "CC-BY-NC-SA-2.5", "CC-BY-NC-SA-3.0",
    "CC-BY-SA-1.0", "CC-BY-SA-2.0", "CC-BY-SA-2.5", "CC-BY-SA-3.0", "CC0-1.0",
    "CUA-OPL-1.0", "EPL-1.0", "eCos-2.0", "ECL-1.0", "ECL-2.0", "EFL-1.0",
    "EFL-2.0", "Entessa", "ErlPL-1.1", "EUDatagrid", "EUPL-1.0", "EUPL-1.1",
    "Fair", "Frameworx-1.0", "AGPL-3.0", "GFDL-1.1", "GFDL-1.2", "GFDL-1.3",
    "GPL-1.0", "GPL-1.0+", "GPL-2.0", "GPL-2.0+",
    "GPL-2.0-with-autoconf-exception", "GPL-2.0-with-bison-exception",
    "GPL-2.0-with-classpath-exception", "GPL-2.0-with-font-exception",
    "GPL-2.0-with-GCC-exception", "GPL-3.0", "GPL-3.0+",
    "GPL-3.0-with-autoconf-exception", "GPL-3.0-with-GCC-exception", "LGPL-2.1",
    "LGPL-2.1+", "LGPL-3.0", "LGPL-3.0+", "LGPL-2.0", "LGPL-2.0+", "gSOAP-1.3b",
    "HPND", "IPL-1.0", "IPA", "ISC", "LPPL-1.0", "LPPL-1.1", "LPPL-1.2",
    "LPPL-1.3c", "Libpng", "LPL-1.0", "LPL-1.02", "MS-PL", "MS-RL", "MirOS",
    "MIT", "Motosoto", "MPL-1.0", "MPL-1.1", "MPL-2.0", "Multics", "NASA-1.3",
    "Naumen", "NGPL", "Nokia", "NPOSL-3.0", "NTP", "OCLC-2.0", "ODbL-1.0",
    "PDDL-1.0", "OGTSL", "OSL-1.0", "OSL-2.0", "OSL-2.1", "OSL-3.0",
    "OLDAP-2.8", "OpenSSL", "PHP-3.0", "PHP-3.01", "PostgreSQL", "Python-2.0",
    "QPL-1.0", "RPSL-1.0", "RPL-1.5", "RHeCos-1.1", "RSCPL", "Ruby", "SAX-PD",
    "OFL-1.0", "OFL-1.1", "SimPL-2.0", "Sleepycat", "SugarCRM-1.1.3", "SPL-1.0",
    "Watcom-1.0", "NCSA", "VSL-1.0", "W3C", "WXwindows", "Xnet", "XFree86-1.1",
    "YPL-1.0", "YPL-1.1", "Zimbra-1.3", "Zlib", "ZPL-1.1", "ZPL-2.0", "ZPL-2.1"
]{
    "name": "Package",
    "type": "object",
    "additionalProperties": false,
    "properties": {
        "name": {
            "type": "string",
            "description": "Package name, including 'vendor-name/' prefix.",
            "required": true
        },
        "type": {
            "description": "Package type, either 'library' for common packages, 'composer-installer' for custom installers, 'metapackage' for empty packages, or a custom type defined by whatever project this package applies to.",
            "type": "string"
        },
        "target-dir": {
            "description": "Forces the package to be installed into the given subdirectory path. This is used for autoloading PSR-0 packages that do not contain their full path. Use forward slashes for cross-platform compatibility.",
            "type": "string"
        },
        "description": {
            "type": "string",
            "description": "Short package description.",
            "required": true
        },
        "keywords": {
            "type": "array",
            "items": {
                "type": "string",
                "description": "A tag/keyword that this package relates to."
            }
        },
        "homepage": {
            "type": "string",
            "description": "Homepage URL for the project.",
            "format": "uri"
        },
        "version": {
            "type": "string",
            "description": "Package version, see http://getcomposer.org/doc/04-schema.md#version for more info on valid schemes."
        },
        "time": {
            "type": "string",
            "description": "Package release date, in 'YYYY-MM-DD' or 'YYYY-MM-DD HH:MM:SS' format."
        },
        "license": {
            "type": ["string", "array"],
            "description": "License name. Or an array of license names."
        },
        "authors": {
            "type": "array",
            "description": "List of authors that contributed to the package. This is typically the main maintainers, not the full list.",
            "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Full name of the author.",
                        "required": true
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address of the author.",
                        "format": "email"
                    },
                    "homepage": {
                        "type": "string",
                        "description": "Homepage URL for the author.",
                        "format": "uri"
                    },
                    "role": {
                        "type": "string",
                        "description": "Author's role in the project."
                    }
                }
            }
        },
        "require": {
            "type": "object",
            "description": "This is a hash of package name (keys) and version constraints (values) that are required to run this package.",
            "additionalProperties": true
        },
        "replace": {
            "type": "object",
            "description": "This is a hash of package name (keys) and version constraints (values) that can be replaced by this package.",
            "additionalProperties": true
        },
        "conflict": {
            "type": "object",
            "description": "This is a hash of package name (keys) and version constraints (values) that conflict with this package.",
            "additionalProperties": true
        },
        "provide": {
            "type": "object",
            "description": "This is a hash of package name (keys) and version constraints (values) that this package provides in addition to this package's name.",
            "additionalProperties": true
        },
        "require-dev": {
            "type": "object",
            "description": "This is a hash of package name (keys) and version constraints (values) that this package requires for developing it (testing tools and such).",
            "additionalProperties": true
        },
        "suggest": {
            "type": "object",
            "description": "This is a hash of package name (keys) and descriptions (values) that this package suggests work well with it (this will be suggested to the user during installation).",
            "additionalProperties": true
        },
        "config": {
            "type": ["object"],
            "description": "Composer options.",
            "properties": {
                "vendor-dir": {
                    "type": "string",
                    "description": "The location where all packages are installed, defaults to \"vendor\"."
                },
                "bin-dir": {
                    "type": "string",
                    "description": "The location where all binaries are linked, defaults to \"vendor/bin\"."
                }
            }
        },
        "extra": {
            "type": ["object", "array"],
            "description": "Arbitrary extra data that can be used by custom installers, for example, package of type composer-installer must have a 'class' key defining the installer class name.",
            "additionalProperties": true
        },
        "autoload": {
            "type": "object",
            "description": "Description of how the package can be autoloaded.",
            "properties": {
                "psr-0": {
                    "type": "object",
                    "description": "This is a hash of namespaces (keys) and the directories they can be found into (values, can be arrays of paths) by the autoloader.",
                    "additionalProperties": true
                },
                "classmap": {
                    "type": "array",
                    "description": "This is an array of directories that contain classes to be included in the class-map generation process."
                },
                "files": {
                    "type": "array",
                    "description": "This is an array of files that are always required on every request."
                }
            }
        },
        "repositories": {
            "type": ["object", "array"],
            "description": "A set of additional repositories where packages can be found.",
            "additionalProperties": true
        },
        "minimum-stability": {
            "type": ["string"],
            "description": "The minimum stability the packages must have to be install-able. Possible values are: dev, alpha, beta, RC, stable."
        },
        "bin": {
            "type": ["array"],
            "description": "A set of files that should be treated as binaries and symlinked into bin-dir (from config).",
            "items": {
                "type": "string"
            }
        },
        "include-path": {
            "type": ["array"],
            "description": "DEPRECATED: A list of directories which should get added to PHP's include path. This is only present to support legacy projects, and all new code should preferably use autoloading.",
            "items": {
                "type": "string"
            }
        },
        "scripts": {
            "type": ["object"],
            "description": "Scripts listeners that will be executed before/after some events.",
            "properties": {
                "pre-install-cmd": {
                    "type": ["array", "string"],
                    "description": "Occurs before the install command is executed, contains one or more Class::method callables."
                },
                "post-install-cmd": {
                    "type": ["array", "string"],
                    "description": "Occurs after the install command is executed, contains one or more Class::method callables."
                },
                "pre-update-cmd": {
                    "type": ["array", "string"],
                    "description": "Occurs before the update command is executed, contains one or more Class::method callables."
                },
                "post-update-cmd": {
                    "type": ["array", "string"],
                    "description": "Occurs after the update command is executed, contains one or more Class::method callables."
                },
                "pre-package-install": {
                    "type": ["array", "string"],
                    "description": "Occurs before a package is installed, contains one or more Class::method callables."
                },
                "post-package-install": {
                    "type": ["array", "string"],
                    "description": "Occurs after a package is installed, contains one or more Class::method callables."
                },
                "pre-package-update": {
                    "type": ["array", "string"],
                    "description": "Occurs before a package is updated, contains one or more Class::method callables."
                },
                "post-package-update": {
                    "type": ["array", "string"],
                    "description": "Occurs after a package is updated, contains one or more Class::method callables."
                },
                "pre-package-uninstall": {
                    "type": ["array", "string"],
                    "description": "Occurs before a package has been uninstalled, contains one or more Class::method callables."
                },
                "post-package-uninstall": {
                    "type": ["array", "string"],
                    "description": "Occurs after a package has been uninstalled, contains one or more Class::method callables."
                }
            }
        },
        "support": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "Email address for support.",
                    "format": "email"
                },
                "issues": {
                    "type": "string",
                    "description": "URL to the Issue Tracker.",
                    "format": "uri"
                },
                "forum": {
                    "type": "string",
                    "description": "URL to the Forum.",
                    "format": "uri"
                },
                "wiki": {
                    "type": "string",
                    "description": "URL to the Wiki.",
                    "format": "uri"
                },
                "irc": {
                    "type": "string",
                    "description": "IRC channel for support, as irc://server/channel.",
                    "format": "uri"
                },
                "source": {
                    "type": "string",
                    "description": "URL to browse or download the sources.",
                    "format": "uri"
                }
            }
        }
    }
}
MZ¬ê&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;√ø√ø&#65533;&#65533;¬∏&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;@&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;√®&#65533;&#65533;&#65533;¬∫&#65533;¬¥	√ç!¬∏L√ç!This program cannot be run in DOS mode.

$&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;√Ü,√ç;¬ßB≈æ;¬ßB≈æ;¬ßB≈æ2√ü√ó≈æ:¬ßB≈æ2√ü√Å≈æ-¬ßB≈æ2√ü√Ü≈æ9¬ßB≈æ2√ü√ë≈æ?¬ßB≈æa9≈æ8¬ßB≈æ;¬ßC≈æ¬ßB≈æ2√ü√à≈æ:¬ßB≈æ2√ü√ñ≈æ:¬ßB≈æ2√ü√ì≈æ:¬ßB≈æRich;¬ßB≈æ&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;PE&#65533;&#65533;L&#65533;¬¨MoO&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;√†&#65533;	&#65533;&#65533;
&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;8&#65533;&#65533;&#65533;&#65533;&#65533;&#65533; &#65533;&#65533;&#65533;&#65533;@&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;`&#65533;&#65533;&#65533;&#65533;&#65533;?≈ì&#65533;&#65533;&#65533;@¬Å&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;¬ê"&#65533;&#65533;P&#65533;&#65533;&#65533;&#65533;@&#65533;&#65533; &#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;P&#65533;&#65533;p&#65533;&#65533;&#65533;!&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;8!&#65533;&#65533;@&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533; &#65533;&#65533;√ò&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;.text&#65533;&#65533;&#65533;	&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;
&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533; &#65533;&#65533;`.rdata&#65533;&#65533;√é	&#65533;&#65533;&#65533; &#65533;&#65533;&#65533;
&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;@&#65533;&#65533;@.data&#65533;&#65533;&#65533;¬ê&#65533;&#65533;&#65533;0&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;@&#65533;&#65533;√Ä.rsrc&#65533;&#65533;&#65533; &#65533;&#65533;&#65533;@&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;@&#65533;&#65533;@.reloc&#65533;&#65533;√å&#65533;&#65533;&#65533;P&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;"&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;@&#65533;&#65533;B&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;j$¬∏√¶@&#65533;√®x&#65533;&#65533;j√∂√ø @&#65533;∆íe√ê&#65533;‚Äπ√∞¬çE√êPV√ø&#65533; @&#65533;‚ÄπE√ê∆í√†√ªPV√ø @&#65533;¬çM√î√øX @&#65533;∆íe√º&#65533;¬çE√îP√ø5H @&#65533;√øL @&#65533;YY√ø5\ @&#65533;¬çE√îP√ø5` @&#65533;√øD @&#65533;YY‚Äπ√à√øP @&#65533;∆íM√º√ø¬çM√î√øT @&#65533;3√Ä√®H&#65533;&#65533;√É;
&#65533;0@&#65533;u√≥√É√©¬¨&#65533;&#65533;h‚Ç¨@&#65533;√®¬£&#65533;&#65533;¬°l3@&#65533;√á$40@&#65533;√ø5h3@&#65533;¬£40@&#65533;h$0@&#65533;h(0@&#65533;h 0@&#65533;√ø&nbsp; @&#65533;∆í√Ñ¬£00@&#65533;‚Ä¶√Ä}j√®¬π&#65533;&#65533;Y√Éjh"@&#65533;√®&#65533;&#65533;3√õ‚Ä∞]√ºd¬°&#65533;&#65533;&#65533;‚Äπp‚Ä∞]√§¬ø‚Ç¨3@&#65533;SVW√ø0 @&#65533;;√Ét;√Üu3√∂F‚Ä∞u√§√´h√®&#65533;&#65533;√ø4 @&#65533;√´√ö3√∂F¬°|3@&#65533;;√Üu
j√®\&#65533;&#65533;Y√´;¬°|3@&#65533;‚Ä¶√Äu,‚Ä∞5|3@&#65533;h√∞ @&#65533;h√§ @&#65533;√®¬ß&#65533;&#65533;YY‚Ä¶√Ät√áE√º√æ√ø√ø√ø¬∏√ø&#65533;&#65533;&#65533;√©√ù&#65533;&#65533;&#65533;‚Ä∞5&lt;0@&#65533;¬°|3@&#65533;;√Üuh√† @&#65533;h√ò @&#65533;√®l&#65533;&#65533;YY√á|3@&#65533;&#65533;&#65533;&#65533;9]√§uSW√ø8 @&#65533;9≈í3@&#65533;th≈í3@&#65533;√®∆í&#65533;&#65533;Y‚Ä¶√Ät
SjS√ø≈í3@&#65533;¬°$0@&#65533;‚Äπ
¬º @&#65533;‚Ä∞√ø5$0@&#65533;√ø5(0@&#65533;√ø5 0@&#65533;√®√æ√ø√ø∆í√Ñ¬£80@&#65533;9,0@&#65533;u7P√ø√Ä @&#65533;‚ÄπE√¨‚Äπ‚Äπ	‚Ä∞M√†PQ√®≈Ω&#65533;&#65533;YY√É‚Äπe√®‚ÄπE√†¬£80@&#65533;3√õ9,0@&#65533;uP√øh @&#65533;9&lt;0@&#65533;u√ø≈ì @&#65533;√áE√º√æ√ø√ø√ø¬°80@&#65533;√®√ª&#65533;&#65533;√É¬∏MZ&#65533;&#65533;f9&#65533;&#65533;@&#65533;t3√Ä√´M¬°&lt;&#65533;@&#65533;¬ç‚Ç¨&#65533;&#65533;@&#65533;¬Å8PE&#65533;&#65533;u√©¬∑H¬Å√π&#65533;&#65533;t¬Å√π&#65533;&#65533;u√ï∆í¬∏‚Äû&#65533;&#65533;&#65533;v√å3√â9ÀÜ√∏&#65533;&#65533;&#65533;√´∆íxtv¬º3√â9ÀÜ√®&#65533;&#65533;&#65533;‚Ä¢√Å‚Äπ√Åj¬£,0@&#65533;√øp @&#65533;j√ø√øl @&#65533;YY¬£‚Äû3@&#65533;¬£ÀÜ3@&#65533;√ø√å @&#65533;‚Äπ
t3@&#65533;‚Ä∞√øÀÜ @&#65533;‚Äπ
p3@&#65533;‚Ä∞¬°¬® @&#65533;‚Äπ&#65533;¬£x3@&#65533;√®V&#65533;&#65533;√®¬¨&#65533;&#65533;∆í=0@&#65533;&#65533;uh¬µ@&#65533;√ø¬¨ @&#65533;Y√®g&#65533;&#65533;∆í=0@&#65533;√øu	j√ø√ø¬∞ @&#65533;Y3√Ä√É√®{&#65533;&#65533;√©≈∏√Ω√ø√ø‚Äπ√øU‚Äπ√¨¬Å√¨(&#65533;&#65533;¬£H1@&#65533;‚Ä∞
D1@&#65533;‚Ä∞@1@&#65533;‚Ä∞&lt;1@&#65533;‚Ä∞581@&#65533;‚Ä∞=41@&#65533;f≈í`1@&#65533;f≈í
T1@&#65533;f≈í01@&#65533;f≈í,1@&#65533;f≈í%(1@&#65533;f≈í-$1@&#65533;≈ì¬èX1@&#65533;‚ÄπE&#65533;¬£L1@&#65533;‚ÄπE¬£P1@&#65533;¬çE¬£\1@&#65533;‚Äπ‚Ä¶√†√º√ø√ø√áÀú0@&#65533;&#65533;&#65533;¬°P1@&#65533;¬£L0@&#65533;√á@0@&#65533;	&#65533;√Ä√áD0@&#65533;&#65533;&#65533;&#65533;¬°&#65533;0@&#65533;‚Ä∞‚Ä¶√ò√º√ø√ø¬°0@&#65533;‚Ä∞‚Ä¶√ú√º√ø√ø√ø @&#65533;¬£¬ê0@&#65533;j√®?&#65533;&#65533;Yj&#65533;√ø  @&#65533;h!@&#65533;√ø$ @&#65533;∆í=¬ê0@&#65533;&#65533;uj√®&#65533;&#65533;Yh	&#65533;√Ä√ø( @&#65533;P√ø, @&#65533;√â√É‚Äπ√øU‚Äπ√¨‚ÄπE‚Äπ&#65533;¬Å8csm√†u*∆íxu$‚Äπ@= ‚Äút=!‚Äút="‚Äút=&#65533;@‚Ñ¢u√®√ê&#65533;&#65533;3√Ä]√Ç&#65533;hH@&#65533;√ø  @&#65533;3√Ä√É√ø%¬§ @&#65533;jh("@&#65533;√®b&#65533;&#65533;√ø5ÀÜ3@&#65533;‚Äπ5≈í @&#65533;√ø√ñY‚Ä∞E√§∆í√∏√øu√øu√ø√Ñ @&#65533;Y√´gj√®‚Äô&#65533;&#65533;Y∆íe√º&#65533;√ø5ÀÜ3@&#65533;√ø√ñ‚Ä∞E√§√ø5‚Äû3@&#65533;√ø√ñYY‚Ä∞E√†¬çE√†P¬çE√§P√øu‚Äπ5l @&#65533;√ø√ñYP√®U&#65533;&#65533;‚Ä∞E√ú√øu√§√ø√ñ¬£ÀÜ3@&#65533;√øu√†√ø√ñ∆í√Ñ¬£‚Äû3@&#65533;√áE√º√æ√ø√ø√ø√®	&#65533;&#65533;&#65533;‚ÄπE√ú√®&#65533;&#65533;√Éj√®&#65533;&#65533;Y√É‚Äπ√øU‚Äπ√¨√øu√®N√ø√ø√ø√∑√ò√Ä√∑√òYH]√É‚Äπ√øV¬∏√º!@&#65533;¬æ√º!@&#65533;W‚Äπ√∏;√Üs‚Äπ‚Ä¶√Ät√ø√ê∆í√á;√ær√±_^√É‚Äπ√øV¬∏"@&#65533;¬æ"@&#65533;W‚Äπ√∏;√Üs‚Äπ‚Ä¶√Ät√ø√ê∆í√á;√ær√±_^√É√ø%√à @&#65533;√å√å√å√å‚Äπ√øU‚Äπ√¨‚ÄπM¬∏MZ&#65533;&#65533;f9t3√Ä]√É‚ÄπA&lt;√Å¬Å8PE&#65533;&#65533;u√Ø3√í¬π&#65533;&#65533;f9H‚Äù√Ç‚Äπ√Ç]√É√å√å√å√å√å√å√å√å√å√å√å‚Äπ√øU‚Äπ√¨‚ÄπE‚ÄπH&lt;√à¬∑ASV¬∑q3√íW¬çD‚Ä¶√∂v‚Äπ}‚ÄπH;√πr	‚ÄπX√ô;√ªr
B∆í√Ä(;√ñr√®3√Ä_^[]√É√å√å√å√å√å√å√å√å√å√å√å√å‚Äπ√øU‚Äπ√¨j√æhH"@&#65533;he@&#65533;d¬°&#65533;&#65533;&#65533;&#65533;P∆í√¨SVW¬°&#65533;0@&#65533;1E√∏3√ÖP¬çE√∞d¬£&#65533;&#65533;&#65533;&#65533;‚Ä∞e√®√áE√º&#65533;&#65533;&#65533;&#65533;h&#65533;&#65533;@&#65533;√®*√ø√ø√ø∆í√Ñ‚Ä¶√ÄtU‚ÄπE-&#65533;&#65533;@&#65533;Ph&#65533;&#65533;@&#65533;√®P√ø√ø√ø∆í√Ñ‚Ä¶√Ät;‚Äπ@$√Å√®√∑√ê∆í√†√áE√º√æ√ø√ø√ø‚ÄπM√∞d‚Ä∞
&#65533;&#65533;&#65533;&#65533;Y_^[‚Äπ√•]√É‚ÄπE√¨‚Äπ‚Äπ3√í=&#65533;&#65533;√Ä‚Äù√Ç‚Äπ√Ç√É‚Äπe√®√áE√º√æ√ø√ø√ø3√Ä‚ÄπM√∞d‚Ä∞
&#65533;&#65533;&#65533;&#65533;Y_^[‚Äπ√•]√É√å√ø%¬∏ @&#65533;√ø%¬¥ @&#65533;√å√åhe@&#65533;d√ø5&#65533;&#65533;&#65533;&#65533;‚ÄπD$‚Ä∞l$¬çl$+√†SVW¬°&#65533;0@&#65533;1E√º3√ÖP‚Ä∞e√®√øu√∏‚ÄπE√º√áE√º√æ√ø√ø√ø‚Ä∞E√∏¬çE√∞d¬£&#65533;&#65533;&#65533;&#65533;√É‚ÄπM√∞d‚Ä∞
&#65533;&#65533;&#65533;&#65533;Y__^[‚Äπ√•]Q√É‚Äπ√øU‚Äπ√¨√øu√øu√øu√øuh‚Ä°@&#65533;h&#65533;0@&#65533;√®√ß&#65533;&#65533;&#65533;∆í√Ñ]√É‚Äπ√øVh&#65533;&#65533;&#65533;h&#65533;&#65533;&#65533;3√∂V√®√ô&#65533;&#65533;&#65533;∆í√Ñ‚Ä¶√Ät
VVVVV√®√Ç&#65533;&#65533;&#65533;∆í√Ñ^√É3√Ä√É‚Äπ√øU‚Äπ√¨∆í√¨¬°&#65533;0@&#65533;∆íe√∏&#65533;∆íe√º&#65533;SW¬øN√¶@¬ª¬ª&#65533;&#65533;√ø√ø;√át
‚Ä¶√Ét	√∑√ê¬£0@&#65533;√´`V¬çE√∏P√ø&lt; @&#65533;‚Äπu√º3u√∏√ø @&#65533;3√∞√ø @&#65533;3√∞√ø @&#65533;3√∞¬çE√∞P√ø @&#65533;‚ÄπE√¥3E√∞3√∞;√∑u¬æO√¶@¬ª√´‚Ä¶√≥u‚Äπ√Ü√Å√†√∞‚Ä∞5&#65533;0@&#65533;√∑√ñ‚Ä∞50@&#65533;^_[√â√É√ø%t @&#65533;√ø%x @&#65533;√ø%| @&#65533;√ø%‚Ç¨ @&#65533;√ø%‚Äû @&#65533;√ø%¬ê @&#65533;√ø%‚Äù @&#65533;√ø%Àú @&#65533;√ø%√ê @&#65533;Pd√ø5&#65533;&#65533;&#65533;&#65533;¬çD$+d$SVW‚Ä∞(‚Äπ√®¬°&#65533;0@&#65533;3√ÖP‚Ä∞E√∞√øu√º√áE√º√ø√ø√ø√ø¬çE√¥d¬£&#65533;&#65533;&#65533;&#65533;√É‚ÄπM√¥d‚Ä∞
&#65533;&#65533;&#65533;&#65533;Y__^[‚Äπ√•]Q√É‚ÄπM√∞3√ç√®¬Ø√∑√ø√ø√©√ù√ø√ø√ø¬çM√î√ø%T @&#65533;‚ÄπT$¬çB‚ÄπJ√å3√à√®¬ê√∑√ø√ø‚ÄπJ√º3√à√®‚Ä†√∑√ø√ø¬∏l"@&#65533;√©s√ø√ø√ø¬∏#&#65533;&#65533;√ä#&#65533;&#65533;√ú#&#65533;&#65533;ÀÜ)&#65533;&#65533;r)&#65533;&#65533;b)&#65533;&#65533;H)&#65533;&#65533;4)&#65533;&#65533;)&#65533;&#65533;√∫(&#65533;&#65533;√¶(&#65533;&#65533;√í(&#65533;&#65533;¬¥(&#65533;&#65533;¬¨(&#65533;&#65533;‚Äì(&#65533;&#65533;≈æ)&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;√∫#&#65533;&#65533;√†$&#65533;&#65533;%&#65533;&#65533;√ä%&#65533;&#65533;&amp;&#65533;&#65533;d&amp;&#65533;&#65533;¬Æ&amp;&#65533;&#65533;¬§$&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;('&#65533;&#65533;√Ñ'&#65533;&#65533;√ñ'&#65533;&#65533;√®'&#65533;&#65533;√æ'&#65533;&#65533;(&#65533;&#65533;((&#65533;&#65533;6(&#65533;&#65533;¬¶'&#65533;&#65533;H(&#65533;&#65533;Z(&#65533;&#65533;t(&#65533;&#65533;‚Ä†(&#65533;&#65533;'&#65533;&#65533;'&#65533;&#65533;&#65533;'&#65533;&#65533;‚Äì'&#65533;&#65533;‚Äö'&#65533;&#65533;l'&#65533;&#65533;^'&#65533;&#65533;R'&#65533;&#65533;F'&#65533;&#65533;&gt;'&#65533;&#65533;&gt;(&#65533;&#65533;0'&#65533;&#65533;¬∂'&#65533;&#65533;¬∏)&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;‚Äì@&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;W@&#65533;≈†@&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;¬¨MoO&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;l&#65533;&#65533;&#65533;‚Ç¨!&#65533;&#65533;‚Ç¨&#65533;&#65533;@0@&#65533;Àú0@&#65533;bad allocation√∞!@&#65533;&#65533;&#65533;&#65533;RSDS√ë≈í¬≥¬¥¬èJ¬®!√∂√å√´LZ&#65533;&#65533;&#65533;&#65533;c:\users\seld\documents\visual studio 2010\Projects\hiddeninp\Release\hiddeninp.pdb&#65533;&#65533;&#65533;&#65533;&#65533;e&#65533;&#65533;√¶&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;√æ√ø√ø√ø&#65533;&#65533;&#65533;&#65533;√ê√ø√ø√ø&#65533;&#65533;&#65533;&#65533;√æ√ø√ø√ø@&#65533;@&#65533;&#65533;&#65533;&#65533;&#65533;√æ√ø√ø√ø&#65533;&#65533;&#65533;&#65533;√å√ø√ø√ø&#65533;&#65533;&#65533;&#65533;√æ√ø√ø√ø&#65533;&#65533;&#65533;&#65533;:@&#65533;&#65533;&#65533;&#65533;&#65533;√æ√ø√ø√ø&#65533;&#65533;&#65533;&#65533;√ò√ø√ø√ø&#65533;&#65533;&#65533;&#65533;√æ√ø√ø√ø√ã@&#65533;√ü@&#65533;√ø√ø√ø√ø√ù@&#65533;"‚Äú&#65533;&#65533;&#65533;d"@&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;√†"&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;√¨#&#65533;&#65533;&#65533; &#65533;&#65533;$#&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;√¥&amp;&#65533;&#65533;D &#65533;&#65533;H#&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;(&#65533;&#65533;h &#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;¬∏#&#65533;&#65533;√ä#&#65533;&#65533;√ú#&#65533;&#65533;ÀÜ)&#65533;&#65533;r)&#65533;&#65533;b)&#65533;&#65533;H)&#65533;&#65533;4)&#65533;&#65533;)&#65533;&#65533;√∫(&#65533;&#65533;√¶(&#65533;&#65533;√í(&#65533;&#65533;¬¥(&#65533;&#65533;¬¨(&#65533;&#65533;‚Äì(&#65533;&#65533;≈æ)&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;√∫#&#65533;&#65533;√†$&#65533;&#65533;%&#65533;&#65533;√ä%&#65533;&#65533;&amp;&#65533;&#65533;d&amp;&#65533;&#65533;¬Æ&amp;&#65533;&#65533;¬§$&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;('&#65533;&#65533;√Ñ'&#65533;&#65533;√ñ'&#65533;&#65533;√®'&#65533;&#65533;√æ'&#65533;&#65533;(&#65533;&#65533;((&#65533;&#65533;6(&#65533;&#65533;¬¶'&#65533;&#65533;H(&#65533;&#65533;Z(&#65533;&#65533;t(&#65533;&#65533;‚Ä†(&#65533;&#65533;'&#65533;&#65533;'&#65533;&#65533;&#65533;'&#65533;&#65533;‚Äì'&#65533;&#65533;‚Äö'&#65533;&#65533;l'&#65533;&#65533;^'&#65533;&#65533;R'&#65533;&#65533;F'&#65533;&#65533;&gt;'&#65533;&#65533;&gt;(&#65533;&#65533;0'&#65533;&#65533;¬∂'&#65533;&#65533;¬∏)&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;‚Ä¢GetConsoleMode&#65533;&#65533;¬∑SetConsoleMode&#65533;&#65533;;GetStdHandle&#65533;&#65533;KERNEL32.dll&#65533;&#65533;&#65533;??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z&#65533;‚Äò?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A&#65533;&#65533;J?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A&#65533;√Ç&#65533;??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z&#65533;??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z&#65533;&#65533;_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ&#65533;&#65533;{??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ&#65533;&#65533;¬≥?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z&#65533;&#65533;MSVCP90.dll&#65533;_amsg_exit&#65533;&#65533;≈∏&#65533;__getmainargs&#65533;,_cexit&#65533;&#65533;|_exit&#65533;f&#65533;_XcptFilter&#65533;√åexit&#65533;&#65533;&nbsp;&#65533;__initenv&#65533;_initterm&#65533;_initterm_e&#65533;&lt;_configthreadlocale&#65533;√£&#65533;__setusermatherr&#65533;&#65533;_adjust_fdiv&#65533;&#65533;√ã&#65533;__p__commode&#65533;&#65533;√è&#65533;__p__fmode&#65533;&#65533;j_encode_pointer&#65533;√†&#65533;__set_app_type&#65533;&#65533;K_crt_debugger_hook&#65533;&#65533;C&#65533;?terminate@@YAXXZ&#65533;MSVCR90.dll&#65533;√¶_unlock&#65533;‚Äì&#65533;__dllonexit&#65533;v_lock&#65533;_onexit&#65533;`_decode_pointer&#65533;s_except_handler4_common&#65533;_invoke_watson&#65533;&#65533;?_controlfp_s&#65533;&#65533;¬ΩInterlockedExchange&#65533;!Sleep&#65533;¬∫InterlockedCompareExchange&#65533;&#65533;-TerminateProcess&#65533;&#65533;¬©GetCurrentProcess&#65533;&gt;UnhandledExceptionFilter&#65533;&#65533;SetUnhandledExceptionFilter&#65533;√ëIsDebuggerPresent&#65533;TQueryPerformanceCounter&#65533;fGetTickCount&#65533;&#65533;¬≠GetCurrentThreadId&#65533;&#65533;¬™GetCurrentProcessId&#65533;OGetSystemTimeAsFileTime&#65533;s&#65533;__CxxFrameHandler3&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;N√¶@¬ª¬±¬øD√ø√ø√ø√ø√ø√ø√ø√ø√æ√ø√ø√ø&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533; &#65533;&#65533;‚Ç¨&#65533;&#65533;&#65533;8&#65533;&#65533;‚Ç¨&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;P&#65533;&#65533;‚Ç¨&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;h&#65533;&#65533;‚Ç¨&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;	&#65533;&#65533;‚Ç¨&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;	&#65533;&#65533;¬ê&#65533;&#65533;&#65533;&nbsp;@&#65533;&#65533;(&#65533;&#65533;√§&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;√àC&#65533;&#65533;V&#65533;&#65533;√§&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;(4&#65533;&#65533;&#65533;V&#65533;S&#65533;_&#65533;V&#65533;E&#65533;R&#65533;S&#65533;I&#65533;O&#65533;N&#65533;_&#65533;I&#65533;N&#65533;F&#65533;O&#65533;&#65533;&#65533;&#65533;&#65533;¬Ω√Ø√æ&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;&#65533;‚Ä†&#65533;&#65533;&#65533;S&#65533;t&#65533;r&#65533;i&#65533;n&#65533;g&#65533;F&#65533;i&#65533;l&#65533;e&#65533;I&#65533;n&#65533;f&#65533;o&#65533;&#65533;&#65533;b&#65533;&#65533;&#65533;0&#65533;4&#65533;0&#65533;9&#65533;0&#65533;4&#65533;b&#65533;0&#65533;&#65533;&#65533;√ä&#65533;Q&#65533;&#65533;F&#65533;i&#65533;l&#65533;e&#65533;D&#65533;e&#65533;s&#65533;c&#65533;r&#65533;i&#65533;p&#65533;t&#65533;i&#65533;o&#65533;n&#65533;&#65533;&#65533;&#65533;&#65533;R&#65533;e&#65533;a&#65533;d&#65533;s&#65533; &#65533;f&#65533;r&#65533;o&#65533;m&#65533; &#65533;s&#65533;t&#65533;d&#65533;i&#65533;n&#65533; &#65533;w&#65533;i&#65533;t&#65533;h&#65533;o&#65533;u&#65533;t&#65533; &#65533;l&#65533;e&#65533;a&#65533;k&#65533;i&#65533;n&#65533;g&#65533; &#65533;i&#65533;n&#65533;f&#65533;o&#65533; &#65533;t&#65533;o&#65533; &#65533;t&#65533;h&#65533;e&#65533; &#65533;t&#65533;e&#65533;r&#65533;m&#65533;i&#65533;n&#65533;a&#65533;l&#65533; &#65533;a&#65533;n&#65533;d&#65533; &#65533;o&#65533;u&#65533;t&#65533;p&#65533;u&#65533;t&#65533;s&#65533; &#65533;b&#65533;a&#65533;c&#65533;k&#65533; &#65533;t&#65533;o&#65533; &#65533;s&#65533;t&#65533;d&#65533;o&#65533;u&#65533;t&#65533;&#65533;&#65533;&#65533;&#65533;6&#65533;&#65533;&#65533;F&#65533;i&#65533;l&#65533;e&#65533;V&#65533;e&#65533;r&#65533;s&#65533;i&#65533;o&#65533;n&#65533;&#65533;&#65533;&#65533;&#65533;1&#65533;,&#65533; &#65533;0&#65533;,&#65533; &#65533;0&#65533;,&#65533; &#65533;0&#65533;&#65533;&#65533;&#65533;&#65533;8&#65533;&#65533;&#65533;I&#65533;n&#65533;t&#65533;e&#65533;r&#65533;n&#65533;a&#65533;l&#65533;N&#65533;a&#65533;m&#65533;e&#65533;&#65533;&#65533;h&#65533;i&#65533;d&#65533;d&#65533;e&#65533;n&#65533;i&#65533;n&#65533;p&#65533;u&#65533;t&#65533;&#65533;&#65533;P&#65533;&#65533;&#65533;L&#65533;e&#65533;g&#65533;a&#65533;l&#65533;C&#65533;o&#65533;p&#65533;y&#65533;r&#65533;i&#65533;g&#65533;h&#65533;t&#65533;&#65533;&#65533;J&#65533;o&#65533;r&#65533;d&#65533;i&#65533; &#65533;B&#65533;o&#65533;g&#65533;g&#65533;i&#65533;a&#65533;n&#65533;o&#65533; &#65533;-&#65533; &#65533;2&#65533;0&#65533;1&#65533;2&#65533;&#65533;&#65533;H&#65533;&#65533;&#65533;O&#65533;r&#65533;i&#65533;g&#65533;i&#65533;n&#65533;a&#65533;l&#65533;F&#65533;i&#65533;l&#65533;e&#65533;n&#65533;a&#65533;m&#65533;e&#65533;&#65533;&#65533;h&#65533;i&#65533;d&#65533;d&#65533;e&#65533;n&#65533;i&#65533;n&#65533;p&#65533;u&#65533;t&#65533;.&#65533;e&#65533;x&#65533;e&#65533;&#65533;&#65533;:&#65533;
&#65533;&#65533;P&#65533;r&#65533;o&#65533;d&#65533;u&#65533;c&#65533;t&#65533;N&#65533;a&#65533;m&#65533;e&#65533;&#65533;&#65533;&#65533;&#65533;H&#65533;i&#65533;d&#65533;d&#65533;e&#65533;n&#65533; &#65533;I&#65533;n&#65533;p&#65533;u&#65533;t&#65533;&#65533;&#65533;&#65533;&#65533;:&#65533;&#65533;&#65533;P&#65533;r&#65533;o&#65533;d&#65533;u&#65533;c&#65533;t&#65533;V&#65533;e&#65533;r&#65533;s&#65533;i&#65533;o&#65533;n&#65533;&#65533;&#65533;1&#65533;,&#65533; &#65533;0&#65533;,&#65533; &#65533;0&#65533;,&#65533; &#65533;0&#65533;&#65533;&#65533;&#65533;&#65533;D&#65533;&#65533;&#65533;&#65533;V&#65533;a&#65533;r&#65533;F&#65533;i&#65533;l&#65533;e&#65533;I&#65533;n&#65533;f&#65533;o&#65533;&#65533;&#65533;&#65533;&#65533;$&#65533;&#65533;&#65533;&#65533;T&#65533;r&#65533;a&#65533;n&#65533;s&#65533;l&#65533;a&#65533;t&#65533;i&#65533;o&#65533;n&#65533;&#65533;&#65533;&#65533;&#65533;	¬∞&lt;assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0"&gt;
  &lt;trustInfo xmlns="urn:schemas-microsoft-com:asm.v3"&gt;
    &lt;security&gt;
      &lt;requestedPrivileges&gt;
        &lt;requestedExecutionLevel level="asInvoker" uiAccess="false"&gt;&lt;/requestedExecutionLevel&gt;
      &lt;/requestedPrivileges&gt;
    &lt;/security&gt;
  &lt;/trustInfo&gt;
  &lt;dependency&gt;
    &lt;dependentAssembly&gt;
      &lt;assemblyIdentity type="win32" name="Microsoft.VC90.CRT" version="9.0.21022.8" processorArchitecture="x86" publicKeyToken="1fc8b3b9a1e18e3b"&gt;&lt;/assemblyIdentity&gt;
    &lt;/dependentAssembly&gt;
  &lt;/dependency&gt;
&lt;/assembly&gt;PAPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDING&#65533;&#65533;&#65533;@&#65533;&#65533;00!0/080F0L0T0^0d0n0{0‚Ä∞0‚Äî0¬°0¬®0¬Æ0¬≥0¬∏0¬Ω0√Ç0√à0√ê0√§0√ø01#1-1@1J1O1T1v1{1‚Äû1‚Ä∞1‚Äì1¬ß1¬≠1¬¥1√à1√ç1√ì1√õ1√°1√ß1√¥1√∫12"2*23292A2M2_2j2p2¬π2¬ø2√á2√é2√ì2√ô2√ü2√ß2√≠2√¥2√ª2333%303N3T3Z3`3f3l3s3z3¬Å3ÀÜ3¬è3‚Äì3¬ù3¬•3¬≠3¬µ3√Å3√ä3√è3√ï3√ü3√®3√≥3√ø34444%4;4B4‚Äπ4‚Äò4≈°4¬°4¬¨4¬≤4√Ü4√õ4√¶4√æ45!5^5c5‚Äû5‚Ä∞5¬®5H6M6_6}6‚Äò6‚Äî6&#65533;77
7*7w7|7√Å7√§7√±7√Ω78
88=8E8P8V8\8b8h8n8t8z8‚Ç¨8≈ì8√¢89&#65533;&#65533;&#65533; &#65533;&#65533;$&#65533;&#65533;&#65533;√ú0√®0√¨01 1t1x12 2@2\2`2h2t2&#65533;0&#65533;&#65533;&#65533;&#65533;&#65533;lt;?php










namespace Symfony\Component\Process;












class PhpProcess extends Process
{
private $executableFinder;












public function __construct($script, $cwd = null, array $env = array(), $timeout = 60, array $options = array())
{
parent::__construct(null, $cwd, $env, $script, $timeout, $options);

$this-&gt;executableFinder = new PhpExecutableFinder();
}






public function setPhpBinary($php)
{
$this-&gt;setCommandLine($php);
}











public function run($callback = null)
{
if (null === $this-&gt;getCommandLine()) {
if (false === $php = $this-&gt;executableFinder-&gt;find()) {
throw new \RuntimeException('Unable to find the PHP executable.');
}
$this-&gt;setCommandLine($php);
}

return parent::run($callback);
}
}
&lt;?php










namespace Symfony\Component\Process;







class ExecutableFinder
{
private static $isWindows;

private $suffixes = array('.exe', '.bat', '.cmd', '.com');

public function __construct()
{
if (null === self::$isWindows) {
self::$isWindows = 0 === stripos(PHP_OS, 'win');
}
}

public function setSuffixes(array $suffixes)
{
$this-&gt;suffixes = $suffixes;
}

public function addSuffix($suffix)
{
$this-&gt;suffixes[] = $suffix;
}










public function find($name, $default = null, array $extraDirs = array())
{
if (ini_get('open_basedir')) {
$searchPath = explode(PATH_SEPARATOR, getenv('open_basedir'));
$dirs = array();
foreach ($searchPath as $path) {
if (is_dir($path)) {
$dirs[] = $path;
} else {
$file = str_replace(dirname($path), '', $path);
if ($file == $name &amp;&amp; is_executable($path)) {
return $path;
}
}
}
} else {
$dirs = array_merge(
explode(PATH_SEPARATOR, getenv('PATH') ?: getenv('Path')),
$extraDirs
);
}

$suffixes = array('');
if (defined('PHP_WINDOWS_VERSION_BUILD')) {
$pathExt = getenv('PATHEXT');
$suffixes = $pathExt ? explode(PATH_SEPARATOR, $pathExt) : $this-&gt;suffixes;
}
foreach ($suffixes as $suffix) {
foreach ($dirs as $dir) {
if (is_file($file = $dir.DIRECTORY_SEPARATOR.$name.$suffix) &amp;&amp; (self::$isWindows || is_executable($file))) {
return $file;
}
}
}

return $default;
}
}
&lt;?php










namespace Symfony\Component\Process;









class Process
{
const ERR = 'err';
const OUT = 'out';

const STATUS_READY = 'ready';
const STATUS_STARTED = 'started';
const STATUS_TERMINATED = 'terminated';

const STDIN = 0;
const STDOUT = 1;
const STDERR = 2;

private $commandline;
private $cwd;
private $env;
private $stdin;
private $timeout;
private $options;
private $exitcode;
private $processInformation;
private $stdout;
private $stderr;
private $enhanceWindowsCompatibility;
private $pipes;
private $process;
private $status = self::STATUS_READY;

private $fileHandles;
private $readBytes;








public static $exitCodes = array(
0 =&gt; 'OK',
1 =&gt; 'General error',
2 =&gt; 'Misuse of shell builtins',

126 =&gt; 'Invoked command cannot execute',
127 =&gt; 'Command not found',
128 =&gt; 'Invalid exit argument',


 129 =&gt; 'Hangup',
130 =&gt; 'Interrupt',
131 =&gt; 'Quit and dump core',
132 =&gt; 'Illegal instruction',
133 =&gt; 'Trace/breakpoint trap',
134 =&gt; 'Process aborted',
135 =&gt; 'Bus error: "access to undefined portion of memory object"',
136 =&gt; 'Floating point exception: "erroneous arithmetic operation"',
137 =&gt; 'Kill (terminate immediately)',
138 =&gt; 'User-defined 1',
139 =&gt; 'Segmentation violation',
140 =&gt; 'User-defined 2',
141 =&gt; 'Write to pipe with no one reading',
142 =&gt; 'Signal raised by alarm',
143 =&gt; 'Termination (request to terminate)',

 145 =&gt; 'Child process terminated, stopped (or continued*)',
146 =&gt; 'Continue if stopped',
147 =&gt; 'Stop executing temporarily',
148 =&gt; 'Terminal stop signal',
149 =&gt; 'Background process attempting to read from tty ("in")',
150 =&gt; 'Background process attempting to write to tty ("out")',
151 =&gt; 'Urgent data available on socket',
152 =&gt; 'CPU time limit exceeded',
153 =&gt; 'File size limit exceeded',
154 =&gt; 'Signal raised by timer counting virtual time: "virtual timer expired"',
155 =&gt; 'Profiling timer expired',

 157 =&gt; 'Pollable event',

 159 =&gt; 'Bad syscall',
);















public function __construct($commandline, $cwd = null, array $env = null, $stdin = null, $timeout = 60, array $options = array())
{
if (!function_exists('proc_open')) {
throw new \RuntimeException('The Process class relies on proc_open, which is not available on your PHP installation.');
}

$this-&gt;commandline = $commandline;
$this-&gt;cwd = null === $cwd ? getcwd() : $cwd;
if (null !== $env) {
$this-&gt;env = array();
foreach ($env as $key =&gt; $value) {
$this-&gt;env[(binary) $key] = (binary) $value;
}
} else {
$this-&gt;env = null;
}
$this-&gt;stdin = $stdin;
$this-&gt;setTimeout($timeout);
$this-&gt;enhanceWindowsCompatibility = true;
$this-&gt;options = array_replace(array('suppress_errors' =&gt; true, 'binary_pipes' =&gt; true), $options);
}

public function __destruct()
{

 $this-&gt;stop();
}




















public function run($callback = null)
{
$this-&gt;start($callback);

return $this-&gt;wait($callback);
}






















public function start($callback = null)
{
if ($this-&gt;isRunning()) {
throw new \RuntimeException('Process is already running');
}

$this-&gt;stdout = '';
$this-&gt;stderr = '';
$callback = $this-&gt;buildCallback($callback);


 
 
 if (defined('PHP_WINDOWS_VERSION_BUILD')) {
$this-&gt;fileHandles = array(
self::STDOUT =&gt; tmpfile(),
);
$this-&gt;readBytes = array(
self::STDOUT =&gt; 0,
);
$descriptors = array(array('pipe', 'r'), $this-&gt;fileHandles[self::STDOUT], array('pipe', 'w'));
} else {
$descriptors = array(array('pipe', 'r'), array('pipe', 'w'), array('pipe', 'w'));
}

$commandline = $this-&gt;commandline;

if (defined('PHP_WINDOWS_VERSION_BUILD') &amp;&amp; $this-&gt;enhanceWindowsCompatibility) {
$commandline = 'cmd /V:ON /E:ON /C "'.$commandline.'"';
if (!isset($this-&gt;options['bypass_shell'])) {
$this-&gt;options['bypass_shell'] = true;
}
}

$this-&gt;process = proc_open($commandline, $descriptors, $this-&gt;pipes, $this-&gt;cwd, $this-&gt;env, $this-&gt;options);

if (!is_resource($this-&gt;process)) {
throw new \RuntimeException('Unable to launch a new process.');
}
$this-&gt;status = self::STATUS_STARTED;

foreach ($this-&gt;pipes as $pipe) {
stream_set_blocking($pipe, false);
}

if (null === $this-&gt;stdin) {
fclose($this-&gt;pipes[0]);
unset($this-&gt;pipes[0]);

return;
}

$writePipes = array($this-&gt;pipes[0]);
unset($this-&gt;pipes[0]);
$stdinLen = strlen($this-&gt;stdin);
$stdinOffset = 0;

while ($writePipes) {
if (defined('PHP_WINDOWS_VERSION_BUILD')) {
$this-&gt;processFileHandles($callback);
}

$r = $this-&gt;pipes;
$w = $writePipes;
$e = null;

$n = @stream_select($r, $w, $e, $this-&gt;timeout);

if (false === $n) {
break;
}
if ($n === 0) {
proc_terminate($this-&gt;process);

throw new \RuntimeException('The process timed out.');
}

if ($w) {
$written = fwrite($writePipes[0], (binary) substr($this-&gt;stdin, $stdinOffset), 8192);
if (false !== $written) {
$stdinOffset += $written;
}
if ($stdinOffset &gt;= $stdinLen) {
fclose($writePipes[0]);
$writePipes = null;
}
}

foreach ($r as $pipe) {
$type = array_search($pipe, $this-&gt;pipes);
$data = fread($pipe, 8192);
if (strlen($data) &gt; 0) {
call_user_func($callback, $type == 1 ? self::OUT : self::ERR, $data);
}
if (false === $data || feof($pipe)) {
fclose($pipe);
unset($this-&gt;pipes[$type]);
}
}
}

$this-&gt;updateStatus();
}














public function wait($callback = null)
{
$this-&gt;updateStatus();
$callback = $this-&gt;buildCallback($callback);
while ($this-&gt;pipes || (defined('PHP_WINDOWS_VERSION_BUILD') &amp;&amp; $this-&gt;fileHandles)) {
if (defined('PHP_WINDOWS_VERSION_BUILD') &amp;&amp; $this-&gt;fileHandles) {
$this-&gt;processFileHandles($callback, !$this-&gt;pipes);
}

if ($this-&gt;pipes) {
$r = $this-&gt;pipes;
$w = null;
$e = null;

$n = @stream_select($r, $w, $e, $this-&gt;timeout);

if (false === $n) {
$this-&gt;pipes = array();

continue;
}
if (0 === $n) {
proc_terminate($this-&gt;process);

throw new \RuntimeException('The process timed out.');
}

foreach ($r as $pipe) {
$type = array_search($pipe, $this-&gt;pipes);
$data = fread($pipe, 8192);
if (strlen($data) &gt; 0) {
call_user_func($callback, $type == 1 ? self::OUT : self::ERR, $data);
}
if (false === $data || feof($pipe)) {
fclose($pipe);
unset($this-&gt;pipes[$type]);
}
}
}
}
$this-&gt;updateStatus();
if ($this-&gt;processInformation['signaled']) {
throw new \RuntimeException(sprintf('The process stopped because of a "%s" signal.', $this-&gt;processInformation['stopsig']));
}

$time = 0;
while ($this-&gt;isRunning() &amp;&amp; $time &lt; 1000000) {
$time += 1000;
usleep(1000);
}

$exitcode = proc_close($this-&gt;process);

if ($this-&gt;processInformation['signaled']) {
throw new \RuntimeException(sprintf('The process stopped because of a "%s" signal.', $this-&gt;processInformation['stopsig']));
}

return $this-&gt;exitcode = $this-&gt;processInformation['running'] ? $exitcode : $this-&gt;processInformation['exitcode'];
}








public function getOutput()
{
$this-&gt;updateOutput();

return $this-&gt;stdout;
}








public function getErrorOutput()
{
$this-&gt;updateErrorOutput();

return $this-&gt;stderr;
}








public function getExitCode()
{
$this-&gt;updateStatus();

return $this-&gt;exitcode;
}












public function getExitCodeText()
{
$this-&gt;updateStatus();

return isset(self::$exitCodes[$this-&gt;exitcode]) ? self::$exitCodes[$this-&gt;exitcode] : 'Unknown error';
}








public function isSuccessful()
{
$this-&gt;updateStatus();

return 0 == $this-&gt;exitcode;
}










public function hasBeenSignaled()
{
$this-&gt;updateStatus();

return $this-&gt;processInformation['signaled'];
}










public function getTermSignal()
{
$this-&gt;updateStatus();

return $this-&gt;processInformation['termsig'];
}










public function hasBeenStopped()
{
$this-&gt;updateStatus();

return $this-&gt;processInformation['stopped'];
}










public function getStopSignal()
{
$this-&gt;updateStatus();

return $this-&gt;processInformation['stopsig'];
}






public function isRunning()
{
if (self::STATUS_STARTED !== $this-&gt;status) {
return false;
}

$this-&gt;updateStatus();

return $this-&gt;processInformation['running'];
}










public function stop($timeout=10)
{
$timeoutMicro = (int) $timeout*10E6;
if ($this-&gt;isRunning()) {
proc_terminate($this-&gt;process);
$time = 0;
while (1 == $this-&gt;isRunning() &amp;&amp; $time &lt; $timeoutMicro) {
$time += 1000;
usleep(1000);
}

foreach ($this-&gt;pipes as $pipe) {
fclose($pipe);
}
$this-&gt;pipes = array();

$exitcode = proc_close($this-&gt;process);
$this-&gt;exitcode = -1 === $this-&gt;processInformation['exitcode'] ? $exitcode : $this-&gt;processInformation['exitcode'];

if (defined('PHP_WINDOWS_VERSION_BUILD')) {
foreach ($this-&gt;fileHandles as $fileHandle) {
fclose($fileHandle);
}
$this-&gt;fileHandles = array();
}
}
$this-&gt;status = self::STATUS_TERMINATED;

return $this-&gt;exitcode;
}

public function addOutput($line)
{
$this-&gt;stdout .= $line;
}

public function addErrorOutput($line)
{
$this-&gt;stderr .= $line;
}

public function getCommandLine()
{
return $this-&gt;commandline;
}

public function setCommandLine($commandline)
{
$this-&gt;commandline = $commandline;
}

public function getTimeout()
{
return $this-&gt;timeout;
}








public function setTimeout($timeout)
{
if (null === $timeout) {
$this-&gt;timeout = null;

return;
}

$timeout = (integer) $timeout;

if ($timeout &lt; 0) {
throw new \InvalidArgumentException('The timeout value must be a valid positive integer.');
}

$this-&gt;timeout = $timeout;
}

public function getWorkingDirectory()
{
return $this-&gt;cwd;
}

public function setWorkingDirectory($cwd)
{
$this-&gt;cwd = $cwd;
}

public function getEnv()
{
return $this-&gt;env;
}

public function setEnv(array $env)
{
$this-&gt;env = $env;
}

public function getStdin()
{
return $this-&gt;stdin;
}

public function setStdin($stdin)
{
$this-&gt;stdin = $stdin;
}

public function getOptions()
{
return $this-&gt;options;
}

public function setOptions(array $options)
{
$this-&gt;options = $options;
}

public function getEnhanceWindowsCompatibility()
{
return $this-&gt;enhanceWindowsCompatibility;
}

public function setEnhanceWindowsCompatibility($enhance)
{
$this-&gt;enhanceWindowsCompatibility = (Boolean) $enhance;
}











protected function buildCallback($callback)
{
$that = $this;
$out = self::OUT;
$err = self::ERR;
$callback = function ($type, $data) use ($that, $callback, $out, $err) {
if ($out == $type) {
$that-&gt;addOutput($data);
} else {
$that-&gt;addErrorOutput($data);
}

if (null !== $callback) {
call_user_func($callback, $type, $data);
}
};

return $callback;
}




protected function updateStatus()
{
if (self::STATUS_STARTED !== $this-&gt;status) {
return;
}

$this-&gt;processInformation = proc_get_status($this-&gt;process);
if (!$this-&gt;processInformation['running']) {
$this-&gt;status = self::STATUS_TERMINATED;
if (-1 !== $this-&gt;processInformation['exitcode']) {
$this-&gt;exitcode = $this-&gt;processInformation['exitcode'];
}
}
}

protected function updateErrorOutput()
{
if (isset($this-&gt;pipes[self::STDERR]) &amp;&amp; is_resource($this-&gt;pipes[self::STDERR])) {
$this-&gt;addErrorOutput(stream_get_contents($this-&gt;pipes[self::STDERR]));
}
}

protected function updateOutput()
{
if (defined('PHP_WINDOWS_VERSION_BUILD') &amp;&amp; isset($this-&gt;fileHandles[self::STDOUT]) &amp;&amp; is_resource($this-&gt;fileHandles[self::STDOUT])) {
fseek($this-&gt;fileHandles[self::STDOUT], $this-&gt;readBytes[self::STDOUT]);
$this-&gt;addOutput(stream_get_contents($this-&gt;fileHandles[self::STDOUT]));
} elseif (isset($this-&gt;pipes[self::STDOUT]) &amp;&amp; is_resource($this-&gt;pipes[self::STDOUT])) {
$this-&gt;addOutput(stream_get_contents($this-&gt;pipes[self::STDOUT]));
}
}







private function processFileHandles($callback, $closeEmptyHandles = false)
{
$fh = $this-&gt;fileHandles;
foreach ($fh as $type =&gt; $fileHandle) {
fseek($fileHandle, $this-&gt;readBytes[$type]);
$data = fread($fileHandle, 8192);
if (strlen($data) &gt; 0) {
$this-&gt;readBytes[$type] += strlen($data);
call_user_func($callback, $type == 1 ? self::OUT : self::ERR, $data);
}
if (false === $data || ($closeEmptyHandles &amp;&amp; '' === $data &amp;&amp; feof($fileHandle))) {
fclose($fileHandle);
unset($this-&gt;fileHandles[$type]);
}
}
}
}
&lt;?php










namespace Symfony\Component\Process;






class ProcessBuilder
{
private $arguments;
private $cwd;
private $env;
private $stdin;
private $timeout;
private $options;
private $inheritEnv;

public function __construct(array $arguments = array())
{
$this-&gt;arguments = $arguments;

$this-&gt;timeout = 60;
$this-&gt;options = array();
$this-&gt;env = array();
$this-&gt;inheritEnv = true;
}

public static function create(array $arguments = array())
{
return new static($arguments);
}






public function add($argument)
{
$this-&gt;arguments[] = $argument;

return $this;
}

public function setWorkingDirectory($cwd)
{
$this-&gt;cwd = $cwd;

return $this;
}

public function inheritEnvironmentVariables($inheritEnv = true)
{
$this-&gt;inheritEnv = $inheritEnv;

return $this;
}

public function setEnv($name, $value)
{
$this-&gt;env[$name] = $value;

return $this;
}

public function setInput($stdin)
{
$this-&gt;stdin = $stdin;

return $this;
}








public function setTimeout($timeout)
{
if (null === $timeout) {
$this-&gt;timeout = null;

return $this;
}

$timeout = (integer) $timeout;

if ($timeout &lt; 0) {
throw new \InvalidArgumentException('The timeout value must be a valid positive integer.');
}

$this-&gt;timeout = $timeout;

return $this;
}

public function setOption($name, $value)
{
$this-&gt;options[$name] = $value;

return $this;
}

public function getProcess()
{
if (!count($this-&gt;arguments)) {
throw new \LogicException('You must add() command arguments before calling getProcess().');
}

$options = $this-&gt;options;

$script = implode(' ', array_map('escapeshellarg', $this-&gt;arguments));

if ($this-&gt;inheritEnv) {
$env = $this-&gt;env ? $this-&gt;env + $_ENV : null;
} else {
$env = $this-&gt;env;
}

return new Process($script, $this-&gt;cwd, $env, $this-&gt;stdin, $this-&gt;timeout, $options);
}
}
&lt;?php










namespace Symfony\Component\Process\Exception;






interface ExceptionInterface
{
}
&lt;?php










namespace Symfony\Component\Process\Exception;






class RuntimeException extends \RuntimeException implements ExceptionInterface
{
}
&lt;?php










namespace Symfony\Component\Process\Exception;

use Symfony\Component\Process\Process;






class ProcessFailedException extends RuntimeException
{
private $process;

public function __construct(Process $process)
{
if ($process-&gt;isSuccessful()) {
throw new \InvalidArgumentException('Expected a failed process, but the given process was successful.');
}

parent::__construct(
sprintf(
'The command "%s" failed.'."\n\nOutput:\n================\n".$process-&gt;getOutput()."\n\nError Output:\n================\n".$process-&gt;getErrorOutput(),
$process-&gt;getCommandLine()
)
);

$this-&gt;process = $process;
}

public function getProcess()
{
return $this-&gt;process;
}
}
&lt;?php










namespace Symfony\Component\Process;







class PhpExecutableFinder
{
private $executableFinder;

public function __construct()
{
$this-&gt;executableFinder = new ExecutableFinder();
}






public function find()
{

 if (defined('PHP_BINARY') &amp;&amp; PHP_BINARY &amp;&amp; ('cli' === PHP_SAPI)) {
return PHP_BINARY;
}

if ($php = getenv('PHP_PATH')) {
if (!is_executable($php)) {
return false;
}

return $php;
}

if ($php = getenv('PHP_PEAR_PHP_BIN')) {
if (is_executable($php)) {
return $php;
}
}

$dirs = array(PHP_BINDIR);
if (defined('PHP_WINDOWS_VERSION_BUILD')) {
$dirs[] = 'C:\xampp\php\\';
}

return $this-&gt;executableFinder-&gt;find('php', false, $dirs);
}
}
&lt;?php










namespace Symfony\Component\Console\Command;

use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Output\Output;
use Symfony\Component\Console\Command\Command;






class HelpCommand extends Command
{
private $command;




protected function configure()
{
$this-&gt;ignoreValidationErrors();

$this
-&gt;setName('help')
-&gt;setDefinition(array(
new InputArgument('command_name', InputArgument::OPTIONAL, 'The command name', 'help'),
new InputOption('xml', null, InputOption::VALUE_NONE, 'To output help as XML'),
))
-&gt;setDescription('Displays help for a command')
-&gt;setHelp(&lt;&lt;&lt;EOF
The &lt;info&gt;%command.name%&lt;/info&gt; command displays help for a given command:

  &lt;info&gt;php %command.full_name% list&lt;/info&gt;

You can also output the help as XML by using the &lt;comment&gt;--xml&lt;/comment&gt; option:

  &lt;info&gt;php %command.full_name% --xml list&lt;/info&gt;
EOF
)
;
}






public function setCommand(Command $command)
{
$this-&gt;command = $command;
}




protected function execute(InputInterface $input, OutputInterface $output)
{
if (null === $this-&gt;command) {
$this-&gt;command = $this-&gt;getApplication()-&gt;get($input-&gt;getArgument('command_name'));
}

if ($input-&gt;getOption('xml')) {
$output-&gt;writeln($this-&gt;command-&gt;asXml(), OutputInterface::OUTPUT_RAW);
} else {
$output-&gt;writeln($this-&gt;command-&gt;asText());
}

$this-&gt;command = null;
}
}
&lt;?php










namespace Symfony\Component\Console\Command;

use Symfony\Component\Console\Input\InputDefinition;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Helper\HelperSet;








class Command
{
private $application;
private $name;
private $aliases;
private $definition;
private $help;
private $description;
private $ignoreValidationErrors;
private $applicationDefinitionMerged;
private $code;
private $synopsis;
private $helperSet;










public function __construct($name = null)
{
$this-&gt;definition = new InputDefinition();
$this-&gt;ignoreValidationErrors = false;
$this-&gt;applicationDefinitionMerged = false;
$this-&gt;aliases = array();

if (null !== $name) {
$this-&gt;setName($name);
}

$this-&gt;configure();

if (!$this-&gt;name) {
throw new \LogicException('The command name cannot be empty.');
}
}






public function ignoreValidationErrors()
{
$this-&gt;ignoreValidationErrors = true;
}








public function setApplication(Application $application = null)
{
$this-&gt;application = $application;
if ($application) {
$this-&gt;setHelperSet($application-&gt;getHelperSet());
} else {
$this-&gt;helperSet = null;
}
}






public function setHelperSet(HelperSet $helperSet)
{
$this-&gt;helperSet = $helperSet;
}






public function getHelperSet()
{
return $this-&gt;helperSet;
}








public function getApplication()
{
return $this-&gt;application;
}









public function isEnabled()
{
return true;
}




protected function configure()
{
}

















protected function execute(InputInterface $input, OutputInterface $output)
{
throw new \LogicException('You must override the execute() method in the concrete command class.');
}







protected function interact(InputInterface $input, OutputInterface $output)
{
}










protected function initialize(InputInterface $input, OutputInterface $output)
{
}


















public function run(InputInterface $input, OutputInterface $output)
{

 $this-&gt;getSynopsis();


 $this-&gt;mergeApplicationDefinition();


 try {
$input-&gt;bind($this-&gt;definition);
} catch (\Exception $e) {
if (!$this-&gt;ignoreValidationErrors) {
throw $e;
}
}

$this-&gt;initialize($input, $output);

if ($input-&gt;isInteractive()) {
$this-&gt;interact($input, $output);
}

$input-&gt;validate();

if ($this-&gt;code) {
return call_user_func($this-&gt;code, $input, $output);
}

return $this-&gt;execute($input, $output);
}















public function setCode(\Closure $code)
{
$this-&gt;code = $code;

return $this;
}




private function mergeApplicationDefinition()
{
if (null === $this-&gt;application || true === $this-&gt;applicationDefinitionMerged) {
return;
}

$currentArguments = $this-&gt;definition-&gt;getArguments();
$this-&gt;definition-&gt;setArguments($this-&gt;application-&gt;getDefinition()-&gt;getArguments());
$this-&gt;definition-&gt;addArguments($currentArguments);

$this-&gt;definition-&gt;addOptions($this-&gt;application-&gt;getDefinition()-&gt;getOptions());

$this-&gt;applicationDefinitionMerged = true;
}










public function setDefinition($definition)
{
if ($definition instanceof InputDefinition) {
$this-&gt;definition = $definition;
} else {
$this-&gt;definition-&gt;setDefinition($definition);
}

$this-&gt;applicationDefinitionMerged = false;

return $this;
}








public function getDefinition()
{
return $this-&gt;definition;
}









protected function getNativeDefinition()
{
return $this-&gt;getDefinition();
}













public function addArgument($name, $mode = null, $description = '', $default = null)
{
$this-&gt;definition-&gt;addArgument(new InputArgument($name, $mode, $description, $default));

return $this;
}














public function addOption($name, $shortcut = null, $mode = null, $description = '', $default = null)
{
$this-&gt;definition-&gt;addOption(new InputOption($name, $shortcut, $mode, $description, $default));

return $this;
}

















public function setName($name)
{
$this-&gt;validateName($name);

$this-&gt;name = $name;

return $this;
}








public function getName()
{
return $this-&gt;name;
}










public function setDescription($description)
{
$this-&gt;description = $description;

return $this;
}








public function getDescription()
{
return $this-&gt;description;
}










public function setHelp($help)
{
$this-&gt;help = $help;

return $this;
}








public function getHelp()
{
return $this-&gt;help;
}







public function getProcessedHelp()
{
$name = $this-&gt;name;

$placeholders = array(
'%command.name%',
'%command.full_name%'
);
$replacements = array(
$name,
$_SERVER['PHP_SELF'].' '.$name
);

return str_replace($placeholders, $replacements, $this-&gt;getHelp());
}










public function setAliases($aliases)
{
foreach ($aliases as $alias) {
$this-&gt;validateName($alias);
}

$this-&gt;aliases = $aliases;

return $this;
}








public function getAliases()
{
return $this-&gt;aliases;
}






public function getSynopsis()
{
if (null === $this-&gt;synopsis) {
$this-&gt;synopsis = trim(sprintf('%s %s', $this-&gt;name, $this-&gt;definition-&gt;getSynopsis()));
}

return $this-&gt;synopsis;
}












public function getHelper($name)
{
return $this-&gt;helperSet-&gt;get($name);
}






public function asText()
{
$messages = array(
'&lt;comment&gt;Usage:&lt;/comment&gt;',
' '.$this-&gt;getSynopsis(),
'',
);

if ($this-&gt;getAliases()) {
$messages[] = '&lt;comment&gt;Aliases:&lt;/comment&gt; &lt;info&gt;'.implode(', ', $this-&gt;getAliases()).'&lt;/info&gt;';
}

$messages[] = $this-&gt;getNativeDefinition()-&gt;asText();

if ($help = $this-&gt;getProcessedHelp()) {
$messages[] = '&lt;comment&gt;Help:&lt;/comment&gt;';
$messages[] = ' '.str_replace("\n", "\n ", $help)."\n";
}

return implode("\n", $messages);
}








public function asXml($asDom = false)
{
$dom = new \DOMDocument('1.0', 'UTF-8');
$dom-&gt;formatOutput = true;
$dom-&gt;appendChild($commandXML = $dom-&gt;createElement('command'));
$commandXML-&gt;setAttribute('id', $this-&gt;name);
$commandXML-&gt;setAttribute('name', $this-&gt;name);

$commandXML-&gt;appendChild($usageXML = $dom-&gt;createElement('usage'));
$usageXML-&gt;appendChild($dom-&gt;createTextNode(sprintf($this-&gt;getSynopsis(), '')));

$commandXML-&gt;appendChild($descriptionXML = $dom-&gt;createElement('description'));
$descriptionXML-&gt;appendChild($dom-&gt;createTextNode(str_replace("\n", "\n ", $this-&gt;getDescription())));

$commandXML-&gt;appendChild($helpXML = $dom-&gt;createElement('help'));
$helpXML-&gt;appendChild($dom-&gt;createTextNode(str_replace("\n", "\n ", $this-&gt;getProcessedHelp())));

$commandXML-&gt;appendChild($aliasesXML = $dom-&gt;createElement('aliases'));
foreach ($this-&gt;getAliases() as $alias) {
$aliasesXML-&gt;appendChild($aliasXML = $dom-&gt;createElement('alias'));
$aliasXML-&gt;appendChild($dom-&gt;createTextNode($alias));
}

$definition = $this-&gt;getNativeDefinition()-&gt;asXml(true);
$commandXML-&gt;appendChild($dom-&gt;importNode($definition-&gt;getElementsByTagName('arguments')-&gt;item(0), true));
$commandXML-&gt;appendChild($dom-&gt;importNode($definition-&gt;getElementsByTagName('options')-&gt;item(0), true));

return $asDom ? $dom : $dom-&gt;saveXml();
}

private function validateName($name)
{
if (!preg_match('/^[^\:]+(\:[^\:]+)*$/', $name)) {
throw new \InvalidArgumentException(sprintf('Command name "%s" is invalid.', $name));
}
}
}
&lt;?php










namespace Symfony\Component\Console\Command;

use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Output\Output;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputDefinition;






class ListCommand extends Command
{



protected function configure()
{
$this
-&gt;setName('list')
-&gt;setDefinition($this-&gt;createDefinition())
-&gt;setDescription('Lists commands')
-&gt;setHelp(&lt;&lt;&lt;EOF
The &lt;info&gt;%command.name%&lt;/info&gt; command lists all commands:

  &lt;info&gt;php %command.full_name%&lt;/info&gt;

You can also display the commands for a specific namespace:

  &lt;info&gt;php %command.full_name% test&lt;/info&gt;

You can also output the information as XML by using the &lt;comment&gt;--xml&lt;/comment&gt; option:

  &lt;info&gt;php %command.full_name% --xml&lt;/info&gt;

It's also possible to get raw list of commands (useful for embedding command runner):

  &lt;info&gt;php %command.full_name% --raw&lt;/info&gt;
EOF
)
;
}




protected function getNativeDefinition()
{
return $this-&gt;createDefinition();
}




protected function execute(InputInterface $input, OutputInterface $output)
{
if ($input-&gt;getOption('xml')) {
$output-&gt;writeln($this-&gt;getApplication()-&gt;asXml($input-&gt;getArgument('namespace')), OutputInterface::OUTPUT_RAW);
} else {
$output-&gt;writeln($this-&gt;getApplication()-&gt;asText($input-&gt;getArgument('namespace'), $input-&gt;getOption('raw')));
}
}

private function createDefinition()
{
return new InputDefinition(array(
new InputArgument('namespace', InputArgument::OPTIONAL, 'The namespace name'),
new InputOption('xml', null, InputOption::VALUE_NONE, 'To output help as XML'),
new InputOption('raw', null, InputOption::VALUE_NONE, 'To output raw command list'),
));
}
}
&lt;?php










namespace Symfony\Component\Console\Tester;

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Output\StreamOutput;






class ApplicationTester
{
private $application;
private $input;
private $output;






public function __construct(Application $application)
{
$this-&gt;application = $application;
}















public function run(array $input, $options = array())
{
$this-&gt;input = new ArrayInput($input);
if (isset($options['interactive'])) {
$this-&gt;input-&gt;setInteractive($options['interactive']);
}

$this-&gt;output = new StreamOutput(fopen('php://memory', 'w', false));
if (isset($options['decorated'])) {
$this-&gt;output-&gt;setDecorated($options['decorated']);
}
if (isset($options['verbosity'])) {
$this-&gt;output-&gt;setVerbosity($options['verbosity']);
}

return $this-&gt;application-&gt;run($this-&gt;input, $this-&gt;output);
}






public function getDisplay()
{
rewind($this-&gt;output-&gt;getStream());

return stream_get_contents($this-&gt;output-&gt;getStream());
}






public function getInput()
{
return $this-&gt;input;
}






public function getOutput()
{
return $this-&gt;output;
}
}
&lt;?php










namespace Symfony\Component\Console\Tester;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Output\StreamOutput;






class CommandTester
{
private $command;
private $input;
private $output;






public function __construct(Command $command)
{
$this-&gt;command = $command;
}















public function execute(array $input, array $options = array())
{
$this-&gt;input = new ArrayInput($input);
if (isset($options['interactive'])) {
$this-&gt;input-&gt;setInteractive($options['interactive']);
}

$this-&gt;output = new StreamOutput(fopen('php://memory', 'w', false));
if (isset($options['decorated'])) {
$this-&gt;output-&gt;setDecorated($options['decorated']);
}
if (isset($options['verbosity'])) {
$this-&gt;output-&gt;setVerbosity($options['verbosity']);
}

return $this-&gt;command-&gt;run($this-&gt;input, $this-&gt;output);
}






public function getDisplay()
{
rewind($this-&gt;output-&gt;getStream());

return stream_get_contents($this-&gt;output-&gt;getStream());
}






public function getInput()
{
return $this-&gt;input;
}






public function getOutput()
{
return $this-&gt;output;
}
}
&lt;?php










namespace Symfony\Component\Console\Formatter;




class OutputFormatterStyleStack
{



private $styles;




private $emptyStyle;






public function __construct(OutputFormatterStyleInterface $emptyStyle = null)
{
$this-&gt;emptyStyle = $emptyStyle ?: new OutputFormatterStyle();
$this-&gt;reset();
}




public function reset()
{
$this-&gt;styles = array();
}






public function push(OutputFormatterStyleInterface $style)
{
$this-&gt;styles[] = $style;
}










public function pop(OutputFormatterStyleInterface $style = null)
{
if (empty($this-&gt;styles)) {
return $this-&gt;emptyStyle;
}

if (null === $style) {
return array_pop($this-&gt;styles);
}

foreach (array_reverse($this-&gt;styles, true) as $index =&gt; $stackedStyle) {
if ($style-&gt;apply('') === $stackedStyle-&gt;apply('')) {
$this-&gt;styles = array_slice($this-&gt;styles, 0, $index);

return $stackedStyle;
}
}

throw new \InvalidArgumentException('Incorrectly nested style tag found.');
}






public function getCurrent()
{
if (empty($this-&gt;styles)) {
return $this-&gt;emptyStyle;
}

return $this-&gt;styles[count($this-&gt;styles)-1];
}






public function setEmptyStyle(OutputFormatterStyleInterface $emptyStyle)
{
$this-&gt;emptyStyle = $emptyStyle;

return $this;
}




public function getEmptyStyle()
{
return $this-&gt;emptyStyle;
}
}
&lt;?php










namespace Symfony\Component\Console\Formatter;








class OutputFormatterStyle implements OutputFormatterStyleInterface
{
private static $availableForegroundColors = array(
'black' =&gt; 30,
'red' =&gt; 31,
'green' =&gt; 32,
'yellow' =&gt; 33,
'blue' =&gt; 34,
'magenta' =&gt; 35,
'cyan' =&gt; 36,
'white' =&gt; 37
);
private static $availableBackgroundColors = array(
'black' =&gt; 40,
'red' =&gt; 41,
'green' =&gt; 42,
'yellow' =&gt; 43,
'blue' =&gt; 44,
'magenta' =&gt; 45,
'cyan' =&gt; 46,
'white' =&gt; 47
);
private static $availableOptions = array(
'bold' =&gt; 1,
'underscore' =&gt; 4,
'blink' =&gt; 5,
'reverse' =&gt; 7,
'conceal' =&gt; 8
);

private $foreground;
private $background;
private $options = array();










public function __construct($foreground = null, $background = null, array $options = array())
{
if (null !== $foreground) {
$this-&gt;setForeground($foreground);
}
if (null !== $background) {
$this-&gt;setBackground($background);
}
if (count($options)) {
$this-&gt;setOptions($options);
}
}










public function setForeground($color = null)
{
if (null === $color) {
$this-&gt;foreground = null;

return;
}

if (!isset(static::$availableForegroundColors[$color])) {
throw new \InvalidArgumentException(sprintf(
'Invalid foreground color specified: "%s". Expected one of (%s)',
$color,
implode(', ', array_keys(static::$availableForegroundColors))
));
}

$this-&gt;foreground = static::$availableForegroundColors[$color];
}










public function setBackground($color = null)
{
if (null === $color) {
$this-&gt;background = null;

return;
}

if (!isset(static::$availableBackgroundColors[$color])) {
throw new \InvalidArgumentException(sprintf(
'Invalid background color specified: "%s". Expected one of (%s)',
$color,
implode(', ', array_keys(static::$availableBackgroundColors))
));
}

$this-&gt;background = static::$availableBackgroundColors[$color];
}










public function setOption($option)
{
if (!isset(static::$availableOptions[$option])) {
throw new \InvalidArgumentException(sprintf(
'Invalid option specified: "%s". Expected one of (%s)',
$option,
implode(', ', array_keys(static::$availableOptions))
));
}

if (false === array_search(static::$availableOptions[$option], $this-&gt;options)) {
$this-&gt;options[] = static::$availableOptions[$option];
}
}









public function unsetOption($option)
{
if (!isset(static::$availableOptions[$option])) {
throw new \InvalidArgumentException(sprintf(
'Invalid option specified: "%s". Expected one of (%s)',
$option,
implode(', ', array_keys(static::$availableOptions))
));
}

$pos = array_search(static::$availableOptions[$option], $this-&gt;options);
if (false !== $pos) {
unset($this-&gt;options[$pos]);
}
}






public function setOptions(array $options)
{
$this-&gt;options = array();

foreach ($options as $option) {
$this-&gt;setOption($option);
}
}








public function apply($text)
{
$codes = array();

if (null !== $this-&gt;foreground) {
$codes[] = $this-&gt;foreground;
}
if (null !== $this-&gt;background) {
$codes[] = $this-&gt;background;
}
if (count($this-&gt;options)) {
$codes = array_merge($codes, $this-&gt;options);
}

return sprintf("\033[%sm%s\033[0m", implode(';', $codes), $text);
}
}
&lt;?php










namespace Symfony\Component\Console\Formatter;








interface OutputFormatterStyleInterface
{







public function setForeground($color = null);








public function setBackground($color = null);








public function setOption($option);






public function unsetOption($option);






public function setOptions(array $options);








public function apply($text);
}
&lt;?php










namespace Symfony\Component\Console\Formatter;








class OutputFormatter implements OutputFormatterInterface
{



const FORMAT_PATTERN = '#(\\\\?)&lt;(/?)([a-z][a-z0-9_=;-]+)?&gt;((?:(?!\\\\?&lt;).)*)#is';

private $decorated;
private $styles = array();
private $styleStack;








public static function escape($text)
{
return preg_replace('/([^\\\\]?)&lt;/is', '$1\\&lt;', $text);
}









public function __construct($decorated = null, array $styles = array())
{
$this-&gt;decorated = (Boolean) $decorated;

$this-&gt;setStyle('error', new OutputFormatterStyle('white', 'red'));
$this-&gt;setStyle('info', new OutputFormatterStyle('green'));
$this-&gt;setStyle('comment', new OutputFormatterStyle('yellow'));
$this-&gt;setStyle('question', new OutputFormatterStyle('black', 'cyan'));

foreach ($styles as $name =&gt; $style) {
$this-&gt;setStyle($name, $style);
}

$this-&gt;styleStack = new OutputFormatterStyleStack();
}








public function setDecorated($decorated)
{
$this-&gt;decorated = (Boolean) $decorated;
}








public function isDecorated()
{
return $this-&gt;decorated;
}









public function setStyle($name, OutputFormatterStyleInterface $style)
{
$this-&gt;styles[strtolower($name)] = $style;
}










public function hasStyle($name)
{
return isset($this-&gt;styles[strtolower($name)]);
}












public function getStyle($name)
{
if (!$this-&gt;hasStyle($name)) {
throw new \InvalidArgumentException('Undefined style: '.$name);
}

return $this-&gt;styles[strtolower($name)];
}










public function format($message)
{
$message = preg_replace_callback(self::FORMAT_PATTERN, array($this, 'replaceStyle'), $message);

return str_replace('\\&lt;', '&lt;', $message);
}




public function getStyleStack()
{
return $this-&gt;styleStack;
}








private function replaceStyle($match)
{

 if ('\\' === $match[1]) {
return $match[0];
}

if ('' === $match[3]) {
if ('/' === $match[2]) {

 $this-&gt;styleStack-&gt;pop();

return $this-&gt;applyStyle($this-&gt;styleStack-&gt;getCurrent(), $match[4]);
}


 return '&lt;&gt;'.$match[4];
}

if (isset($this-&gt;styles[strtolower($match[3])])) {
$style = $this-&gt;styles[strtolower($match[3])];
} else {
$style = $this-&gt;createStyleFromString($match[3]);

if (false === $style) {
return $match[0];
}
}

if ('/' === $match[2]) {
$this-&gt;styleStack-&gt;pop($style);
} else {
$this-&gt;styleStack-&gt;push($style);
}

return $this-&gt;applyStyle($this-&gt;styleStack-&gt;getCurrent(), $match[4]);
}








private function createStyleFromString($string)
{
if (!preg_match_all('/([^=]+)=([^;]+)(;|$)/', strtolower($string), $matches, PREG_SET_ORDER)) {
return false;
}

$style = new OutputFormatterStyle();
foreach ($matches as $match) {
array_shift($match);

if ('fg' == $match[0]) {
$style-&gt;setForeground($match[1]);
} elseif ('bg' == $match[0]) {
$style-&gt;setBackground($match[1]);
} else {
$style-&gt;setOption($match[1]);
}
}

return $style;
}









private function applyStyle(OutputFormatterStyleInterface $style, $text)
{
return $this-&gt;isDecorated() &amp;&amp; strlen($text) &gt; 0 ? $style-&gt;apply($text) : $text;
}
}
&lt;?php










namespace Symfony\Component\Console\Formatter;








interface OutputFormatterInterface
{







public function setDecorated($decorated);








public function isDecorated();









public function setStyle($name, OutputFormatterStyleInterface $style);










public function hasStyle($name);










public function getStyle($name);










public function format($message);
}
&lt;?php










namespace Symfony\Component\Console;

use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Input\InputDefinition;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Output\Output;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Output\ConsoleOutputInterface;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Command\HelpCommand;
use Symfony\Component\Console\Command\ListCommand;
use Symfony\Component\Console\Helper\HelperSet;
use Symfony\Component\Console\Helper\FormatterHelper;
use Symfony\Component\Console\Helper\DialogHelper;


















class Application
{
private $commands;
private $wantHelps = false;
private $runningCommand;
private $name;
private $version;
private $catchExceptions;
private $autoExit;
private $definition;
private $helperSet;









public function __construct($name = 'UNKNOWN', $version = 'UNKNOWN')
{
$this-&gt;name = $name;
$this-&gt;version = $version;
$this-&gt;catchExceptions = true;
$this-&gt;autoExit = true;
$this-&gt;commands = array();
$this-&gt;helperSet = $this-&gt;getDefaultHelperSet();
$this-&gt;definition = $this-&gt;getDefaultInputDefinition();

foreach ($this-&gt;getDefaultCommands() as $command) {
$this-&gt;add($command);
}
}













public function run(InputInterface $input = null, OutputInterface $output = null)
{
if (null === $input) {
$input = new ArgvInput();
}

if (null === $output) {
$output = new ConsoleOutput();
}

try {
$statusCode = $this-&gt;doRun($input, $output);
} catch (\Exception $e) {
if (!$this-&gt;catchExceptions) {
throw $e;
}

if ($output instanceof ConsoleOutputInterface) {
$this-&gt;renderException($e, $output-&gt;getErrorOutput());
} else {
$this-&gt;renderException($e, $output);
}
$statusCode = $e-&gt;getCode();

$statusCode = is_numeric($statusCode) &amp;&amp; $statusCode ? $statusCode : 1;
}

if ($this-&gt;autoExit) {
if ($statusCode &gt; 255) {
$statusCode = 255;
}

 exit($statusCode);

 }

return $statusCode;
}









public function doRun(InputInterface $input, OutputInterface $output)
{
$name = $this-&gt;getCommandName($input);

if (true === $input-&gt;hasParameterOption(array('--ansi'))) {
$output-&gt;setDecorated(true);
} elseif (true === $input-&gt;hasParameterOption(array('--no-ansi'))) {
$output-&gt;setDecorated(false);
}

if (true === $input-&gt;hasParameterOption(array('--help', '-h'))) {
if (!$name) {
$name = 'help';
$input = new ArrayInput(array('command' =&gt; 'help'));
} else {
$this-&gt;wantHelps = true;
}
}

if (true === $input-&gt;hasParameterOption(array('--no-interaction', '-n'))) {
$input-&gt;setInteractive(false);
}

if (function_exists('posix_isatty') &amp;&amp; $this-&gt;getHelperSet()-&gt;has('dialog')) {
$inputStream = $this-&gt;getHelperSet()-&gt;get('dialog')-&gt;getInputStream();
if (!posix_isatty($inputStream)) {
$input-&gt;setInteractive(false);
}
}

if (true === $input-&gt;hasParameterOption(array('--quiet', '-q'))) {
$output-&gt;setVerbosity(OutputInterface::VERBOSITY_QUIET);
} elseif (true === $input-&gt;hasParameterOption(array('--verbose', '-v'))) {
$output-&gt;setVerbosity(OutputInterface::VERBOSITY_VERBOSE);
}

if (true === $input-&gt;hasParameterOption(array('--version', '-V'))) {
$output-&gt;writeln($this-&gt;getLongVersion());

return 0;
}

if (!$name) {
$name = 'list';
$input = new ArrayInput(array('command' =&gt; 'list'));
}


 $command = $this-&gt;find($name);

$this-&gt;runningCommand = $command;
$statusCode = $command-&gt;run($input, $output);
$this-&gt;runningCommand = null;

return is_numeric($statusCode) ? $statusCode : 0;
}








public function setHelperSet(HelperSet $helperSet)
{
$this-&gt;helperSet = $helperSet;
}








public function getHelperSet()
{
return $this-&gt;helperSet;
}






public function getDefinition()
{
return $this-&gt;definition;
}






public function getHelp()
{
$messages = array(
$this-&gt;getLongVersion(),
'',
'&lt;comment&gt;Usage:&lt;/comment&gt;',
sprintf("  [options] command [arguments]\n"),
'&lt;comment&gt;Options:&lt;/comment&gt;',
);

foreach ($this-&gt;getDefinition()-&gt;getOptions() as $option) {
$messages[] = sprintf('  %-29s %s %s',
'&lt;info&gt;--'.$option-&gt;getName().'&lt;/info&gt;',
$option-&gt;getShortcut() ? '&lt;info&gt;-'.$option-&gt;getShortcut().'&lt;/info&gt;' : '  ',
$option-&gt;getDescription()
);
}

return implode(PHP_EOL, $messages);
}








public function setCatchExceptions($boolean)
{
$this-&gt;catchExceptions = (Boolean) $boolean;
}








public function setAutoExit($boolean)
{
$this-&gt;autoExit = (Boolean) $boolean;
}








public function getName()
{
return $this-&gt;name;
}








public function setName($name)
{
$this-&gt;name = $name;
}








public function getVersion()
{
return $this-&gt;version;
}








public function setVersion($version)
{
$this-&gt;version = $version;
}








public function getLongVersion()
{
if ('UNKNOWN' !== $this-&gt;getName() &amp;&amp; 'UNKNOWN' !== $this-&gt;getVersion()) {
return sprintf('&lt;info&gt;%s&lt;/info&gt; version &lt;comment&gt;%s&lt;/comment&gt;', $this-&gt;getName(), $this-&gt;getVersion());
}

return '&lt;info&gt;Console Tool&lt;/info&gt;';
}










public function register($name)
{
return $this-&gt;add(new Command($name));
}








public function addCommands(array $commands)
{
foreach ($commands as $command) {
$this-&gt;add($command);
}
}












public function add(Command $command)
{
$command-&gt;setApplication($this);

if (!$command-&gt;isEnabled()) {
$command-&gt;setApplication(null);

return;
}

$this-&gt;commands[$command-&gt;getName()] = $command;

foreach ($command-&gt;getAliases() as $alias) {
$this-&gt;commands[$alias] = $command;
}

return $command;
}












public function get($name)
{
if (!isset($this-&gt;commands[$name])) {
throw new \InvalidArgumentException(sprintf('The command "%s" does not exist.', $name));
}

$command = $this-&gt;commands[$name];

if ($this-&gt;wantHelps) {
$this-&gt;wantHelps = false;

$helpCommand = $this-&gt;get('help');
$helpCommand-&gt;setCommand($command);

return $helpCommand;
}

return $command;
}










public function has($name)
{
return isset($this-&gt;commands[$name]);
}








public function getNamespaces()
{
$namespaces = array();
foreach ($this-&gt;commands as $command) {
$namespaces[] = $this-&gt;extractNamespace($command-&gt;getName());

foreach ($command-&gt;getAliases() as $alias) {
$namespaces[] = $this-&gt;extractNamespace($alias);
}
}

return array_values(array_unique(array_filter($namespaces)));
}










public function findNamespace($namespace)
{
$allNamespaces = array();
foreach ($this-&gt;getNamespaces() as $n) {
$allNamespaces[$n] = explode(':', $n);
}

$found = array();
foreach (explode(':', $namespace) as $i =&gt; $part) {
$abbrevs = static::getAbbreviations(array_unique(array_values(array_filter(array_map(function ($p) use ($i) { return isset($p[$i]) ? $p[$i] : ''; }, $allNamespaces)))));

if (!isset($abbrevs[$part])) {
$message = sprintf('There are no commands defined in the "%s" namespace.', $namespace);

if (1 &lt;= $i) {
$part = implode(':', $found).':'.$part;
}

if ($alternatives = $this-&gt;findAlternativeNamespace($part, $abbrevs)) {
$message .= "\n\nDid you mean one of these?\n    ";
$message .= implode("\n    ", $alternatives);
}

throw new \InvalidArgumentException($message);
}

if (count($abbrevs[$part]) &gt; 1) {
throw new \InvalidArgumentException(sprintf('The namespace "%s" is ambiguous (%s).', $namespace, $this-&gt;getAbbreviationSuggestions($abbrevs[$part])));
}

$found[] = $abbrevs[$part][0];
}

return implode(':', $found);
}















public function find($name)
{

 $namespace = '';
$searchName = $name;
if (false !== $pos = strrpos($name, ':')) {
$namespace = $this-&gt;findNamespace(substr($name, 0, $pos));
$searchName = $namespace.substr($name, $pos);
}


 $commands = array();
foreach ($this-&gt;commands as $command) {
if ($this-&gt;extractNamespace($command-&gt;getName()) == $namespace) {
$commands[] = $command-&gt;getName();
}
}

$abbrevs = static::getAbbreviations(array_unique($commands));
if (isset($abbrevs[$searchName]) &amp;&amp; 1 == count($abbrevs[$searchName])) {
return $this-&gt;get($abbrevs[$searchName][0]);
}

if (isset($abbrevs[$searchName]) &amp;&amp; count($abbrevs[$searchName]) &gt; 1) {
$suggestions = $this-&gt;getAbbreviationSuggestions($abbrevs[$searchName]);

throw new \InvalidArgumentException(sprintf('Command "%s" is ambiguous (%s).', $name, $suggestions));
}


 $aliases = array();
foreach ($this-&gt;commands as $command) {
foreach ($command-&gt;getAliases() as $alias) {
if ($this-&gt;extractNamespace($alias) == $namespace) {
$aliases[] = $alias;
}
}
}

$aliases = static::getAbbreviations(array_unique($aliases));
if (!isset($aliases[$searchName])) {
$message = sprintf('Command "%s" is not defined.', $name);

if ($alternatives = $this-&gt;findAlternativeCommands($searchName, $abbrevs)) {
$message .= "\n\nDid you mean one of these?\n    ";
$message .= implode("\n    ", $alternatives);
}

throw new \InvalidArgumentException($message);
}

if (count($aliases[$searchName]) &gt; 1) {
throw new \InvalidArgumentException(sprintf('Command "%s" is ambiguous (%s).', $name, $this-&gt;getAbbreviationSuggestions($aliases[$searchName])));
}

return $this-&gt;get($aliases[$searchName][0]);
}












public function all($namespace = null)
{
if (null === $namespace) {
return $this-&gt;commands;
}

$commands = array();
foreach ($this-&gt;commands as $name =&gt; $command) {
if ($namespace === $this-&gt;extractNamespace($name, substr_count($namespace, ':') + 1)) {
$commands[$name] = $command;
}
}

return $commands;
}








public static function getAbbreviations($names)
{
$abbrevs = array();
foreach ($names as $name) {
for ($len = strlen($name) - 1; $len &gt; 0; --$len) {
$abbrev = substr($name, 0, $len);
if (!isset($abbrevs[$abbrev])) {
$abbrevs[$abbrev] = array($name);
} else {
$abbrevs[$abbrev][] = $name;
}
}
}


 foreach ($names as $name) {
$abbrevs[$name] = array($name);
}

return $abbrevs;
}









public function asText($namespace = null, $raw = false)
{
$commands = $namespace ? $this-&gt;all($this-&gt;findNamespace($namespace)) : $this-&gt;commands;

$width = 0;
foreach ($commands as $command) {
$width = strlen($command-&gt;getName()) &gt; $width ? strlen($command-&gt;getName()) : $width;
}
$width += 2;

if ($raw) {
$messages = array();
foreach ($this-&gt;sortCommands($commands) as $space =&gt; $commands) {
foreach ($commands as $name =&gt; $command) {
$messages[] = sprintf("%-${width}s %s", $name, $command-&gt;getDescription());
}
}

return implode(PHP_EOL, $messages);
}

$messages = array($this-&gt;getHelp(), '');
if ($namespace) {
$messages[] = sprintf("&lt;comment&gt;Available commands for the \"%s\" namespace:&lt;/comment&gt;", $namespace);
} else {
$messages[] = '&lt;comment&gt;Available commands:&lt;/comment&gt;';
}


 foreach ($this-&gt;sortCommands($commands) as $space =&gt; $commands) {
if (!$namespace &amp;&amp; '_global' !== $space) {
$messages[] = '&lt;comment&gt;'.$space.'&lt;/comment&gt;';
}

foreach ($commands as $name =&gt; $command) {
$messages[] = sprintf("  &lt;info&gt;%-${width}s&lt;/info&gt; %s", $name, $command-&gt;getDescription());
}
}

return implode(PHP_EOL, $messages);
}









public function asXml($namespace = null, $asDom = false)
{
$commands = $namespace ? $this-&gt;all($this-&gt;findNamespace($namespace)) : $this-&gt;commands;

$dom = new \DOMDocument('1.0', 'UTF-8');
$dom-&gt;formatOutput = true;
$dom-&gt;appendChild($xml = $dom-&gt;createElement('symfony'));

$xml-&gt;appendChild($commandsXML = $dom-&gt;createElement('commands'));

if ($namespace) {
$commandsXML-&gt;setAttribute('namespace', $namespace);
} else {
$namespacesXML = $dom-&gt;createElement('namespaces');
$xml-&gt;appendChild($namespacesXML);
}


 foreach ($this-&gt;sortCommands($commands) as $space =&gt; $commands) {
if (!$namespace) {
$namespaceArrayXML = $dom-&gt;createElement('namespace');
$namespacesXML-&gt;appendChild($namespaceArrayXML);
$namespaceArrayXML-&gt;setAttribute('id', $space);
}

foreach ($commands as $name =&gt; $command) {
if ($name !== $command-&gt;getName()) {
continue;
}

if (!$namespace) {
$commandXML = $dom-&gt;createElement('command');
$namespaceArrayXML-&gt;appendChild($commandXML);
$commandXML-&gt;appendChild($dom-&gt;createTextNode($name));
}

$node = $command-&gt;asXml(true)-&gt;getElementsByTagName('command')-&gt;item(0);
$node = $dom-&gt;importNode($node, true);

$commandsXML-&gt;appendChild($node);
}
}

return $asDom ? $dom : $dom-&gt;saveXml();
}







public function renderException($e, $output)
{
$strlen = function ($string) {
if (!function_exists('mb_strlen')) {
return strlen($string);
}

if (false === $encoding = mb_detect_encoding($string)) {
return strlen($string);
}

return mb_strlen($string, $encoding);
};

do {
$title = sprintf('  [%s]  ', get_class($e));
$len = $strlen($title);
$width = $this-&gt;getTerminalWidth() ? $this-&gt;getTerminalWidth() - 1 : PHP_INT_MAX;
$lines = array();
foreach (preg_split("{\r?\n}", $e-&gt;getMessage()) as $line) {
foreach (str_split($line, $width - 4) as $line) {
$lines[] = sprintf('  %s  ', $line);
$len = max($strlen($line) + 4, $len);
}
}

$messages = array(str_repeat(' ', $len), $title.str_repeat(' ', max(0, $len - $strlen($title))));

foreach ($lines as $line) {
$messages[] = $line.str_repeat(' ', $len - $strlen($line));
}

$messages[] = str_repeat(' ', $len);

$output-&gt;writeln("");
$output-&gt;writeln("");
foreach ($messages as $message) {
$output-&gt;writeln('&lt;error&gt;'.$message.'&lt;/error&gt;');
}
$output-&gt;writeln("");
$output-&gt;writeln("");

if (OutputInterface::VERBOSITY_VERBOSE === $output-&gt;getVerbosity()) {
$output-&gt;writeln('&lt;comment&gt;Exception trace:&lt;/comment&gt;');


 $trace = $e-&gt;getTrace();
array_unshift($trace, array(
'function' =&gt; '',
'file' =&gt; $e-&gt;getFile() != null ? $e-&gt;getFile() : 'n/a',
'line' =&gt; $e-&gt;getLine() != null ? $e-&gt;getLine() : 'n/a',
'args' =&gt; array(),
));

for ($i = 0, $count = count($trace); $i &lt; $count; $i++) {
$class = isset($trace[$i]['class']) ? $trace[$i]['class'] : '';
$type = isset($trace[$i]['type']) ? $trace[$i]['type'] : '';
$function = $trace[$i]['function'];
$file = isset($trace[$i]['file']) ? $trace[$i]['file'] : 'n/a';
$line = isset($trace[$i]['line']) ? $trace[$i]['line'] : 'n/a';

$output-&gt;writeln(sprintf(' %s%s%s() at &lt;info&gt;%s:%s&lt;/info&gt;', $class, $type, $function, $file, $line));
}

$output-&gt;writeln("");
$output-&gt;writeln("");
}
} while ($e = $e-&gt;getPrevious());

if (null !== $this-&gt;runningCommand) {
$output-&gt;writeln(sprintf('&lt;info&gt;%s&lt;/info&gt;', sprintf($this-&gt;runningCommand-&gt;getSynopsis(), $this-&gt;getName())));
$output-&gt;writeln("");
$output-&gt;writeln("");
}
}






protected function getTerminalWidth()
{
if (defined('PHP_WINDOWS_VERSION_BUILD')) {
if ($ansicon = getenv('ANSICON')) {
return preg_replace('{^(\d+)x.*$}', '$1', $ansicon);
}

exec('mode CON', $execData);
if (preg_match('{columns:\s*(\d+)}i', $execData[4], $matches)) {
return $matches[1];
}
}

if (preg_match("{rows.(\d+);.columns.(\d+);}i", $this-&gt;getSttyColumns(), $match)) {
return $match[2];
}
}






protected function getTerminalHeight()
{
if (defined('PHP_WINDOWS_VERSION_BUILD')) {
if ($ansicon = getenv('ANSICON')) {
return preg_replace('{^\d+x\d+ \(\d+x(\d+)\)$}', '$1', trim($ansicon));
}

exec('mode CON', $execData);
if (preg_match('{lines:\s*(\d+)}i', $execData[3], $matches)) {
return $matches[1];
}
}

if (preg_match("{rows.(\d+);.columns.(\d+);}i", $this-&gt;getSttyColumns(), $match)) {
return $match[1];
}
}








protected function getCommandName(InputInterface $input)
{
return $input-&gt;getFirstArgument();
}






protected function getDefaultInputDefinition()
{
return new InputDefinition(array(
new InputArgument('command', InputArgument::REQUIRED, 'The command to execute'),

new InputOption('--help', '-h', InputOption::VALUE_NONE, 'Display this help message.'),
new InputOption('--quiet', '-q', InputOption::VALUE_NONE, 'Do not output any message.'),
new InputOption('--verbose', '-v', InputOption::VALUE_NONE, 'Increase verbosity of messages.'),
new InputOption('--version', '-V', InputOption::VALUE_NONE, 'Display this application version.'),
new InputOption('--ansi', '', InputOption::VALUE_NONE, 'Force ANSI output.'),
new InputOption('--no-ansi', '', InputOption::VALUE_NONE, 'Disable ANSI output.'),
new InputOption('--no-interaction', '-n', InputOption::VALUE_NONE, 'Do not ask any interactive question.'),
));
}






protected function getDefaultCommands()
{
return array(new HelpCommand(), new ListCommand());
}






protected function getDefaultHelperSet()
{
return new HelperSet(array(
new FormatterHelper(),
new DialogHelper(),
));
}






private function getSttyColumns()
{
if (!function_exists('proc_open')) {
return;
}

$descriptorspec = array(1 =&gt; array('pipe', 'w'), 2 =&gt; array('pipe', 'w'));
$process = proc_open('stty -a | grep columns', $descriptorspec, $pipes, null, null, array('suppress_errors' =&gt; true));
if (is_resource($process)) {
$info = stream_get_contents($pipes[1]);
fclose($pipes[1]);
fclose($pipes[2]);
proc_close($process);

return $info;
}
}








private function sortCommands($commands)
{
$namespacedCommands = array();
foreach ($commands as $name =&gt; $command) {
$key = $this-&gt;extractNamespace($name, 1);
if (!$key) {
$key = '_global';
}

$namespacedCommands[$key][$name] = $command;
}
ksort($namespacedCommands);

foreach ($namespacedCommands as &amp;$commands) {
ksort($commands);
}

return $namespacedCommands;
}








private function getAbbreviationSuggestions($abbrevs)
{
return sprintf('%s, %s%s', $abbrevs[0], $abbrevs[1], count($abbrevs) &gt; 2 ? sprintf(' and %d more', count($abbrevs) - 2) : '');
}









private function extractNamespace($name, $limit = null)
{
$parts = explode(':', $name);
array_pop($parts);

return implode(':', null === $limit ? $parts : array_slice($parts, 0, $limit));
}









private function findAlternativeCommands($name, $abbrevs)
{
$callback = function($item) {
return $item-&gt;getName();
};

return $this-&gt;findAlternatives($name, $this-&gt;commands, $abbrevs, $callback);
}









private function findAlternativeNamespace($name, $abbrevs)
{
return $this-&gt;findAlternatives($name, $this-&gt;getNamespaces(), $abbrevs);
}












private function findAlternatives($name, $collection, $abbrevs, $callback = null)
{
$alternatives = array();

foreach ($collection as $item) {
if (null !== $callback) {
$item = call_user_func($callback, $item);
}

$lev = levenshtein($name, $item);
if ($lev &lt;= strlen($name) / 3 || false !== strpos($item, $name)) {
$alternatives[$item] = $lev;
}
}

if (!$alternatives) {
foreach ($abbrevs as $key =&gt; $values) {
$lev = levenshtein($name, $key);
if ($lev &lt;= strlen($name) / 3 || false !== strpos($key, $name)) {
foreach ($values as $value) {
$alternatives[$value] = $lev;
}
}
}
}

asort($alternatives);

return array_keys($alternatives);
}
}
&lt;?php










namespace Symfony\Component\Console\Input;








class InputArgument
{
const REQUIRED = 1;
const OPTIONAL = 2;
const IS_ARRAY = 4;

private $name;
private $mode;
private $default;
private $description;













public function __construct($name, $mode = null, $description = '', $default = null)
{
if (null === $mode) {
$mode = self::OPTIONAL;
} elseif (!is_int($mode) || $mode &gt; 7 || $mode &lt; 1) {
throw new \InvalidArgumentException(sprintf('Argument mode "%s" is not valid.', $mode));
}

$this-&gt;name = $name;
$this-&gt;mode = $mode;
$this-&gt;description = $description;

$this-&gt;setDefault($default);
}






public function getName()
{
return $this-&gt;name;
}






public function isRequired()
{
return self::REQUIRED === (self::REQUIRED &amp; $this-&gt;mode);
}






public function isArray()
{
return self::IS_ARRAY === (self::IS_ARRAY &amp; $this-&gt;mode);
}








public function setDefault($default = null)
{
if (self::REQUIRED === $this-&gt;mode &amp;&amp; null !== $default) {
throw new \LogicException('Cannot set a default value except for Parameter::OPTIONAL mode.');
}

if ($this-&gt;isArray()) {
if (null === $default) {
$default = array();
} elseif (!is_array($default)) {
throw new \LogicException('A default value for an array argument must be an array.');
}
}

$this-&gt;default = $default;
}






public function getDefault()
{
return $this-&gt;default;
}






public function getDescription()
{
return $this-&gt;description;
}
}
&lt;?php










namespace Symfony\Component\Console\Input;












abstract class Input implements InputInterface
{
protected $definition;
protected $options;
protected $arguments;
protected $interactive = true;






public function __construct(InputDefinition $definition = null)
{
if (null === $definition) {
$this-&gt;definition = new InputDefinition();
} else {
$this-&gt;bind($definition);
$this-&gt;validate();
}
}






public function bind(InputDefinition $definition)
{
$this-&gt;arguments = array();
$this-&gt;options = array();
$this-&gt;definition = $definition;

$this-&gt;parse();
}




abstract protected function parse();






public function validate()
{
if (count($this-&gt;arguments) &lt; $this-&gt;definition-&gt;getArgumentRequiredCount()) {
throw new \RuntimeException('Not enough arguments.');
}
}






public function isInteractive()
{
return $this-&gt;interactive;
}






public function setInteractive($interactive)
{
$this-&gt;interactive = (Boolean) $interactive;
}






public function getArguments()
{
return array_merge($this-&gt;definition-&gt;getArgumentDefaults(), $this-&gt;arguments);
}










public function getArgument($name)
{
if (!$this-&gt;definition-&gt;hasArgument($name)) {
throw new \InvalidArgumentException(sprintf('The "%s" argument does not exist.', $name));
}

return isset($this-&gt;arguments[$name]) ? $this-&gt;arguments[$name] : $this-&gt;definition-&gt;getArgument($name)-&gt;getDefault();
}









public function setArgument($name, $value)
{
if (!$this-&gt;definition-&gt;hasArgument($name)) {
throw new \InvalidArgumentException(sprintf('The "%s" argument does not exist.', $name));
}

$this-&gt;arguments[$name] = $value;
}








public function hasArgument($name)
{
return $this-&gt;definition-&gt;hasArgument($name);
}






public function getOptions()
{
return array_merge($this-&gt;definition-&gt;getOptionDefaults(), $this-&gt;options);
}










public function getOption($name)
{
if (!$this-&gt;definition-&gt;hasOption($name)) {
throw new \InvalidArgumentException(sprintf('The "%s" option does not exist.', $name));
}

return isset($this-&gt;options[$name]) ? $this-&gt;options[$name] : $this-&gt;definition-&gt;getOption($name)-&gt;getDefault();
}









public function setOption($name, $value)
{
if (!$this-&gt;definition-&gt;hasOption($name)) {
throw new \InvalidArgumentException(sprintf('The "%s" option does not exist.', $name));
}

$this-&gt;options[$name] = $value;
}








public function hasOption($name)
{
return $this-&gt;definition-&gt;hasOption($name);
}
}
&lt;?php










namespace Symfony\Component\Console\Input;












class StringInput extends ArgvInput
{
const REGEX_STRING = '([^ ]+?)(?: |(?&lt;!\\\\)"|(?&lt;!\\\\)\'|$)';
const REGEX_QUOTED_STRING = '(?:"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"|\'([^\'\\\\]*(?:\\\\.[^\'\\\\]*)*)\')';









public function __construct($input, InputDefinition $definition = null)
{
parent::__construct(array(), $definition);

$this-&gt;setTokens($this-&gt;tokenize($input));
}










private function tokenize($input)
{
$input = preg_replace('/(\r\n|\r|\n|\t)/', ' ', $input);

$tokens = array();
$length = strlen($input);
$cursor = 0;
while ($cursor &lt; $length) {
if (preg_match('/\s+/A', $input, $match, null, $cursor)) {
} elseif (preg_match('/([^="\' ]+?)(=?)('.self::REGEX_QUOTED_STRING.'+)/A', $input, $match, null, $cursor)) {
$tokens[] = $match[1].$match[2].stripcslashes(str_replace(array('"\'', '\'"', '\'\'', '""'), '', substr($match[3], 1, strlen($match[3]) - 2)));
} elseif (preg_match('/'.self::REGEX_QUOTED_STRING.'/A', $input, $match, null, $cursor)) {
$tokens[] = stripcslashes(substr($match[0], 1, strlen($match[0]) - 2));
} elseif (preg_match('/'.self::REGEX_STRING.'/A', $input, $match, null, $cursor)) {
$tokens[] = stripcslashes($match[1]);
} else {

 
 throw new \InvalidArgumentException(sprintf('Unable to parse input near "... %s ..."', substr($input, $cursor, 10)));

 }

$cursor += strlen($match[0]);
}

return $tokens;
}
}
&lt;?php










namespace Symfony\Component\Console\Input;








class InputOption
{
const VALUE_NONE = 1;
const VALUE_REQUIRED = 2;
const VALUE_OPTIONAL = 4;
const VALUE_IS_ARRAY = 8;

private $name;
private $shortcut;
private $mode;
private $default;
private $description;














public function __construct($name, $shortcut = null, $mode = null, $description = '', $default = null)
{
if (0 === strpos($name, '--')) {
$name = substr($name, 2);
}

if (empty($name)) {
throw new \InvalidArgumentException('An option name cannot be empty.');
}

if (empty($shortcut)) {
$shortcut = null;
}

if (null !== $shortcut) {
if ('-' === $shortcut[0]) {
$shortcut = substr($shortcut, 1);
}

if (empty($shortcut)) {
throw new \InvalidArgumentException('An option shortcut cannot be empty.');
}
}

if (null === $mode) {
$mode = self::VALUE_NONE;
} elseif (!is_int($mode) || $mode &gt; 15 || $mode &lt; 1) {
throw new \InvalidArgumentException(sprintf('Option mode "%s" is not valid.', $mode));
}

$this-&gt;name = $name;
$this-&gt;shortcut = $shortcut;
$this-&gt;mode = $mode;
$this-&gt;description = $description;

if ($this-&gt;isArray() &amp;&amp; !$this-&gt;acceptValue()) {
throw new \InvalidArgumentException('Impossible to have an option mode VALUE_IS_ARRAY if the option does not accept a value.');
}

$this-&gt;setDefault($default);
}






public function getShortcut()
{
return $this-&gt;shortcut;
}






public function getName()
{
return $this-&gt;name;
}






public function acceptValue()
{
return $this-&gt;isValueRequired() || $this-&gt;isValueOptional();
}






public function isValueRequired()
{
return self::VALUE_REQUIRED === (self::VALUE_REQUIRED &amp; $this-&gt;mode);
}






public function isValueOptional()
{
return self::VALUE_OPTIONAL === (self::VALUE_OPTIONAL &amp; $this-&gt;mode);
}






public function isArray()
{
return self::VALUE_IS_ARRAY === (self::VALUE_IS_ARRAY &amp; $this-&gt;mode);
}








public function setDefault($default = null)
{
if (self::VALUE_NONE === (self::VALUE_NONE &amp; $this-&gt;mode) &amp;&amp; null !== $default) {
throw new \LogicException('Cannot set a default value when using Option::VALUE_NONE mode.');
}

if ($this-&gt;isArray()) {
if (null === $default) {
$default = array();
} elseif (!is_array($default)) {
throw new \LogicException('A default value for an array option must be an array.');
}
}

$this-&gt;default = $this-&gt;acceptValue() ? $default : false;
}






public function getDefault()
{
return $this-&gt;default;
}






public function getDescription()
{
return $this-&gt;description;
}







public function equals(InputOption $option)
{
return $option-&gt;getName() === $this-&gt;getName()
&amp;&amp; $option-&gt;getShortcut() === $this-&gt;getShortcut()
&amp;&amp; $option-&gt;getDefault() === $this-&gt;getDefault()
&amp;&amp; $option-&gt;isArray() === $this-&gt;isArray()
&amp;&amp; $option-&gt;isValueRequired() === $this-&gt;isValueRequired()
&amp;&amp; $option-&gt;isValueOptional() === $this-&gt;isValueOptional()
;
}
}
&lt;?php










namespace Symfony\Component\Console\Input;




























class ArgvInput extends Input
{
private $tokens;
private $parsed;









public function __construct(array $argv = null, InputDefinition $definition = null)
{
if (null === $argv) {
$argv = $_SERVER['argv'];
}


 array_shift($argv);

$this-&gt;tokens = $argv;

parent::__construct($definition);
}

protected function setTokens(array $tokens)
{
$this-&gt;tokens = $tokens;
}




protected function parse()
{
$parseOptions = true;
$this-&gt;parsed = $this-&gt;tokens;
while (null !== $token = array_shift($this-&gt;parsed)) {
if ($parseOptions &amp;&amp; '' == $token) {
$this-&gt;parseArgument($token);
} elseif ($parseOptions &amp;&amp; '--' == $token) {
$parseOptions = false;
} elseif ($parseOptions &amp;&amp; 0 === strpos($token, '--')) {
$this-&gt;parseLongOption($token);
} elseif ($parseOptions &amp;&amp; '-' === $token[0]) {
$this-&gt;parseShortOption($token);
} else {
$this-&gt;parseArgument($token);
}
}
}






private function parseShortOption($token)
{
$name = substr($token, 1);

if (strlen($name) &gt; 1) {
if ($this-&gt;definition-&gt;hasShortcut($name[0]) &amp;&amp; $this-&gt;definition-&gt;getOptionForShortcut($name[0])-&gt;acceptValue()) {

 $this-&gt;addShortOption($name[0], substr($name, 1));
} else {
$this-&gt;parseShortOptionSet($name);
}
} else {
$this-&gt;addShortOption($name, null);
}
}








private function parseShortOptionSet($name)
{
$len = strlen($name);
for ($i = 0; $i &lt; $len; $i++) {
if (!$this-&gt;definition-&gt;hasShortcut($name[$i])) {
throw new \RuntimeException(sprintf('The "-%s" option does not exist.', $name[$i]));
}

$option = $this-&gt;definition-&gt;getOptionForShortcut($name[$i]);
if ($option-&gt;acceptValue()) {
$this-&gt;addLongOption($option-&gt;getName(), $i === $len - 1 ? null : substr($name, $i + 1));

break;
} else {
$this-&gt;addLongOption($option-&gt;getName(), true);
}
}
}






private function parseLongOption($token)
{
$name = substr($token, 2);

if (false !== $pos = strpos($name, '=')) {
$this-&gt;addLongOption(substr($name, 0, $pos), substr($name, $pos + 1));
} else {
$this-&gt;addLongOption($name, null);
}
}








private function parseArgument($token)
{
$c = count($this-&gt;arguments);


 if ($this-&gt;definition-&gt;hasArgument($c)) {
$arg = $this-&gt;definition-&gt;getArgument($c);
$this-&gt;arguments[$arg-&gt;getName()] = $arg-&gt;isArray()? array($token) : $token;


 } elseif ($this-&gt;definition-&gt;hasArgument($c - 1) &amp;&amp; $this-&gt;definition-&gt;getArgument($c - 1)-&gt;isArray()) {
$arg = $this-&gt;definition-&gt;getArgument($c - 1);
$this-&gt;arguments[$arg-&gt;getName()][] = $token;


 } else {
throw new \RuntimeException('Too many arguments.');
}
}









private function addShortOption($shortcut, $value)
{
if (!$this-&gt;definition-&gt;hasShortcut($shortcut)) {
throw new \RuntimeException(sprintf('The "-%s" option does not exist.', $shortcut));
}

$this-&gt;addLongOption($this-&gt;definition-&gt;getOptionForShortcut($shortcut)-&gt;getName(), $value);
}









private function addLongOption($name, $value)
{
if (!$this-&gt;definition-&gt;hasOption($name)) {
throw new \RuntimeException(sprintf('The "--%s" option does not exist.', $name));
}

$option = $this-&gt;definition-&gt;getOption($name);

if (null === $value &amp;&amp; $option-&gt;acceptValue()) {

 
 $next = array_shift($this-&gt;parsed);
if ('-' !== $next[0]) {
$value = $next;
} else {
array_unshift($this-&gt;parsed, $next);
}
}

if (null === $value) {
if ($option-&gt;isValueRequired()) {
throw new \RuntimeException(sprintf('The "--%s" option requires a value.', $name));
}

$value = $option-&gt;isValueOptional() ? $option-&gt;getDefault() : true;
}

if ($option-&gt;isArray()) {
$this-&gt;options[$name][] = $value;
} else {
$this-&gt;options[$name] = $value;
}
}






public function getFirstArgument()
{
foreach ($this-&gt;tokens as $token) {
if ($token &amp;&amp; '-' === $token[0]) {
continue;
}

return $token;
}
}











public function hasParameterOption($values)
{
$values = (array) $values;

foreach ($this-&gt;tokens as $v) {
if (in_array($v, $values)) {
return true;
}
}

return false;
}












public function getParameterOption($values, $default = false)
{
$values = (array) $values;

$tokens = $this-&gt;tokens;
while ($token = array_shift($tokens)) {
foreach ($values as $value) {
if (0 === strpos($token, $value)) {
if (false !== $pos = strpos($token, '=')) {
return substr($token, $pos + 1);
}

return array_shift($tokens);
}
}
}

return $default;
}
}
&lt;?php










namespace Symfony\Component\Console\Input;






interface InputInterface
{





public function getFirstArgument();











public function hasParameterOption($values);












public function getParameterOption($values, $default = false);






public function bind(InputDefinition $definition);








public function validate();






public function getArguments();








public function getArgument($name);









public function setArgument($name, $value);








public function hasArgument($name);






public function getOptions();








public function getOption($name);









public function setOption($name, $value);








public function hasOption($name);






public function isInteractive();






public function setInteractive($interactive);
}
&lt;?php










namespace Symfony\Component\Console\Input;












class ArrayInput extends Input
{
private $parameters;









public function __construct(array $parameters, InputDefinition $definition = null)
{
$this-&gt;parameters = $parameters;

parent::__construct($definition);
}






public function getFirstArgument()
{
foreach ($this-&gt;parameters as $key =&gt; $value) {
if ($key &amp;&amp; '-' === $key[0]) {
continue;
}

return $value;
}
}











public function hasParameterOption($values)
{
$values = (array) $values;

foreach ($this-&gt;parameters as $k =&gt; $v) {
if (!is_int($k)) {
$v = $k;
}

if (in_array($v, $values)) {
return true;
}
}

return false;
}












public function getParameterOption($values, $default = false)
{
$values = (array) $values;

foreach ($this-&gt;parameters as $k =&gt; $v) {
if (is_int($k) &amp;&amp; in_array($v, $values)) {
return true;
} elseif (in_array($k, $values)) {
return $v;
}
}

return $default;
}




protected function parse()
{
foreach ($this-&gt;parameters as $key =&gt; $value) {
if (0 === strpos($key, '--')) {
$this-&gt;addLongOption(substr($key, 2), $value);
} elseif ('-' === $key[0]) {
$this-&gt;addShortOption(substr($key, 1), $value);
} else {
$this-&gt;addArgument($key, $value);
}
}
}









private function addShortOption($shortcut, $value)
{
if (!$this-&gt;definition-&gt;hasShortcut($shortcut)) {
throw new \InvalidArgumentException(sprintf('The "-%s" option does not exist.', $shortcut));
}

$this-&gt;addLongOption($this-&gt;definition-&gt;getOptionForShortcut($shortcut)-&gt;getName(), $value);
}










private function addLongOption($name, $value)
{
if (!$this-&gt;definition-&gt;hasOption($name)) {
throw new \InvalidArgumentException(sprintf('The "--%s" option does not exist.', $name));
}

$option = $this-&gt;definition-&gt;getOption($name);

if (null === $value) {
if ($option-&gt;isValueRequired()) {
throw new \InvalidArgumentException(sprintf('The "--%s" option requires a value.', $name));
}

$value = $option-&gt;isValueOptional() ? $option-&gt;getDefault() : true;
}

$this-&gt;options[$name] = $value;
}









private function addArgument($name, $value)
{
if (!$this-&gt;definition-&gt;hasArgument($name)) {
throw new \InvalidArgumentException(sprintf('The "%s" argument does not exist.', $name));
}

$this-&gt;arguments[$name] = $value;
}
}
&lt;?php










namespace Symfony\Component\Console\Input;















class InputDefinition
{
private $arguments;
private $requiredCount;
private $hasAnArrayArgument = false;
private $hasOptional;
private $options;
private $shortcuts;








public function __construct(array $definition = array())
{
$this-&gt;setDefinition($definition);
}








public function setDefinition(array $definition)
{
$arguments = array();
$options = array();
foreach ($definition as $item) {
if ($item instanceof InputOption) {
$options[] = $item;
} else {
$arguments[] = $item;
}
}

$this-&gt;setArguments($arguments);
$this-&gt;setOptions($options);
}








public function setArguments($arguments = array())
{
$this-&gt;arguments = array();
$this-&gt;requiredCount = 0;
$this-&gt;hasOptional = false;
$this-&gt;hasAnArrayArgument = false;
$this-&gt;addArguments($arguments);
}








public function addArguments($arguments = array())
{
if (null !== $arguments) {
foreach ($arguments as $argument) {
$this-&gt;addArgument($argument);
}
}
}










public function addArgument(InputArgument $argument)
{
if (isset($this-&gt;arguments[$argument-&gt;getName()])) {
throw new \LogicException(sprintf('An argument with name "%s" already exists.', $argument-&gt;getName()));
}

if ($this-&gt;hasAnArrayArgument) {
throw new \LogicException('Cannot add an argument after an array argument.');
}

if ($argument-&gt;isRequired() &amp;&amp; $this-&gt;hasOptional) {
throw new \LogicException('Cannot add a required argument after an optional one.');
}

if ($argument-&gt;isArray()) {
$this-&gt;hasAnArrayArgument = true;
}

if ($argument-&gt;isRequired()) {
++$this-&gt;requiredCount;
} else {
$this-&gt;hasOptional = true;
}

$this-&gt;arguments[$argument-&gt;getName()] = $argument;
}












public function getArgument($name)
{
$arguments = is_int($name) ? array_values($this-&gt;arguments) : $this-&gt;arguments;

if (!$this-&gt;hasArgument($name)) {
throw new \InvalidArgumentException(sprintf('The "%s" argument does not exist.', $name));
}

return $arguments[$name];
}










public function hasArgument($name)
{
$arguments = is_int($name) ? array_values($this-&gt;arguments) : $this-&gt;arguments;

return isset($arguments[$name]);
}








public function getArguments()
{
return $this-&gt;arguments;
}






public function getArgumentCount()
{
return $this-&gt;hasAnArrayArgument ? PHP_INT_MAX : count($this-&gt;arguments);
}






public function getArgumentRequiredCount()
{
return $this-&gt;requiredCount;
}






public function getArgumentDefaults()
{
$values = array();
foreach ($this-&gt;arguments as $argument) {
$values[$argument-&gt;getName()] = $argument-&gt;getDefault();
}

return $values;
}








public function setOptions($options = array())
{
$this-&gt;options = array();
$this-&gt;shortcuts = array();
$this-&gt;addOptions($options);
}








public function addOptions($options = array())
{
foreach ($options as $option) {
$this-&gt;addOption($option);
}
}










public function addOption(InputOption $option)
{
if (isset($this-&gt;options[$option-&gt;getName()]) &amp;&amp; !$option-&gt;equals($this-&gt;options[$option-&gt;getName()])) {
throw new \LogicException(sprintf('An option named "%s" already exists.', $option-&gt;getName()));
} elseif (isset($this-&gt;shortcuts[$option-&gt;getShortcut()]) &amp;&amp; !$option-&gt;equals($this-&gt;options[$this-&gt;shortcuts[$option-&gt;getShortcut()]])) {
throw new \LogicException(sprintf('An option with shortcut "%s" already exists.', $option-&gt;getShortcut()));
}

$this-&gt;options[$option-&gt;getName()] = $option;
if ($option-&gt;getShortcut()) {
$this-&gt;shortcuts[$option-&gt;getShortcut()] = $option-&gt;getName();
}
}












public function getOption($name)
{
if (!$this-&gt;hasOption($name)) {
throw new \InvalidArgumentException(sprintf('The "--%s" option does not exist.', $name));
}

return $this-&gt;options[$name];
}










public function hasOption($name)
{
return isset($this-&gt;options[$name]);
}








public function getOptions()
{
return $this-&gt;options;
}








public function hasShortcut($name)
{
return isset($this-&gt;shortcuts[$name]);
}








public function getOptionForShortcut($shortcut)
{
return $this-&gt;getOption($this-&gt;shortcutToName($shortcut));
}






public function getOptionDefaults()
{
$values = array();
foreach ($this-&gt;options as $option) {
$values[$option-&gt;getName()] = $option-&gt;getDefault();
}

return $values;
}










private function shortcutToName($shortcut)
{
if (!isset($this-&gt;shortcuts[$shortcut])) {
throw new \InvalidArgumentException(sprintf('The "-%s" option does not exist.', $shortcut));
}

return $this-&gt;shortcuts[$shortcut];
}






public function getSynopsis()
{
$elements = array();
foreach ($this-&gt;getOptions() as $option) {
$shortcut = $option-&gt;getShortcut() ? sprintf('-%s|', $option-&gt;getShortcut()) : '';
$elements[] = sprintf('['.($option-&gt;isValueRequired() ? '%s--%s="..."' : ($option-&gt;isValueOptional() ? '%s--%s[="..."]' : '%s--%s')).']', $shortcut, $option-&gt;getName());
}

foreach ($this-&gt;getArguments() as $argument) {
$elements[] = sprintf($argument-&gt;isRequired() ? '%s' : '[%s]', $argument-&gt;getName().($argument-&gt;isArray() ? '1' : ''));

if ($argument-&gt;isArray()) {
$elements[] = sprintf('... [%sN]', $argument-&gt;getName());
}
}

return implode(' ', $elements);
}






public function asText()
{

 $max = 0;
foreach ($this-&gt;getOptions() as $option) {
$nameLength = strlen($option-&gt;getName()) + 2;
if ($option-&gt;getShortcut()) {
$nameLength += strlen($option-&gt;getShortcut()) + 3;
}

$max = max($max, $nameLength);
}
foreach ($this-&gt;getArguments() as $argument) {
$max = max($max, strlen($argument-&gt;getName()));
}
++$max;

$text = array();

if ($this-&gt;getArguments()) {
$text[] = '&lt;comment&gt;Arguments:&lt;/comment&gt;';
foreach ($this-&gt;getArguments() as $argument) {
if (null !== $argument-&gt;getDefault() &amp;&amp; (!is_array($argument-&gt;getDefault()) || count($argument-&gt;getDefault()))) {
$default = sprintf('&lt;comment&gt; (default: %s)&lt;/comment&gt;', $this-&gt;formatDefaultValue($argument-&gt;getDefault()));
} else {
$default = '';
}

$description = str_replace("\n", "\n".str_pad('', $max + 2, ' '), $argument-&gt;getDescription());

$text[] = sprintf(" &lt;info&gt;%-${max}s&lt;/info&gt; %s%s", $argument-&gt;getName(), $description, $default);
}

$text[] = '';
}

if ($this-&gt;getOptions()) {
$text[] = '&lt;comment&gt;Options:&lt;/comment&gt;';

foreach ($this-&gt;getOptions() as $option) {
if ($option-&gt;acceptValue() &amp;&amp; null !== $option-&gt;getDefault() &amp;&amp; (!is_array($option-&gt;getDefault()) || count($option-&gt;getDefault()))) {
$default = sprintf('&lt;comment&gt; (default: %s)&lt;/comment&gt;', $this-&gt;formatDefaultValue($option-&gt;getDefault()));
} else {
$default = '';
}

$multiple = $option-&gt;isArray() ? '&lt;comment&gt; (multiple values allowed)&lt;/comment&gt;' : '';
$description = str_replace("\n", "\n".str_pad('', $max + 2, ' '), $option-&gt;getDescription());

$optionMax = $max - strlen($option-&gt;getName()) - 2;
$text[] = sprintf(" &lt;info&gt;%s&lt;/info&gt; %-${optionMax}s%s%s%s",
'--'.$option-&gt;getName(),
$option-&gt;getShortcut() ? sprintf('(-%s) ', $option-&gt;getShortcut()) : '',
$description,
$default,
$multiple
);
}

$text[] = '';
}

return implode("\n", $text);
}








public function asXml($asDom = false)
{
$dom = new \DOMDocument('1.0', 'UTF-8');
$dom-&gt;formatOutput = true;
$dom-&gt;appendChild($definitionXML = $dom-&gt;createElement('definition'));

$definitionXML-&gt;appendChild($argumentsXML = $dom-&gt;createElement('arguments'));
foreach ($this-&gt;getArguments() as $argument) {
$argumentsXML-&gt;appendChild($argumentXML = $dom-&gt;createElement('argument'));
$argumentXML-&gt;setAttribute('name', $argument-&gt;getName());
$argumentXML-&gt;setAttribute('is_required', $argument-&gt;isRequired() ? 1 : 0);
$argumentXML-&gt;setAttribute('is_array', $argument-&gt;isArray() ? 1 : 0);
$argumentXML-&gt;appendChild($descriptionXML = $dom-&gt;createElement('description'));
$descriptionXML-&gt;appendChild($dom-&gt;createTextNode($argument-&gt;getDescription()));

$argumentXML-&gt;appendChild($defaultsXML = $dom-&gt;createElement('defaults'));
$defaults = is_array($argument-&gt;getDefault()) ? $argument-&gt;getDefault() : (is_bool($argument-&gt;getDefault()) ? array(var_export($argument-&gt;getDefault(), true)) : ($argument-&gt;getDefault() ? array($argument-&gt;getDefault()) : array()));
foreach ($defaults as $default) {
$defaultsXML-&gt;appendChild($defaultXML = $dom-&gt;createElement('default'));
$defaultXML-&gt;appendChild($dom-&gt;createTextNode($default));
}
}

$definitionXML-&gt;appendChild($optionsXML = $dom-&gt;createElement('options'));
foreach ($this-&gt;getOptions() as $option) {
$optionsXML-&gt;appendChild($optionXML = $dom-&gt;createElement('option'));
$optionXML-&gt;setAttribute('name', '--'.$option-&gt;getName());
$optionXML-&gt;setAttribute('shortcut', $option-&gt;getShortcut() ? '-'.$option-&gt;getShortcut() : '');
$optionXML-&gt;setAttribute('accept_value', $option-&gt;acceptValue() ? 1 : 0);
$optionXML-&gt;setAttribute('is_value_required', $option-&gt;isValueRequired() ? 1 : 0);
$optionXML-&gt;setAttribute('is_multiple', $option-&gt;isArray() ? 1 : 0);
$optionXML-&gt;appendChild($descriptionXML = $dom-&gt;createElement('description'));
$descriptionXML-&gt;appendChild($dom-&gt;createTextNode($option-&gt;getDescription()));

if ($option-&gt;acceptValue()) {
$optionXML-&gt;appendChild($defaultsXML = $dom-&gt;createElement('defaults'));
$defaults = is_array($option-&gt;getDefault()) ? $option-&gt;getDefault() : (is_bool($option-&gt;getDefault()) ? array(var_export($option-&gt;getDefault(), true)) : ($option-&gt;getDefault() ? array($option-&gt;getDefault()) : array()));
foreach ($defaults as $default) {
$defaultsXML-&gt;appendChild($defaultXML = $dom-&gt;createElement('default'));
$defaultXML-&gt;appendChild($dom-&gt;createTextNode($default));
}
}
}

return $asDom ? $dom : $dom-&gt;saveXml();
}

private function formatDefaultValue($default)
{
return json_encode($default);
}
}
&lt;?php










namespace Symfony\Component\Console;

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\StringInput;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Process\ProcessBuilder;
use Symfony\Component\Process\PhpExecutableFinder;










class Shell
{
private $application;
private $history;
private $output;
private $hasReadline;
private $prompt;
private $processIsolation;









public function __construct(Application $application)
{
$this-&gt;hasReadline = function_exists('readline');
$this-&gt;application = $application;
$this-&gt;history = getenv('HOME').'/.history_'.$application-&gt;getName();
$this-&gt;output = new ConsoleOutput();
$this-&gt;prompt = $application-&gt;getName().' &gt; ';
$this-&gt;processIsolation = false;
}




public function run()
{
$this-&gt;application-&gt;setAutoExit(false);
$this-&gt;application-&gt;setCatchExceptions(true);

if ($this-&gt;hasReadline) {
readline_read_history($this-&gt;history);
readline_completion_function(array($this, 'autocompleter'));
}

$this-&gt;output-&gt;writeln($this-&gt;getHeader());
$php = null;
if ($this-&gt;processIsolation) {
$finder = new PhpExecutableFinder();
$php = $finder-&gt;find();
$this-&gt;output-&gt;writeln(&lt;&lt;&lt;EOF
&lt;info&gt;Running with process isolation, you should consider this:&lt;/info&gt;
  * each command is executed as separate process,
  * commands don't support interactivity, all params must be passed explicitly,
  * commands output is not colorized.

EOF
);
}

while (true) {
$command = $this-&gt;readline();

if (false === $command) {
$this-&gt;output-&gt;writeln("\n");

break;
}

if ($this-&gt;hasReadline) {
readline_add_history($command);
readline_write_history($this-&gt;history);
}

if ($this-&gt;processIsolation) {
$pb = new ProcessBuilder();

$process = $pb
-&gt;add($php)
-&gt;add($_SERVER['argv'][0])
-&gt;add($command)
-&gt;inheritEnvironmentVariables(true)
-&gt;getProcess()
;

$output = $this-&gt;output;
$process-&gt;run(function($type, $data) use ($output) {
$output-&gt;writeln($data);
});

$ret = $process-&gt;getExitCode();
} else {
$ret = $this-&gt;application-&gt;run(new StringInput($command), $this-&gt;output);
}

if (0 !== $ret) {
$this-&gt;output-&gt;writeln(sprintf('&lt;error&gt;The command terminated with an error status (%s)&lt;/error&gt;', $ret));
}
}
}






protected function getHeader()
{
return &lt;&lt;&lt;EOF

Welcome to the &lt;info&gt;{$this-&gt;application-&gt;getName()}&lt;/info&gt; shell (&lt;comment&gt;{$this-&gt;application-&gt;getVersion()}&lt;/comment&gt;).

At the prompt, type &lt;comment&gt;help&lt;/comment&gt; for some help,
or &lt;comment&gt;list&lt;/comment&gt; to get a list of available commands.

To exit the shell, type &lt;comment&gt;^D&lt;/comment&gt;.

EOF;
}








private function autocompleter($text)
{
$info = readline_info();
$text = substr($info['line_buffer'], 0, $info['end']);

if ($info['point'] !== $info['end']) {
return true;
}


 if (false === strpos($text, ' ') || !$text) {
return array_keys($this-&gt;application-&gt;all());
}


 try {
$command = $this-&gt;application-&gt;find(substr($text, 0, strpos($text, ' ')));
} catch (\Exception $e) {
return true;
}

$list = array('--help');
foreach ($command-&gt;getDefinition()-&gt;getOptions() as $option) {
$list[] = '--'.$option-&gt;getName();
}

return $list;
}






private function readline()
{
if ($this-&gt;hasReadline) {
$line = readline($this-&gt;prompt);
} else {
$this-&gt;output-&gt;write($this-&gt;prompt);
$line = fgets(STDIN, 1024);
$line = (!$line &amp;&amp; strlen($line) == 0) ? false : rtrim($line);
}

return $line;
}

public function getProcessIsolation()
{
return $this-&gt;processIsolation;
}

public function setProcessIsolation($processIsolation)
{
$this-&gt;processIsolation = (Boolean) $processIsolation;
}
}
&lt;?php










namespace Symfony\Component\Console\Output;

use Symfony\Component\Console\Formatter\OutputFormatterInterface;
use Symfony\Component\Console\Formatter\OutputFormatter;














abstract class Output implements OutputInterface
{
private $verbosity;
private $formatter;










public function __construct($verbosity = self::VERBOSITY_NORMAL, $decorated = null, OutputFormatterInterface $formatter = null)
{
$this-&gt;verbosity = null === $verbosity ? self::VERBOSITY_NORMAL : $verbosity;
$this-&gt;formatter = null === $formatter ? new OutputFormatter() : $formatter;
$this-&gt;formatter-&gt;setDecorated((Boolean) $decorated);
}








public function setFormatter(OutputFormatterInterface $formatter)
{
$this-&gt;formatter = $formatter;
}








public function getFormatter()
{
return $this-&gt;formatter;
}








public function setDecorated($decorated)
{
$this-&gt;formatter-&gt;setDecorated((Boolean) $decorated);
}








public function isDecorated()
{
return $this-&gt;formatter-&gt;isDecorated();
}








public function setVerbosity($level)
{
$this-&gt;verbosity = (int) $level;
}








public function getVerbosity()
{
return $this-&gt;verbosity;
}









public function writeln($messages, $type = 0)
{
$this-&gt;write($messages, true, $type);
}












public function write($messages, $newline = false, $type = 0)
{
if (self::VERBOSITY_QUIET === $this-&gt;verbosity) {
return;
}

$messages = (array) $messages;

foreach ($messages as $message) {
switch ($type) {
case OutputInterface::OUTPUT_NORMAL:
$message = $this-&gt;formatter-&gt;format($message);
break;
case OutputInterface::OUTPUT_RAW:
break;
case OutputInterface::OUTPUT_PLAIN:
$message = strip_tags($this-&gt;formatter-&gt;format($message));
break;
default:
throw new \InvalidArgumentException(sprintf('Unknown output type given (%s)', $type));
}

$this-&gt;doWrite($message, $newline);
}
}







abstract protected function doWrite($message, $newline);
}
&lt;?php










namespace Symfony\Component\Console\Output;










class NullOutput extends Output
{






protected function doWrite($message, $newline)
{
}
}
&lt;?php










namespace Symfony\Component\Console\Output;

use Symfony\Component\Console\Output\OutputInterface;







interface ConsoleOutputInterface extends OutputInterface
{



public function getErrorOutput();

public function setErrorOutput(OutputInterface $error);
}
&lt;?php










namespace Symfony\Component\Console\Output;

use Symfony\Component\Console\Formatter\OutputFormatterInterface;
















class StreamOutput extends Output
{
private $stream;














public function __construct($stream, $verbosity = self::VERBOSITY_NORMAL, $decorated = null, OutputFormatterInterface $formatter = null)
{
if (!is_resource($stream) || 'stream' !== get_resource_type($stream)) {
throw new \InvalidArgumentException('The StreamOutput class needs a stream as its first argument.');
}

$this-&gt;stream = $stream;

if (null === $decorated) {
$decorated = $this-&gt;hasColorSupport($decorated);
}

parent::__construct($verbosity, $decorated, $formatter);
}






public function getStream()
{
return $this-&gt;stream;
}









protected function doWrite($message, $newline)
{
if (false === @fwrite($this-&gt;stream, $message.($newline ? PHP_EOL : ''))) {

 
 throw new \RuntimeException('Unable to write output.');

 }

fflush($this-&gt;stream);
}











protected function hasColorSupport()
{

 if (DIRECTORY_SEPARATOR == '\\') {
return false !== getenv('ANSICON');
}

return function_exists('posix_isatty') &amp;&amp; @posix_isatty($this-&gt;stream);

 }
}
&lt;?php










namespace Symfony\Component\Console\Output;

use Symfony\Component\Console\Formatter\OutputFormatterInterface;








interface OutputInterface
{
const VERBOSITY_QUIET = 0;
const VERBOSITY_NORMAL = 1;
const VERBOSITY_VERBOSE = 2;

const OUTPUT_NORMAL = 0;
const OUTPUT_RAW = 1;
const OUTPUT_PLAIN = 2;












public function write($messages, $newline = false, $type = 0);









public function writeln($messages, $type = 0);








public function setVerbosity($level);








public function getVerbosity();








public function setDecorated($decorated);








public function isDecorated();








public function setFormatter(OutputFormatterInterface $formatter);








public function getFormatter();
}
&lt;?php










namespace Symfony\Component\Console\Output;

use Symfony\Component\Console\Formatter\OutputFormatter;
use Symfony\Component\Console\Formatter\OutputFormatterInterface;
use Symfony\Component\Console\Output\ConsoleOutputInterface;
















class ConsoleOutput extends StreamOutput implements ConsoleOutputInterface
{
private $stderr;











public function __construct($verbosity = self::VERBOSITY_NORMAL, $decorated = null, OutputFormatterInterface $formatter = null)
{
$outputStream = 'php://stdout';
if (!$this-&gt;hasStdoutSupport()) {
$outputStream = 'php://output';
}

parent::__construct(fopen($outputStream, 'w'), $verbosity, $decorated, $formatter);

$this-&gt;stderr = new StreamOutput(fopen('php://stderr', 'w'), $verbosity, $decorated, $formatter);
}

public function setDecorated($decorated)
{
parent::setDecorated($decorated);
$this-&gt;stderr-&gt;setDecorated($decorated);
}

public function setFormatter(OutputFormatterInterface $formatter)
{
parent::setFormatter($formatter);
$this-&gt;stderr-&gt;setFormatter($formatter);
}

public function setVerbosity($level)
{
parent::setVerbosity($level);
$this-&gt;stderr-&gt;setVerbosity($level);
}




public function getErrorOutput()
{
return $this-&gt;stderr;
}

public function setErrorOutput(OutputInterface $error)
{
$this-&gt;stderr = $error;
}











protected function hasStdoutSupport()
{
return ('OS400' != php_uname('s'));
}
}
&lt;?php










namespace Symfony\Component\Console\Helper;








interface HelperInterface
{







public function setHelperSet(HelperSet $helperSet = null);








public function getHelperSet();








public function getName();
}
&lt;?php










namespace Symfony\Component\Console\Helper;

use Symfony\Component\Console\Formatter\OutputFormatter;






class FormatterHelper extends Helper
{









public function formatSection($section, $message, $style = 'info')
{
return sprintf('&lt;%s&gt;[%s]&lt;/%s&gt; %s', $style, $section, $style, $message);
}










public function formatBlock($messages, $style, $large = false)
{
$messages = (array) $messages;

$len = 0;
$lines = array();
foreach ($messages as $message) {
$message = OutputFormatter::escape($message);
$lines[] = sprintf($large ? '  %s  ' : ' %s ', $message);
$len = max($this-&gt;strlen($message) + ($large ? 4 : 2), $len);
}

$messages = $large ? array(str_repeat(' ', $len)) : array();
foreach ($lines as $line) {
$messages[] = $line.str_repeat(' ', $len - $this-&gt;strlen($line));
}
if ($large) {
$messages[] = str_repeat(' ', $len);
}

foreach ($messages as &amp;$message) {
$message = sprintf('&lt;%s&gt;%s&lt;/%s&gt;', $style, $message, $style);
}

return implode("\n", $messages);
}








private function strlen($string)
{
if (!function_exists('mb_strlen')) {
return strlen($string);
}

if (false === $encoding = mb_detect_encoding($string)) {
return strlen($string);
}

return mb_strlen($string, $encoding);
}






public function getName()
{
return 'formatter';
}
}
&lt;?php










namespace Symfony\Component\Console\Helper;

use Symfony\Component\Console\Command\Command;






class HelperSet
{
private $helpers;
private $command;






public function __construct(array $helpers = array())
{
$this-&gt;helpers = array();
foreach ($helpers as $alias =&gt; $helper) {
$this-&gt;set($helper, is_int($alias) ? null : $alias);
}
}







public function set(HelperInterface $helper, $alias = null)
{
$this-&gt;helpers[$helper-&gt;getName()] = $helper;
if (null !== $alias) {
$this-&gt;helpers[$alias] = $helper;
}

$helper-&gt;setHelperSet($this);
}








public function has($name)
{
return isset($this-&gt;helpers[$name]);
}










public function get($name)
{
if (!$this-&gt;has($name)) {
throw new \InvalidArgumentException(sprintf('The helper "%s" is not defined.', $name));
}

return $this-&gt;helpers[$name];
}






public function setCommand(Command $command = null)
{
$this-&gt;command = $command;
}






public function getCommand()
{
return $this-&gt;command;
}
}
&lt;?php










namespace Symfony\Component\Console\Helper;

use Symfony\Component\Console\Output\OutputInterface;






class DialogHelper extends Helper
{
private $inputStream;












public function ask(OutputInterface $output, $question, $default = null)
{
$output-&gt;write($question);

$ret = fgets($this-&gt;inputStream ?: STDIN, 4096);
if (false === $ret) {
throw new \RuntimeException('Aborted');
}
$ret = trim($ret);

return strlen($ret) &gt; 0 ? $ret : $default;
}












public function askConfirmation(OutputInterface $output, $question, $default = true)
{
$answer = 'z';
while ($answer &amp;&amp; !in_array(strtolower($answer[0]), array('y', 'n'))) {
$answer = $this-&gt;ask($output, $question);
}

if (false === $default) {
return $answer &amp;&amp; 'y' == strtolower($answer[0]);
}

return !$answer || 'y' == strtolower($answer[0]);
}


















public function askAndValidate(OutputInterface $output, $question, $validator, $attempts = false, $default = null)
{
$error = null;
while (false === $attempts || $attempts--) {
if (null !== $error) {
$output-&gt;writeln($this-&gt;getHelperSet()-&gt;get('formatter')-&gt;formatBlock($error-&gt;getMessage(), 'error'));
}

$value = $this-&gt;ask($output, $question, $default);

try {
return call_user_func($validator, $value);
} catch (\Exception $error) {
}
}

throw $error;
}








public function setInputStream($stream)
{
$this-&gt;inputStream = $stream;
}






public function getInputStream()
{
return $this-&gt;inputStream;
}






public function getName()
{
return 'dialog';
}
}
&lt;?php










namespace Symfony\Component\Console\Helper;






abstract class Helper implements HelperInterface
{
protected $helperSet = null;






public function setHelperSet(HelperSet $helperSet = null)
{
$this-&gt;helperSet = $helperSet;
}






public function getHelperSet()
{
return $this-&gt;helperSet;
}
}
&lt;?php










namespace Symfony\Component\Finder;
















class Finder implements \IteratorAggregate, \Countable
{
const IGNORE_VCS_FILES = 1;
const IGNORE_DOT_FILES = 2;

private $mode = 0;
private $names = array();
private $notNames = array();
private $exclude = array();
private $filters = array();
private $depths = array();
private $sizes = array();
private $followLinks = false;
private $sort = false;
private $ignore = 0;
private $dirs = array();
private $dates = array();
private $iterators = array();
private $contains = array();
private $notContains = array();

private static $vcsPatterns = array('.svn', '_svn', 'CVS', '_darcs', '.arch-params', '.monotone', '.bzr', '.git', '.hg');




public function __construct()
{
$this-&gt;ignore = static::IGNORE_VCS_FILES | static::IGNORE_DOT_FILES;
}








public static function create()
{
return new static();
}








public function directories()
{
$this-&gt;mode = Iterator\FileTypeFilterIterator::ONLY_DIRECTORIES;

return $this;
}








public function files()
{
$this-&gt;mode = Iterator\FileTypeFilterIterator::ONLY_FILES;

return $this;
}


















public function depth($level)
{
$this-&gt;depths[] = new Comparator\NumberComparator($level);

return $this;
}





















public function date($date)
{
$this-&gt;dates[] = new Comparator\DateComparator($date);

return $this;
}


















public function name($pattern)
{
$this-&gt;names[] = $pattern;

return $this;
}












public function notName($pattern)
{
$this-&gt;notNames[] = $pattern;

return $this;
}















public function contains($pattern)
{
$this-&gt;contains[] = $pattern;

return $this;
}
















public function notContains($pattern)
{
$this-&gt;notContains[] = $pattern;

return $this;
}

















public function size($size)
{
$this-&gt;sizes[] = new Comparator\NumberComparator($size);

return $this;
}












public function exclude($dirs)
{
$this-&gt;exclude = array_merge($this-&gt;exclude, (array) $dirs);

return $this;
}












public function ignoreDotFiles($ignoreDotFiles)
{
if ($ignoreDotFiles) {
$this-&gt;ignore = $this-&gt;ignore | static::IGNORE_DOT_FILES;
} else {
$this-&gt;ignore = $this-&gt;ignore &amp; ~static::IGNORE_DOT_FILES;
}

return $this;
}












public function ignoreVCS($ignoreVCS)
{
if ($ignoreVCS) {
$this-&gt;ignore = $this-&gt;ignore | static::IGNORE_VCS_FILES;
} else {
$this-&gt;ignore = $this-&gt;ignore &amp; ~static::IGNORE_VCS_FILES;
}

return $this;
}

public static function addVCSPattern($pattern)
{
self::$vcsPatterns[] = $pattern;
}
















public function sort(\Closure $closure)
{
$this-&gt;sort = $closure;

return $this;
}












public function sortByName()
{
$this-&gt;sort = Iterator\SortableIterator::SORT_BY_NAME;

return $this;
}












public function sortByType()
{
$this-&gt;sort = Iterator\SortableIterator::SORT_BY_TYPE;

return $this;
}














public function sortByAccessedTime()
{
$this-&gt;sort = Iterator\SortableIterator::SORT_BY_ACCESSED_TIME;

return $this;
}
















public function sortByChangedTime()
{
$this-&gt;sort = Iterator\SortableIterator::SORT_BY_CHANGED_TIME;

return $this;
}














public function sortByModifiedTime()
{
$this-&gt;sort = Iterator\SortableIterator::SORT_BY_MODIFIED_TIME;

return $this;
}















public function filter(\Closure $closure)
{
$this-&gt;filters[] = $closure;

return $this;
}








public function followLinks()
{
$this-&gt;followLinks = true;

return $this;
}












public function in($dirs)
{
$dirs = (array) $dirs;

foreach ($dirs as $dir) {
if (!is_dir($dir)) {
throw new \InvalidArgumentException(sprintf('The "%s" directory does not exist.', $dir));
}
}

$this-&gt;dirs = array_merge($this-&gt;dirs, $dirs);

return $this;
}










public function getIterator()
{
if (0 === count($this-&gt;dirs)) {
throw new \LogicException('You must call the in() method before iterating over a Finder.');
}

if (1 === count($this-&gt;dirs) &amp;&amp; 0 === count($this-&gt;iterators)) {
return $this-&gt;searchInDirectory($this-&gt;dirs[0]);
}

$iterator = new \AppendIterator();
foreach ($this-&gt;dirs as $dir) {
$iterator-&gt;append($this-&gt;searchInDirectory($dir));
}

foreach ($this-&gt;iterators as $it) {
$iterator-&gt;append($it);
}

return $iterator;
}








public function append($iterator)
{
if ($iterator instanceof \IteratorAggregate) {
$this-&gt;iterators[] = $iterator-&gt;getIterator();
} elseif ($iterator instanceof \Iterator) {
$this-&gt;iterators[] = $iterator;
} elseif ($iterator instanceof \Traversable || is_array($iterator)) {
$it = new \ArrayIterator();
foreach ($iterator as $file) {
$it-&gt;append($file instanceof \SplFileInfo ? $file : new \SplFileInfo($file));
}
$this-&gt;iterators[] = $it;
} else {
throw new \InvalidArgumentException('Finder::append() method wrong argument type.');
}
}






public function count()
{
return iterator_count($this-&gt;getIterator());
}

private function searchInDirectory($dir)
{
$flags = \RecursiveDirectoryIterator::SKIP_DOTS;

if ($this-&gt;followLinks) {
$flags |= \RecursiveDirectoryIterator::FOLLOW_SYMLINKS;
}

$iterator = new \RecursiveIteratorIterator(
new Iterator\RecursiveDirectoryIterator($dir, $flags),
\RecursiveIteratorIterator::SELF_FIRST
);

if ($this-&gt;depths) {
$iterator = new Iterator\DepthRangeFilterIterator($iterator, $this-&gt;depths);
}

if ($this-&gt;mode) {
$iterator = new Iterator\FileTypeFilterIterator($iterator, $this-&gt;mode);
}

if (static::IGNORE_VCS_FILES === (static::IGNORE_VCS_FILES &amp; $this-&gt;ignore)) {
$this-&gt;exclude = array_merge($this-&gt;exclude, self::$vcsPatterns);
}

if (static::IGNORE_DOT_FILES === (static::IGNORE_DOT_FILES &amp; $this-&gt;ignore)) {
$this-&gt;notNames[] = '/^\..+/';
}

if ($this-&gt;exclude) {
$iterator = new Iterator\ExcludeDirectoryFilterIterator($iterator, $this-&gt;exclude);
}

if ($this-&gt;names || $this-&gt;notNames) {
$iterator = new Iterator\FilenameFilterIterator($iterator, $this-&gt;names, $this-&gt;notNames);
}

if ($this-&gt;contains || $this-&gt;notContains) {
$iterator = new Iterator\FilecontentFilterIterator($iterator, $this-&gt;contains, $this-&gt;notContains);
}

if ($this-&gt;sizes) {
$iterator = new Iterator\SizeRangeFilterIterator($iterator, $this-&gt;sizes);
}

if ($this-&gt;dates) {
$iterator = new Iterator\DateRangeFilterIterator($iterator, $this-&gt;dates);
}

if ($this-&gt;filters) {
$iterator = new Iterator\CustomFilterIterator($iterator, $this-&gt;filters);
}

if ($this-&gt;sort) {
$iteratorAggregate = new Iterator\SortableIterator($iterator, $this-&gt;sort);
$iterator = $iteratorAggregate-&gt;getIterator();
}

return $iterator;
}
}
&lt;?php










namespace Symfony\Component\Finder;























class Glob
{









public static function toRegex($glob, $strictLeadingDot = true, $strictWildcardSlash = true)
{
$firstByte = true;
$escaping = false;
$inCurlies = 0;
$regex = '';
$sizeGlob = strlen($glob);
for ($i = 0; $i &lt; $sizeGlob; $i++) {
$car = $glob[$i];
if ($firstByte) {
if ($strictLeadingDot &amp;&amp; '.' !== $car) {
$regex .= '(?=[^\.])';
}

$firstByte = false;
}

if ('/' === $car) {
$firstByte = true;
}

if ('.' === $car || '(' === $car || ')' === $car || '|' === $car || '+' === $car || '^' === $car || '$' === $car) {
$regex .= "\\$car";
} elseif ('*' === $car) {
$regex .= $escaping ? '\\*' : ($strictWildcardSlash ? '[^/]*' : '.*');
} elseif ('?' === $car) {
$regex .= $escaping ? '\\?' : ($strictWildcardSlash ? '[^/]' : '.');
} elseif ('{' === $car) {
$regex .= $escaping ? '\\{' : '(';
if (!$escaping) {
++$inCurlies;
}
} elseif ('}' === $car &amp;&amp; $inCurlies) {
$regex .= $escaping ? '}' : ')';
if (!$escaping) {
--$inCurlies;
}
} elseif (',' === $car &amp;&amp; $inCurlies) {
$regex .= $escaping ? ',' : '|';
} elseif ('\\' === $car) {
if ($escaping) {
$regex .= '\\\\';
$escaping = false;
} else {
$escaping = true;
}

continue;
} else {
$regex .= $car;
}
$escaping = false;
}

return '#^'.$regex.'$#';
}
}
&lt;?php










namespace Symfony\Component\Finder\Iterator;






class DepthRangeFilterIterator extends FilterIterator
{
private $minDepth = 0;







public function __construct(\RecursiveIteratorIterator $iterator, array $comparators)
{
$minDepth = 0;
$maxDepth = INF;
foreach ($comparators as $comparator) {
switch ($comparator-&gt;getOperator()) {
case '&gt;':
$minDepth = $comparator-&gt;getTarget() + 1;
break;
case '&gt;=':
$minDepth = $comparator-&gt;getTarget();
break;
case '&lt;':
$maxDepth = $comparator-&gt;getTarget() - 1;
break;
case '&lt;=':
$maxDepth = $comparator-&gt;getTarget();
break;
default:
$minDepth = $maxDepth = $comparator-&gt;getTarget();
}
}

$this-&gt;minDepth = $minDepth;
$iterator-&gt;setMaxDepth(INF === $maxDepth ? -1 : $maxDepth);

parent::__construct($iterator);
}






public function accept()
{
return $this-&gt;getInnerIterator()-&gt;getDepth() &gt;= $this-&gt;minDepth;
}
}
&lt;?php










namespace Symfony\Component\Finder\Iterator;






class SortableIterator implements \IteratorAggregate
{
const SORT_BY_NAME = 1;
const SORT_BY_TYPE = 2;
const SORT_BY_ACCESSED_TIME = 3;
const SORT_BY_CHANGED_TIME = 4;
const SORT_BY_MODIFIED_TIME = 5;

private $iterator;
private $sort;







public function __construct(\Traversable $iterator, $sort)
{
$this-&gt;iterator = $iterator;

if (self::SORT_BY_NAME === $sort) {
$this-&gt;sort = function ($a, $b) {
return strcmp($a-&gt;getRealpath(), $b-&gt;getRealpath());
};
} elseif (self::SORT_BY_TYPE === $sort) {
$this-&gt;sort = function ($a, $b) {
if ($a-&gt;isDir() &amp;&amp; $b-&gt;isFile()) {
return -1;
} elseif ($a-&gt;isFile() &amp;&amp; $b-&gt;isDir()) {
return 1;
}

return strcmp($a-&gt;getRealpath(), $b-&gt;getRealpath());
};
} elseif (self::SORT_BY_ACCESSED_TIME === $sort) {
$this-&gt;sort = function ($a, $b) {
return ($a-&gt;getATime() &gt; $b-&gt;getATime());
};
} elseif (self::SORT_BY_CHANGED_TIME === $sort) {
$this-&gt;sort = function ($a, $b) {
return ($a-&gt;getCTime() &gt; $b-&gt;getCTime());
};
} elseif (self::SORT_BY_MODIFIED_TIME === $sort) {
$this-&gt;sort = function ($a, $b) {
return ($a-&gt;getMTime() &gt; $b-&gt;getMTime());
};
} elseif (is_callable($sort)) {
$this-&gt;sort = $sort;
} else {
throw new \InvalidArgumentException('The SortableIterator takes a PHP callback or a valid built-in sort algorithm as an argument.');
}
}

public function getIterator()
{
$array = iterator_to_array($this-&gt;iterator, true);
uasort($array, $this-&gt;sort);

return new \ArrayIterator($array);
}
}
&lt;?php










namespace Symfony\Component\Finder\Iterator;







class FilecontentFilterIterator extends MultiplePcreFilterIterator
{





public function accept()
{
if (!$this-&gt;matchRegexps &amp;&amp; !$this-&gt;noMatchRegexps) {
return true;
}

$fileinfo = $this-&gt;current();

if ($fileinfo-&gt;isDir() || !$fileinfo-&gt;isReadable()) {
return false;
}

$content = $fileinfo-&gt;getContents();
if (!$content) {
return false;
}


 foreach ($this-&gt;noMatchRegexps as $regex) {
if (preg_match($regex, $content)) {
return false;
}
}


 $match = true;
if ($this-&gt;matchRegexps) {
$match = false;
foreach ($this-&gt;matchRegexps as $regex) {
if (preg_match($regex, $content)) {
return true;
}
}
}

return $match;
}








protected function toRegex($str)
{
return $this-&gt;isRegex($str) ? $str : '/'.preg_quote($str, '/').'/';
}
}
&lt;?php










namespace Symfony\Component\Finder\Iterator;






class SizeRangeFilterIterator extends FilterIterator
{
private $comparators = array();







public function __construct(\Iterator $iterator, array $comparators)
{
$this-&gt;comparators = $comparators;

parent::__construct($iterator);
}






public function accept()
{
$fileinfo = $this-&gt;current();
if (!$fileinfo-&gt;isFile()) {
return true;
}

$filesize = $fileinfo-&gt;getSize();
foreach ($this-&gt;comparators as $compare) {
if (!$compare-&gt;test($filesize)) {
return false;
}
}

return true;
}
}
&lt;?php










namespace Symfony\Component\Finder\Iterator;






class ExcludeDirectoryFilterIterator extends FilterIterator
{
private $patterns;







public function __construct(\Iterator $iterator, array $directories)
{
$this-&gt;patterns = array();
foreach ($directories as $directory) {
$this-&gt;patterns[] = '#(^|/)'.preg_quote($directory, '#').'(/|$)#';
}

parent::__construct($iterator);
}






public function accept()
{
$path = $this-&gt;isDir() ? $this-&gt;current()-&gt;getRelativePathname() : $this-&gt;current()-&gt;getRelativePath();
$path = strtr($path, '\\', '/');
foreach ($this-&gt;patterns as $pattern) {
if (preg_match($pattern, $path)) {
return false;
}
}

return true;
}
}
&lt;?php










namespace Symfony\Component\Finder\Iterator;








abstract class FilterIterator extends \FilterIterator
{






public function rewind()
{
$iterator = $this;
while ($iterator instanceof \OuterIterator) {
if ($iterator-&gt;getInnerIterator() instanceof \FilesystemIterator) {
$iterator-&gt;getInnerIterator()-&gt;next();
$iterator-&gt;getInnerIterator()-&gt;rewind();
}
$iterator = $iterator-&gt;getInnerIterator();
}

parent::rewind();
}
}
&lt;?php










namespace Symfony\Component\Finder\Iterator;






abstract class MultiplePcreFilterIterator extends FilterIterator
{
protected $matchRegexps;
protected $noMatchRegexps;








public function __construct(\Iterator $iterator, array $matchPatterns, array $noMatchPatterns)
{
$this-&gt;matchRegexps = array();
foreach ($matchPatterns as $pattern) {
$this-&gt;matchRegexps[] = $this-&gt;toRegex($pattern);
}

$this-&gt;noMatchRegexps = array();
foreach ($noMatchPatterns as $pattern) {
$this-&gt;noMatchRegexps[] = $this-&gt;toRegex($pattern);
}

parent::__construct($iterator);
}








protected function isRegex($str)
{
if (preg_match('/^(.{3,}?)[imsxuADU]*$/', $str, $m)) {
$start = substr($m[1], 0, 1);
$end = substr($m[1], -1);

if ($start === $end) {
return !preg_match('/[*?[:alnum:] \\\\]/', $start);
}

if ($start === '{' &amp;&amp; $end === '}') {
return true;
}
}

return false;
}








abstract protected function toRegex($str);
}
&lt;?php










namespace Symfony\Component\Finder\Iterator;









class CustomFilterIterator extends FilterIterator
{
private $filters = array();







public function __construct(\Iterator $iterator, array $filters)
{
foreach ($filters as $filter) {
if (!is_callable($filter)) {
throw new \InvalidArgumentException('Invalid PHP callback.');
}
}
$this-&gt;filters = $filters;

parent::__construct($iterator);
}






public function accept()
{
$fileinfo = $this-&gt;current();

foreach ($this-&gt;filters as $filter) {
if (false === call_user_func($filter, $fileinfo)) {
return false;
}
}

return true;
}
}
&lt;?php










namespace Symfony\Component\Finder\Iterator;

use Symfony\Component\Finder\Glob;






class FilenameFilterIterator extends MultiplePcreFilterIterator
{






public function accept()
{
$filename = $this-&gt;current()-&gt;getFilename();


 foreach ($this-&gt;noMatchRegexps as $regex) {
if (preg_match($regex, $filename)) {
return false;
}
}


 $match = true;
if ($this-&gt;matchRegexps) {
$match = false;
foreach ($this-&gt;matchRegexps as $regex) {
if (preg_match($regex, $filename)) {
return true;
}
}
}

return $match;
}











protected function toRegex($str)
{
return $this-&gt;isRegex($str) ? $str : Glob::toRegex($str);
}
}
&lt;?php










namespace Symfony\Component\Finder\Iterator;






class DateRangeFilterIterator extends FilterIterator
{
private $comparators = array();







public function __construct(\Iterator $iterator, array $comparators)
{
$this-&gt;comparators = $comparators;

parent::__construct($iterator);
}






public function accept()
{
$fileinfo = $this-&gt;current();

if (!$fileinfo-&gt;isFile()) {
return true;
}

$filedate = $fileinfo-&gt;getMTime();
foreach ($this-&gt;comparators as $compare) {
if (!$compare-&gt;test($filedate)) {
return false;
}
}

return true;
}
}
&lt;?php










namespace Symfony\Component\Finder\Iterator;






class FileTypeFilterIterator extends FilterIterator
{
const ONLY_FILES = 1;
const ONLY_DIRECTORIES = 2;

private $mode;







public function __construct(\Iterator $iterator, $mode)
{
$this-&gt;mode = $mode;

parent::__construct($iterator);
}






public function accept()
{
$fileinfo = $this-&gt;current();
if (self::ONLY_DIRECTORIES === (self::ONLY_DIRECTORIES &amp; $this-&gt;mode) &amp;&amp; $fileinfo-&gt;isFile()) {
return false;
} elseif (self::ONLY_FILES === (self::ONLY_FILES &amp; $this-&gt;mode) &amp;&amp; $fileinfo-&gt;isDir()) {
return false;
}

return true;
}
}
&lt;?php










namespace Symfony\Component\Finder\Iterator;

use Symfony\Component\Finder\SplFileInfo;






class RecursiveDirectoryIterator extends \RecursiveDirectoryIterator
{
public function __construct($path, $flags)
{
if ($flags &amp; (self::CURRENT_AS_PATHNAME | self::CURRENT_AS_SELF)) {
throw new \RuntimeException('This iterator only support returning current as fileinfo.');
}

parent::__construct($path, $flags);
}






public function current()
{
return new SplFileInfo(parent::current()-&gt;getPathname(), $this-&gt;getSubPath(), $this-&gt;getSubPathname());
}
}
&lt;?php










namespace Symfony\Component\Finder\Comparator;






class DateComparator extends Comparator
{








public function __construct($test)
{
if (!preg_match('#^\s*(==|!=|[&lt;&gt;]=?|after|since|before|until)?\s*(.+?)\s*$#i', $test, $matches)) {
throw new \InvalidArgumentException(sprintf('Don\'t understand "%s" as a date test.', $test));
}

try {
$date = new \DateTime($matches[2]);
$target = $date-&gt;format('U');
} catch (\Exception $e) {
throw new \InvalidArgumentException(sprintf('"%s" is not a valid date.', $matches[2]));
}

$operator = isset($matches[1]) ? $matches[1] : '==';
if ('since' === $operator || 'after' === $operator) {
$operator = '&gt;';
}

if ('until' === $operator || 'before' === $operator) {
$operator = '&lt;';
}

$this-&gt;setOperator($operator);
$this-&gt;setTarget($target);
}
}
&lt;?php










namespace Symfony\Component\Finder\Comparator;























class NumberComparator extends Comparator
{







public function __construct($test)
{
if (!preg_match('#^\s*(==|!=|[&lt;&gt;]=?)?\s*([0-9\.]+)\s*([kmg]i?)?\s*$#i', $test, $matches)) {
throw new \InvalidArgumentException(sprintf('Don\'t understand "%s" as a number test.', $test));
}

$target = $matches[2];
if (!is_numeric($target)) {
throw new \InvalidArgumentException(sprintf('Invalid number "%s".', $target));
}
if (isset($matches[3])) {

 switch (strtolower($matches[3])) {
case 'k':
$target *= 1000;
break;
case 'ki':
$target *= 1024;
break;
case 'm':
$target *= 1000000;
break;
case 'mi':
$target *= 1024*1024;
break;
case 'g':
$target *= 1000000000;
break;
case 'gi':
$target *= 1024*1024*1024;
break;
}
}

$this-&gt;setTarget($target);
$this-&gt;setOperator(isset($matches[1]) ? $matches[1] : '==');
}
}
&lt;?php










namespace Symfony\Component\Finder\Comparator;






class Comparator
{
private $target;
private $operator = '==';






public function getTarget()
{
return $this-&gt;target;
}






public function setTarget($target)
{
$this-&gt;target = $target;
}






public function getOperator()
{
return $this-&gt;operator;
}






public function setOperator($operator)
{
if (!$operator) {
$operator = '==';
}

if (!in_array($operator, array('&gt;', '&lt;', '&gt;=', '&lt;=', '==', '!='))) {
throw new \InvalidArgumentException(sprintf('Invalid operator "%s".', $operator));
}

$this-&gt;operator = $operator;
}






public function test($test)
{
switch ($this-&gt;operator) {
case '&gt;':
return $test &gt; $this-&gt;target;
case '&gt;=':
return $test &gt;= $this-&gt;target;
case '&lt;':
return $test &lt; $this-&gt;target;
case '&lt;=':
return $test &lt;= $this-&gt;target;
case '!=':
return $test != $this-&gt;target;
}

return $test == $this-&gt;target;
}
}
&lt;?php










namespace Symfony\Component\Finder;






class SplFileInfo extends \SplFileInfo
{
private $relativePath;
private $relativePathname;








public function __construct($file, $relativePath, $relativePathname)
{
parent::__construct($file);
$this-&gt;relativePath = $relativePath;
$this-&gt;relativePathname = $relativePathname;
}






public function getRelativePath()
{
return $this-&gt;relativePath;
}






public function getRelativePathname()
{
return $this-&gt;relativePathname;
}






public function getContents()
{
$file = new \SplFileObject($this-&gt;getRealpath(), 'rb');
ob_start();
$file-&gt;fpassthru();

return ob_get_clean();
}
}
&lt;?php










namespace Seld\JsonLint;

class Undefined
{
}
&lt;?php










namespace Seld\JsonLint;

use stdClass;














class JsonParser
{
private $stack;
private $vstack; 
 private $lstack; 

private $yy;
private $symbols = array(
'error' =&gt; 2,
'JSONString' =&gt; 3,
'STRING' =&gt; 4,
'JSONNumber' =&gt; 5,
'NUMBER' =&gt; 6,
'JSONNullLiteral' =&gt; 7,
'NULL' =&gt; 8,
'JSONBooleanLiteral' =&gt; 9,
'TRUE' =&gt; 10,
'FALSE' =&gt; 11,
'JSONText' =&gt; 12,
'JSONValue' =&gt; 13,
'EOF' =&gt; 14,
'JSONObject' =&gt; 15,
'JSONArray' =&gt; 16,
'{' =&gt; 17,
'}' =&gt; 18,
'JSONMemberList' =&gt; 19,
'JSONMember' =&gt; 20,
':' =&gt; 21,
',' =&gt; 22,
'[' =&gt; 23,
']' =&gt; 24,
'JSONElementList' =&gt; 25,
'$accept' =&gt; 0,
'$end' =&gt; 1,
);

private $terminals_ = array(
2 =&gt; "error",
4 =&gt; "STRING",
6 =&gt; "NUMBER",
8 =&gt; "NULL",
10 =&gt; "TRUE",
11 =&gt; "FALSE",
14 =&gt; "EOF",
17 =&gt; "{",
18 =&gt; "}",
21 =&gt; ":",
22 =&gt; ",",
23 =&gt; "[",
24 =&gt; "]",
);

private $productions_ = array(
0,
array(3, 1),
array(5, 1),
array(7, 1),
array(9, 1),
array(9, 1),
array(12, 2),
array(13, 1),
array(13, 1),
array(13, 1),
array(13, 1),
array(13, 1),
array(13, 1),
array(15, 2),
array(15, 3),
array(20, 3),
array(19, 1),
array(19, 3),
array(16, 2),
array(16, 3),
array(25, 1),
array(25, 3)
);

private $table = array(array(3 =&gt; 5, 4 =&gt; array(1,12), 5 =&gt; 6, 6 =&gt; array(1,13), 7 =&gt; 3, 8 =&gt; array(1,9), 9 =&gt; 4, 10 =&gt; array(1,10), 11 =&gt; array(1,11), 12 =&gt; 1, 13 =&gt; 2, 15 =&gt; 7, 16 =&gt; 8, 17 =&gt; array(1,14), 23 =&gt; array(1,15)), array( 1 =&gt; array(3)), array( 14 =&gt; array(1,16)), array( 14 =&gt; array(2,7), 18 =&gt; array(2,7), 22 =&gt; array(2,7), 24 =&gt; array(2,7)), array( 14 =&gt; array(2,8), 18 =&gt; array(2,8), 22 =&gt; array(2,8), 24 =&gt; array(2,8)), array( 14 =&gt; array(2,9), 18 =&gt; array(2,9), 22 =&gt; array(2,9), 24 =&gt; array(2,9)), array( 14 =&gt; array(2,10), 18 =&gt; array(2,10), 22 =&gt; array(2,10), 24 =&gt; array(2,10)), array( 14 =&gt; array(2,11), 18 =&gt; array(2,11), 22 =&gt; array(2,11), 24 =&gt; array(2,11)), array( 14 =&gt; array(2,12), 18 =&gt; array(2,12), 22 =&gt; array(2,12), 24 =&gt; array(2,12)), array( 14 =&gt; array(2,3), 18 =&gt; array(2,3), 22 =&gt; array(2,3), 24 =&gt; array(2,3)), array( 14 =&gt; array(2,4), 18 =&gt; array(2,4), 22 =&gt; array(2,4), 24 =&gt; array(2,4)), array( 14 =&gt; array(2,5), 18 =&gt; array(2,5), 22 =&gt; array(2,5), 24 =&gt; array(2,5)), array( 14 =&gt; array(2,1), 18 =&gt; array(2,1), 21 =&gt; array(2,1), 22 =&gt; array(2,1), 24 =&gt; array(2,1)), array( 14 =&gt; array(2,2), 18 =&gt; array(2,2), 22 =&gt; array(2,2), 24 =&gt; array(2,2)), array( 3 =&gt; 20, 4 =&gt; array(1,12), 18 =&gt; array(1,17), 19 =&gt; 18, 20 =&gt; 19 ), array( 3 =&gt; 5, 4 =&gt; array(1,12), 5 =&gt; 6, 6 =&gt; array(1,13), 7 =&gt; 3, 8 =&gt; array(1,9), 9 =&gt; 4, 10 =&gt; array(1,10), 11 =&gt; array(1,11), 13 =&gt; 23, 15 =&gt; 7, 16 =&gt; 8, 17 =&gt; array(1,14), 23 =&gt; array(1,15), 24 =&gt; array(1,21), 25 =&gt; 22 ), array( 1 =&gt; array(2,6)), array( 14 =&gt; array(2,13), 18 =&gt; array(2,13), 22 =&gt; array(2,13), 24 =&gt; array(2,13)), array( 18 =&gt; array(1,24), 22 =&gt; array(1,25)), array( 18 =&gt; array(2,16), 22 =&gt; array(2,16)), array( 21 =&gt; array(1,26)), array( 14 =&gt; array(2,18), 18 =&gt; array(2,18), 22 =&gt; array(2,18), 24 =&gt; array(2,18)), array( 22 =&gt; array(1,28), 24 =&gt; array(1,27)), array( 22 =&gt; array(2,20), 24 =&gt; array(2,20)), array( 14 =&gt; array(2,14), 18 =&gt; array(2,14), 22 =&gt; array(2,14), 24 =&gt; array(2,14)), array( 3 =&gt; 20, 4 =&gt; array(1,12), 20 =&gt; 29 ), array( 3 =&gt; 5, 4 =&gt; array(1,12), 5 =&gt; 6, 6 =&gt; array(1,13), 7 =&gt; 3, 8 =&gt; array(1,9), 9 =&gt; 4, 10 =&gt; array(1,10), 11 =&gt; array(1,11), 13 =&gt; 30, 15 =&gt; 7, 16 =&gt; 8, 17 =&gt; array(1,14), 23 =&gt; array(1,15)), array( 14 =&gt; array(2,19), 18 =&gt; array(2,19), 22 =&gt; array(2,19), 24 =&gt; array(2,19)), array( 3 =&gt; 5, 4 =&gt; array(1,12), 5 =&gt; 6, 6 =&gt; array(1,13), 7 =&gt; 3, 8 =&gt; array(1,9), 9 =&gt; 4, 10 =&gt; array(1,10), 11 =&gt; array(1,11), 13 =&gt; 31, 15 =&gt; 7, 16 =&gt; 8, 17 =&gt; array(1,14), 23 =&gt; array(1,15)), array( 18 =&gt; array(2,17), 22 =&gt; array(2,17)), array( 18 =&gt; array(2,15), 22 =&gt; array(2,15)), array( 22 =&gt; array(2,21), 24 =&gt; array(2,21)),
);

private $defaultActions = array(
16 =&gt; array(2, 6)
);





public function lint($input)
{
try {
$this-&gt;parse($input);
} catch (ParsingException $e) {
return $e;
}
}






public function parse($input)
{
$this-&gt;stack = array(0);
$this-&gt;vstack = array(null);
$this-&gt;lstack = array();

$yytext = '';
$yylineno = 0;
$yyleng = 0;
$recovering = 0;
$TERROR = 2;
$EOF = 1;

$this-&gt;lexer = new Lexer();
$this-&gt;lexer-&gt;setInput($input);

$yyloc = $this-&gt;lexer-&gt;yylloc;
$this-&gt;lstack[] = $yyloc;

$symbol = null;
$preErrorSymbol = null;
$state = null;
$action = null;
$a = null;
$r = null;
$yyval = new stdClass;
$p = null;
$len = null;
$newState = null;
$expected = null;
$errStr = null;

while (true) {

 $state = $this-&gt;stack[count($this-&gt;stack)-1];


 if (isset($this-&gt;defaultActions[$state])) {
$action = $this-&gt;defaultActions[$state];
} else {
if ($symbol == null) {
$symbol = $this-&gt;lex();
}

 $action = isset($this-&gt;table[$state][$symbol]) ? $this-&gt;table[$state][$symbol] : false;
}


 if (!$action || !$action[0]) {
if (!$recovering) {

 $expected = array();
foreach ($this-&gt;table[$state] as $p =&gt; $ignore) {
if (isset($this-&gt;terminals_[$p]) &amp;&amp; $p &gt; 2) {
$expected[] = "'" . $this-&gt;terminals_[$p] . "'";
}
}

$errStr = 'Parse error on line ' . ($yylineno+1) . ":\n" . $this-&gt;lexer-&gt;showPosition() . "\nExpected one of: " . implode(', ', $expected);
$this-&gt;parseError($errStr, array(
'text' =&gt; $this-&gt;lexer-&gt;match,
'token' =&gt; !empty($this-&gt;terminals_[$symbol]) ? $this-&gt;terminals_[$symbol] : $symbol,
'line' =&gt; $this-&gt;lexer-&gt;yylineno,
'loc' =&gt; $yyloc,
'expected' =&gt; $expected,
));
}


 if ($recovering == 3) {
if ($symbol == $EOF) {
throw new ParsingException($errStr ?: 'Parsing halted.');
}


 $yyleng = $this-&gt;lexer-&gt;yyleng;
$yytext = $this-&gt;lexer-&gt;yytext;
$yylineno = $this-&gt;lexer-&gt;yylineno;
$yyloc = $this-&gt;lexer-&gt;yylloc;
$symbol = $this-&gt;lex();
}


 while (true) {

 if (array_key_exists($TERROR, $this-&gt;table[$state])) {
break;
}
if ($state == 0) {
throw new ParsingException($errStr ?: 'Parsing halted.');
}
$this-&gt;popStack(1);
$state = $this-&gt;stack[count($this-&gt;stack)-1];
}

$preErrorSymbol = $symbol; 
 $symbol = $TERROR; 
 $state = $this-&gt;stack[count($this-&gt;stack)-1];
$action = isset($this-&gt;table[$state][$TERROR]) ? $this-&gt;table[$state][$TERROR] : false;
$recovering = 3; 
 }


 if (is_array($action[0]) &amp;&amp; count($action) &gt; 1) {
throw new ParsingException('Parse Error: multiple actions possible at state: ' . $state . ', token: ' . $symbol);
}

switch ($action[0]) {
case 1: 
 $this-&gt;stack[] = $symbol;
$this-&gt;vstack[] = $this-&gt;lexer-&gt;yytext;
$this-&gt;lstack[] = $this-&gt;lexer-&gt;yylloc;
$this-&gt;stack[] = $action[1]; 
 $symbol = null;
if (!$preErrorSymbol) { 
 $yyleng = $this-&gt;lexer-&gt;yyleng;
$yytext = $this-&gt;lexer-&gt;yytext;
$yylineno = $this-&gt;lexer-&gt;yylineno;
$yyloc = $this-&gt;lexer-&gt;yylloc;
if ($recovering &gt; 0) {
$recovering--;
}
} else { 
 $symbol = $preErrorSymbol;
$preErrorSymbol = null;
}
break;

case 2: 
 $len = $this-&gt;productions_[$action[1]][1];


 $yyval-&gt;token = $this-&gt;vstack[count($this-&gt;vstack) - $len]; 
 
 $yyval-&gt;store = array( 
 'first_line' =&gt; $this-&gt;lstack[count($this-&gt;lstack) - ($len ?: 1)]['first_line'],
'last_line' =&gt; $this-&gt;lstack[count($this-&gt;lstack) - 1]['last_line'],
'first_column' =&gt; $this-&gt;lstack[count($this-&gt;lstack) - ($len ?: 1)]['first_column'],
'last_column' =&gt; $this-&gt;lstack[count($this-&gt;lstack) - 1]['last_column'],
);
$r = $this-&gt;performAction($yyval, $yytext, $yyleng, $yylineno, $action[1], $this-&gt;vstack, $this-&gt;lstack);

if (!$r instanceof Undefined) {
return $r;
}

if ($len) {
$this-&gt;popStack($len);
}

$this-&gt;stack[] = $this-&gt;productions_[$action[1]][0]; 
 $this-&gt;vstack[] = $yyval-&gt;token;
$this-&gt;lstack[] = $yyval-&gt;store;
$newState = $this-&gt;table[$this-&gt;stack[count($this-&gt;stack)-2]][$this-&gt;stack[count($this-&gt;stack)-1]];
$this-&gt;stack[] = $newState;
break;

case 3: 
 return true;
}
}
return true;
}

protected function parseError($str, $hash)
{
throw new ParsingException($str, $hash);
}


 
 
 private function performAction(stdClass $yyval, $yytext, $yyleng, $yylineno, $yystate, &amp;$tokens) {

 $len = count($tokens) - 1;
switch ($yystate) {
case 1:
$yytext =preg_replace_callback('{(?:\\\\["bfnrt/\\\\]|\\\\u[a-fA-F0-9]{4})}', array($this, 'stringInterpolation'), $yytext);
$yyval-&gt;token = $yytext;
break;
case 2:
if (strpos($yytext, 'e') !== false || strpos($yytext, 'E') !== false) {
$yyval-&gt;token = floatval($yytext);
} else {
$yyval-&gt;token = strpos($yytext, '.') === false ? intval($yytext) : floatval($yytext);
}
break;
case 3:
$yyval-&gt;token = null;
break;
case 4:
$yyval-&gt;token = true;
break;
case 5:
$yyval-&gt;token = false;
break;
case 6:
return $yyval-&gt;token = $tokens[$len-1];
case 13:
$yyval-&gt;token = new stdClass;
break;
case 14:
$yyval-&gt;token = $tokens[$len-1];
break;
case 15:
$yyval-&gt;token = array($tokens[$len-2], $tokens[$len]);
break;
case 16:
$yyval-&gt;token = new stdClass;
$property = $tokens[$len][0] === '' ? '_empty_' : $tokens[$len][0];
$yyval-&gt;token-&gt;$property = $tokens[$len][1];
break;
case 17:
$yyval-&gt;token = $tokens[$len-2];
$tokens[$len-2]-&gt;{$tokens[$len][0]} = $tokens[$len][1];
break;
case 18:
$yyval-&gt;token = array();
break;
case 19:
$yyval-&gt;token = $tokens[$len-1];
break;
case 20:
$yyval-&gt;token = array($tokens[$len]);
break;
case 21:
$tokens[$len-2][] = $tokens[$len];
$yyval-&gt;token = $tokens[$len-2];
break;
}

return new Undefined();
}

private function stringInterpolation($match)
{
switch ($match[0]) {
case '\\\\':
return '\\';
case '\"':
return '"';
case '\b':
return chr(8);
case '\f':
return chr(12);
case '\n':
return "\n";
case '\r':
return "\r";
case '\t':
return "\t";
case '\/':
return "/";
default:
return html_entity_decode('&amp;#x'.ltrim(substr($match[0], 2), '0').';', 0, 'UTF-8');
}
}

private function popStack($n)
{
$this-&gt;stack = array_slice($this-&gt;stack, 0, - (2 * $n));
$this-&gt;vstack = array_slice($this-&gt;vstack, 0, - $n);
$this-&gt;lstack = array_slice($this-&gt;lstack, 0, - $n);
}

private function lex()
{
$token = $this-&gt;lexer-&gt;lex() ?: 1; 
 
 if (!is_numeric($token)) {
$token = isset($this-&gt;symbols[$token]) ? $this-&gt;symbols[$token] : $token;
}
return $token;
}
}
&lt;?php










namespace Seld\JsonLint;






class Lexer
{
private $EOF = 1;
private $rules = array(
0 =&gt; '/^\s+/',
1 =&gt; '/^-?([0-9]|[1-9][0-9]+)(\.[0-9]+)?([eE][+-]?[0-9]+)?\b/',
2 =&gt; '{^"(\\\\["bfnrt/\\\\]|\\\\u[a-fA-F0-9]{4}|[^\0-\x09\x0a-\x1f\\\\"])*"}',
3 =&gt; '/^\{/',
4 =&gt; '/^\}/',
5 =&gt; '/^\[/',
6 =&gt; '/^\]/',
7 =&gt; '/^,/',
8 =&gt; '/^:/',
9 =&gt; '/^true\b/',
10 =&gt; '/^false\b/',
11 =&gt; '/^null\b/',
12 =&gt; '/^$/',
13 =&gt; '/^./',
);

private $conditions = array(
"INITIAL" =&gt; array(
"rules" =&gt; array(0,1,2,3,4,5,6,7,8,9,10,11,12,13),
"inclusive" =&gt; true,
),
);

public function lex()
{
$r = $this-&gt;next();
if (!$r instanceof Undefined) {
return $r;
}
return $this-&gt;lex();
}

public function setInput($input)
{
$this-&gt;_input = $input;
$this-&gt;_more = $this-&gt;_less = $this-&gt;done = false;
$this-&gt;yylineno = $this-&gt;yyleng = 0;
$this-&gt;yytext = $this-&gt;matched = $this-&gt;match = '';
$this-&gt;conditionStack = array('INITIAL');
$this-&gt;yylloc = array('first_line' =&gt; 1, 'first_column' =&gt; 0, 'last_line' =&gt; 1, 'last_column' =&gt; 0);

return $this;
}

public function showPosition()
{
$pre = $this-&gt;pastInput();
$c = str_repeat('-', strlen($pre)); 
 return $pre . $this-&gt;upcomingInput() . "\n" . $c . "^";
}

protected function parseError($str, $hash)
{
throw new \Exception($str);
}

private function input()
{
$ch = $this-&gt;_input[0];
$this-&gt;yytext += $ch;
$this-&gt;yyleng++;
$this-&gt;match += $ch;
$this-&gt;matched += $ch;
if (strpos($ch, "\n") !== false) {
$this-&gt;yylineno++;
}
array_shift($this-&gt;_input); 
 return $ch;
}

private function unput($ch)
{
$this-&gt;_input = $ch . $this-&gt;_input;
return $this;
}

private function more()
{
$this-&gt;_more = true;
return $this;
}

private function pastInput()
{
$past = substr($this-&gt;matched, 0, strlen($this-&gt;matched) - strlen($this-&gt;match));
return (strlen($past) &gt; 20 ? '...' : '') . str_replace("\n", '', substr($past, -20));
}

private function upcomingInput()
{
$next = $this-&gt;match;
if (strlen($next) &lt; 20) {
$next += substr($this-&gt;_input, 0, 20 - strlen($next));
}
return str_replace("\n", '', substr($next, 0, 20) . (strlen($next) &gt; 20 ? '...' : ''));
}

private function next()
{
if ($this-&gt;done) {
return $this-&gt;EOF;
}
if (!$this-&gt;_input) {
$this-&gt;done = true;
}

$token = null;
$match = null;
$col = null;
$lines = null;

if (!$this-&gt;_more) {
$this-&gt;yytext = '';
$this-&gt;match = '';
}

$rules = $this-&gt;_currentRules();
$rulesLen = count($rules);

for ($i=0; $i &lt; $rulesLen; $i++) {
if (preg_match($this-&gt;rules[$rules[$i]], $this-&gt;_input, $match)) {
preg_match_all('/\n.*/', $match[0], $lines);
$lines = $lines[0];
if ($lines) {
$this-&gt;yylineno += count($lines);
}

$this-&gt;yylloc = array(
'first_line' =&gt; $this-&gt;yylloc['last_line'],
'last_line' =&gt; $this-&gt;yylineno+1,
'first_column' =&gt; $this-&gt;yylloc['last_column'],
'last_column' =&gt; $lines ? strlen($lines[count($lines) - 1]) - 1 : $this-&gt;yylloc['last_column'] + strlen($match[0]),
);
$this-&gt;yytext .= $match[0];
$this-&gt;match .= $match[0];
$this-&gt;matches = $match;
$this-&gt;yyleng = strlen($this-&gt;yytext);
$this-&gt;_more = false;
$this-&gt;_input = substr($this-&gt;_input, strlen($match[0]));
$this-&gt;matched .= $match[0];
$token = $this-&gt;performAction($rules[$i], $this-&gt;conditionStack[count($this-&gt;conditionStack)-1]);
if ($token) {
return $token;
}
return new Undefined();
}
}

if ($this-&gt;_input === "") {
return $this-&gt;EOF;
}

$this-&gt;parseError(
'Lexical error on line ' . ($this-&gt;yylineno+1) . ". Unrecognized text.\n" . $this-&gt;showPosition(),
array(
'text' =&gt; "",
'token' =&gt; null,
'line' =&gt; $this-&gt;yylineno,
)
);
}

private function begin($condition)
{
$this-&gt;conditionStack[] = $condition;
}

private function popState()
{
return array_pop($this-&gt;conditionStack);
}

private function _currentRules()
{
return $this-&gt;conditions[$this-&gt;conditionStack[count($this-&gt;conditionStack)-1]]['rules'];
}

private function performAction($avoiding_name_collisions, $YY_START)
{
$YYSTATE = $YY_START;
switch ($avoiding_name_collisions) {
case 0:
break;
case 1:
return 6;
break;
case 2:
$this-&gt;yytext = substr($this-&gt;yytext, 1, $this-&gt;yyleng-2);
return 4;
case 3:
return 17;
case 4:
return 18;
case 5:
return 23;
case 6:
return 24;
case 7:
return 22;
case 8:
return 21;
case 9:
return 10;
case 10:
return 11;
case 11:
return 8;
case 12:
return 14;
case 13:
return 'INVALID';
}
}
}
&lt;?php










namespace Seld\JsonLint;

class ParsingException extends \Exception
{
protected $details;

public function __construct($message, $details = array())
{
$this-&gt;details = $details;
parent::__construct($message);
}

public function getDetails()
{
return $this-&gt;details;
}
}&lt;?php

namespace JsonSchema\Constraints;







class Undefined extends Constraint
{



function check($value, $schema = null, $path = null, $i = null)
{
if (!is_object($schema)) {
return;
}

$path = $this-&gt;incrementPath($path, $i);


 $this-&gt;validateCommonProperties($value, $schema, $path);


 $this-&gt;validateTypes($value, $schema, $path, $i);


}









public function validateTypes($value, $schema = null, $path = null, $i = null)
{

 if (is_array($value)) {
$this-&gt;checkArray($value, $schema, $path, $i);
}


 if (is_object($value) &amp;&amp; isset($schema-&gt;properties)) {
$this-&gt;checkObject($value, $schema-&gt;properties, $path, isset($schema-&gt;additionalProperties) ? $schema-&gt;additionalProperties : null);
}


 if (is_string($value)) {
$this-&gt;checkString($value, $schema, $path, $i);
}


 if (is_numeric($value)) {
$this-&gt;checkNumber($value, $schema, $path, $i);
}


 if (isset($schema-&gt;enum)) {
$this-&gt;checkEnum($value, $schema, $path, $i);
}
}









protected function validateCommonProperties($value, $schema = null, $path = null, $i = null)
{

 if (isset($schema-&gt;extends)) {
$this-&gt;checkUndefined($value, $schema-&gt;extends, $path, $i);
}


 if (is_object($value) &amp;&amp; $value instanceOf Undefined) {
if (isset($schema-&gt;required) &amp;&amp; $schema-&gt;required) {
$this-&gt;addError($path, "is missing and it is required");
}
} else {
$this-&gt;checkType($value, $schema, $path);
}


 if (isset($schema-&gt;disallow)) {
$initErrors = $this-&gt;getErrors();

$this-&gt;checkUndefined($value, $schema-&gt;disallow, $path);


 if (count($this-&gt;getErrors()) == count($initErrors)) {
$this-&gt;addError($path, " disallowed value was matched");
} else {
$this-&gt;errors = $initErrors;
}
}
}
}&lt;?php

namespace JsonSchema\Constraints;







class Type extends Constraint
{



function check($value = null, $schema = null, $path = null, $i = null)
{
$type = isset($schema-&gt;type) ? $schema-&gt;type : null;
$isValid = true;

if (is_array($type)) {

 $validatedOneType = false;
$errors = array();
foreach ($type as $tp) {
$validator = new Type($this-&gt;checkMode);
$subSchema = new \stdClass();
$subSchema-&gt;type = $tp;
$validator-&gt;check($value, $subSchema, $path, null);
$error = $validator-&gt;getErrors();

if (!count($error)) {
$validatedOneType = true;
break;
} else {
$errors = $error;
}
}
if (!$validatedOneType) {
return $this-&gt;addErrors($errors);
}
} elseif (is_object($type)) {
$this-&gt;checkUndefined($value, $type, $path);
} else {
$isValid = $this-&gt;validateType($value, $type);
}

if ($isValid === false) {
$this-&gt;addError($path, gettype($value) . " value found, but a " . $type . " is required");
}
}









protected function validateType($value, $type)
{

 if (!$type) {
return true;
}

switch ($type) {
case 'integer' :
return (integer)$value == $value ? true : is_int($value);
case 'number' :
return is_numeric($value);
case 'boolean' :
return is_bool($value);
case 'object' :
return is_object($value);

 case 'array' :
return is_array($value);
case 'string' :
return is_string($value);
case 'null' :
return is_null($value);
case 'any' :
return true;
default:
throw new \InvalidArgumentException((is_object($value) ? 'object' : $value) . ' is a invalid type for ' . $type);
}
}
}&lt;?php

namespace JsonSchema\Constraints;







class Schema extends Constraint
{



public function check($element, $schema = null, $path = null, $i = null)
{
if ($schema !== null) {

 $this-&gt;checkUndefined($element, $schema, '', '');
} elseif (isset($element-&gt;{$this-&gt;inlineSchemaProperty})) {

 $this-&gt;checkUndefined($element, $element-&gt;{$this-&gt;inlineSchemaProperty}, '', '');
} else {
throw new \InvalidArgumentException('no schema found to verify against');
}
}
}&lt;?php

namespace JsonSchema\Constraints;







class Number extends Constraint
{



public function check($element, $schema = null, $path = null, $i = null)
{

 if (isset($schema-&gt;minimum) &amp;&amp; $element &lt; $schema-&gt;minimum) {
$this-&gt;addError($path, "must have a minimum value of " . $schema-&gt;minimum);
}


 if (isset($schema-&gt;maximum) &amp;&amp; $element &gt; $schema-&gt;maximum) {
$this-&gt;addError($path, "must have a maximum value of " . $schema-&gt;maximum);
}


 if (isset($schema-&gt;divisibleBy) &amp;&amp; $element % $schema-&gt;divisibleBy != 0) {
$this-&gt;addError($path, "is not divisible by " . $schema-&gt;divisibleBy);
}
}
}&lt;?php

namespace JsonSchema\Constraints;







class Object extends Constraint
{



function check($element, $definition = null, $path = null, $additionalProp = null)
{

 $this-&gt;validateDefinition($element, $definition, $path);


 $this-&gt;validateElement($element, $definition, $path, $additionalProp);
}









public function validateElement($element, $objectDefinition = null, $path = null, $additionalProp = null)
{
foreach ($element as $i =&gt; $value) {

$property = $this-&gt;getProperty($element, $i, new Undefined());
$definition = $this-&gt;getProperty($objectDefinition, $i);


 if ($this-&gt;getProperty($definition, 'required') &amp;&amp; !$property) {
$this-&gt;addError($path, "the property " . $i . " is required");
}


 if ($additionalProp === false &amp;&amp; $this-&gt;inlineSchemaProperty !== $i &amp;&amp; !$definition) {
$this-&gt;addError($path, "The property " . $i . " is not defined and the definition does not allow additional properties");
}


 if ($additionalProp &amp;&amp; !$definition) {
$this-&gt;checkUndefined($value, $additionalProp, $path, $i);
}


 $require = $this-&gt;getProperty($definition, 'requires');
if ($require &amp;&amp; !$this-&gt;getProperty($element, $require)) {
$this-&gt;addError($path, "the presence of the property " . $i . " requires that " . $require . " also be present");
}


 $this-&gt;checkUndefined($value, $definition ? : new \stdClass(), $path, $i);
}
}








public function validateDefinition($element, $objectDefinition = null, $path = null)
{
foreach ($objectDefinition as $i =&gt; $value) {
$property = $this-&gt;getProperty($element, $i, new Undefined());
$definition = $this-&gt;getProperty($objectDefinition, $i);
$this-&gt;checkUndefined($property, $definition, $path, $i);
}
}









protected function getProperty($element, $property, $fallback = null)
{
if (is_array($element) ) {
return array_key_exists($property, $element) ? $element[$property] : $fallback;
} else {
return isset($element-&gt;$property) ? $element-&gt;$property : $fallback;
}
}
}&lt;?php

namespace JsonSchema\Constraints;






interface ConstraintInterface
{





function getErrors();






function addErrors(array $errors);







function addError($path, $message);






function isValid();










function check($value, $schema = null, $path = null, $i = null);
}&lt;?php

namespace JsonSchema\Constraints;







abstract class Constraint implements ConstraintInterface
{
protected $checkMode = self::CHECK_MODE_NORMAL;
protected $errors = array();
protected $inlineSchemaProperty = '$schema';

const CHECK_MODE_NORMAL = 1;
const CHECK_MODE_TYPE_CAST = 2;




public function __construct($checkMode = self::CHECK_MODE_NORMAL)
{
$this-&gt;checkMode = $checkMode;
}




public function addError($path, $message)
{
$this-&gt;errors[] = array(
'property' =&gt; $path,
'message' =&gt; $message
);
}




public function addErrors(array $errors)
{
$this-&gt;errors = array_merge($this-&gt;errors, $errors);
}




public function getErrors()
{
return array_unique($this-&gt;errors, SORT_REGULAR);
}








protected function incrementPath($path, $i)
{
if ($path !== '') {
if (is_int($i)) {
$path .= '[' . $i . ']';
} else if ($i == '') {
$path .= '';
} else {
$path .= '.' . $i;
}
} else {
$path = $i;
}

return $path;
}









protected function checkArray($value, $schema = null, $path = null, $i = null)
{
$validator = new Collection($this-&gt;checkMode);
$validator-&gt;check($value, $schema, $path, $i);

$this-&gt;addErrors($validator-&gt;getErrors());
}









protected function checkObject($value, $schema = null, $path = null, $i = null)
{
$validator = new Object($this-&gt;checkMode);
$validator-&gt;check($value, $schema, $path, $i);

$this-&gt;addErrors($validator-&gt;getErrors());
}









protected function checkType($value, $schema = null, $path = null, $i = null)
{
$validator = new Type($this-&gt;checkMode);
$validator-&gt;check($value, $schema, $path, $i);

$this-&gt;addErrors($validator-&gt;getErrors());
}









protected function checkUndefined($value, $schema = null, $path = null, $i = null)
{
$validator = new Undefined($this-&gt;checkMode);
$validator-&gt;check($value, $schema, $path, $i);

$this-&gt;addErrors($validator-&gt;getErrors());
}









protected function checkString($value, $schema = null, $path = null, $i = null)
{
$validator = new String($this-&gt;checkMode);
$validator-&gt;check($value, $schema, $path, $i);

$this-&gt;addErrors($validator-&gt;getErrors());
}









protected function checkNumber($value, $schema = null, $path = null, $i = null)
{
$validator = new Number($this-&gt;checkMode);
$validator-&gt;check($value, $schema, $path, $i);

$this-&gt;addErrors($validator-&gt;getErrors());
}









protected function checkEnum($value, $schema = null, $path = null, $i = null)
{
$validator = new Enum($this-&gt;checkMode);
$validator-&gt;check($value, $schema, $path, $i);

$this-&gt;addErrors($validator-&gt;getErrors());
}




public function isValid()
{
return !$this-&gt;getErrors();
}
}&lt;?php

namespace JsonSchema\Constraints;







class Collection extends Constraint
{



public function check($value, $schema = null, $path = null, $i = null)
{

 if (isset($schema-&gt;minItems) &amp;&amp; count($value) &lt; $schema-&gt;minItems) {
$this-&gt;addError($path, "There must be a minimum of " . $schema-&gt;minItems . " in the array");
}

 if (isset($schema-&gt;maxItems) &amp;&amp; count($value) &gt; $schema-&gt;maxItems) {
$this-&gt;addError($path, "There must be a maximum of " . $schema-&gt;maxItems . " in the array");
}

 
 if (isset($schema-&gt;uniqueItems) &amp;&amp; array_unique($value) != $value) {
$this-&gt;addError($path, "There are no duplicates allowed in the array");
}


 if (isset($schema-&gt;items)) {
$this-&gt;validateItems($value, $schema, $path, $i);
}
}









protected function validateItems($value, $schema = null, $path = null, $i = null)
{
if (!is_array($schema-&gt;items)) {

 foreach ($value as $k =&gt; $v) {
$initErrors = $this-&gt;getErrors();


 if (!isset($schema-&gt;additionalItems) || $schema-&gt;additionalItems === false) {
$this-&gt;checkUndefined($v, $schema-&gt;items, $path, $k);
}


 if (count($initErrors) &lt; count($this-&gt;getErrors()) &amp;&amp; (isset($schema-&gt;additionalItems) &amp;&amp; $schema-&gt;additionalItems !== false)) {
$secondErrors = $this-&gt;getErrors();
$this-&gt;checkUndefined($v, $schema-&gt;additionalItems, $path, $k);
}


 if (isset($secondErrors) &amp;&amp; count($secondErrors) &lt; $this-&gt;getErrors()) {
$this-&gt;errors = $secondErrors;
} elseif (isset($secondErrors) &amp;&amp; count($secondErrors) == count($this-&gt;getErrors())) {
$this-&gt;errors = $initErrors;
}
}
} else {

 foreach ($value as $k =&gt; $v) {
if (array_key_exists($k, $schema-&gt;items)) {
$this-&gt;checkUndefined($v, $schema-&gt;items[$k], $path, $k);
} else {

 if (array_key_exists('additionalItems', $schema) &amp;&amp; $schema-&gt;additionalItems !== false) {
$this-&gt;checkUndefined($v, $schema-&gt;additionalItems, $path, $k);
} else {
$this-&gt;addError(
$path,
'The item ' . $i . '[' . $k . '] is not defined in the objTypeDef and the objTypeDef does not allow additional properties'
);
}
}
}


 for ($k = count($value); $k &lt; count($schema-&gt;items); $k++) {
$this-&gt;checkUndefined(new Undefined(), $schema-&gt;items[$k], $path, $k);
}
}
}
}&lt;?php

namespace JsonSchema\Constraints;







class Enum extends Constraint
{



public function check($element, $schema = null, $path = null, $i = null)
{
foreach ($schema-&gt;enum as $possibleValue) {
if ($possibleValue == $element) {
$found = true;
break;
}
}

if (!isset($found)) {
$this-&gt;addError($path, "does not have a value in the enumeration " . implode(', ', $schema-&gt;enum));
}
}
}&lt;?php

namespace JsonSchema\Constraints;







class String extends Constraint
{



public function check($element, $schema = null, $path = null, $i = null)
{

 if (isset($schema-&gt;maxLength) &amp;&amp; strlen($element) &gt; $schema-&gt;maxLength) {
$this-&gt;addError($path, "must be at most " . $schema-&gt;maxLength . " characters long");
}


 if (isset($schema-&gt;minLength) &amp;&amp; strlen($element) &lt; $schema-&gt;minLength) {
$this-&gt;addError($path, "must be at least " . $schema-&gt;minLength . " characters long");
}


 if (isset($schema-&gt;pattern) &amp;&amp; !preg_match('/' . $schema-&gt;pattern . '/', $element)) {
$this-&gt;addError($path, "does not match the regex pattern " . $schema-&gt;pattern);
}
}
}&lt;?php

namespace JsonSchema;

use JsonSchema\Constraints\Schema;
use JsonSchema\Constraints\Constraint;








class Validator extends Constraint
{







function check($value, $schema = null, $path = null, $i = null)
{
$validator = new Schema($this-&gt;checkMode);
$validator-&gt;check($value, $schema);
$this-&gt;addErrors($validator-&gt;getErrors());
}
}&lt;?php


if (!class_exists('Composer\\Autoload\\ClassLoader', false)) {
require __DIR__ . '/composer' . '/ClassLoader.php';
}

return call_user_func(function() {
$loader = new \Composer\Autoload\ClassLoader();
$composerDir = __DIR__ . '/composer';

$map = require $composerDir . '/autoload_namespaces.php';
foreach ($map as $namespace =&gt; $path) {
$loader-&gt;add($namespace, $path);
}

$classMap = require $composerDir . '/autoload_classmap.php';
if ($classMap) {
$loader-&gt;addClassMap($classMap);
}

$loader-&gt;register();

return $loader;
});
&lt;?php



$vendorDir = dirname(__DIR__);
$baseDir = dirname($vendorDir);

return array(
'Symfony\\Component\\Process' =&gt; $vendorDir . '/symfony/process/',
'Symfony\\Component\\Finder' =&gt; $vendorDir . '/symfony/finder/',
'Symfony\\Component\\Console' =&gt; $vendorDir . '/symfony/console/',
'Seld\\JsonLint' =&gt; $vendorDir . '/seld/jsonlint/src/',
'JsonSchema' =&gt; $vendorDir . '/justinrainbow/json-schema/src/',
'Composer' =&gt; $baseDir . '/src/',
);
&lt;?php



$vendorDir = dirname(__DIR__);
$baseDir = dirname($vendorDir);

return array(
);
&lt;?php











namespace Composer\Autoload;





























class ClassLoader
{
private $prefixes = array();
private $fallbackDirs = array();
private $useIncludePath = false;
private $classMap = array();

public function getPrefixes()
{
return $this-&gt;prefixes;
}

public function getFallbackDirs()
{
return $this-&gt;fallbackDirs;
}

public function getClassMap()
{
return $this-&gt;classMap;
}




public function addClassMap(array $classMap)
{
if ($this-&gt;classMap) {
$this-&gt;classMap = array_merge($this-&gt;classMap, $classMap);
} else {
$this-&gt;classMap = $classMap;
}
}







public function add($prefix, $paths)
{
if (!$prefix) {
foreach ((array) $paths as $path) {
$this-&gt;fallbackDirs[] = $path;
}

return;
}
if (isset($this-&gt;prefixes[$prefix])) {
$this-&gt;prefixes[$prefix] = array_merge(
$this-&gt;prefixes[$prefix],
(array) $paths
);
} else {
$this-&gt;prefixes[$prefix] = (array) $paths;
}
}






public function setUseIncludePath($useIncludePath)
{
$this-&gt;useIncludePath = $useIncludePath;
}







public function getUseIncludePath()
{
return $this-&gt;useIncludePath;
}






public function register($prepend = false)
{
spl_autoload_register(array($this, 'loadClass'), true, $prepend);
}




public function unregister()
{
spl_autoload_unregister(array($this, 'loadClass'));
}







public function loadClass($class)
{
if ($file = $this-&gt;findFile($class)) {
include $file;

return true;
}
}








public function findFile($class)
{
if (isset($this-&gt;classMap[$class])) {
return $this-&gt;classMap[$class];
}

if ('\\' == $class[0]) {
$class = substr($class, 1);
}

if (false !== $pos = strrpos($class, '\\')) {

 $classPath = str_replace('\\', DIRECTORY_SEPARATOR, substr($class, 0, $pos)) . DIRECTORY_SEPARATOR;
$className = substr($class, $pos + 1);
} else {

 $classPath = null;
$className = $class;
}

$classPath .= str_replace('_', DIRECTORY_SEPARATOR, $className) . '.php';

foreach ($this-&gt;prefixes as $prefix =&gt; $dirs) {
if (0 === strpos($class, $prefix)) {
foreach ($dirs as $dir) {
if (file_exists($dir . DIRECTORY_SEPARATOR . $classPath)) {
return $dir . DIRECTORY_SEPARATOR . $classPath;
}
}
}
}

foreach ($this-&gt;fallbackDirs as $dir) {
if (file_exists($dir . DIRECTORY_SEPARATOR . $classPath)) {
return $dir . DIRECTORY_SEPARATOR . $classPath;
}
}

if ($this-&gt;useIncludePath &amp;&amp; $file = stream_resolve_include_path($classPath)) {
return $file;
}
}
}
&lt;?php

require __DIR__.'/../src/bootstrap.php';

use Composer\Console\Application;

error_reporting(-1);
@ini_set('display_errors', 1);
@ini_set('memory_limit', '512M');

// run the command application
$application = new Application();
$application-&gt;run();

Copyright (c) 2011 Nils Adermann, Jordi Boggiano

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

¬¢ÀÜ√ªv√í8∆í)√µ√Å&amp;7C√±:√Ω¬°;&#65533;&#65533;&#65533;GBMB</pre></body></html>